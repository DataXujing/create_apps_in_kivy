{
    "docs": [
        {
            "location": "/about/",
            "text": "\u5173\u4e8e\u6211\n\n\n\n\n\n\n\u5f90\u9759\n\uff1a\uff08\ndataxujing\n\uff09 \u5c0f\u767d\u4e00\u4e2a\uff0cAI\u56fe\u50cf\u7b97\u6cd5\u7814\u53d1\u5de5\u7a0b\u5e08\uff0c\u6570\u636e\u79d1\u5b66\u7231\u597d\u8005\uff0c\u559c\u6b22R, Python, C++ \u5173\u6ce8\u673a\u5668\u5b66\u4e60\uff0c\u6df1\u5ea6\u5b66\u4e60\u7b49AI\u9886\u57df\uff1b \u559c\u6b22\u7f51\u7edc\u722c\u866b\uff0c\u5173\u6ce8\u524d\u7aef\u53ef\u89c6\u5316; \u5bf9ASR(\u8bed\u97f3\u8bc6\u522b)\uff0cNLP(\u81ea\u7136\u8bed\u8a00\u5904\u7406)\uff0cCV(\u8ba1\u7b97\u673a\u89c6\u89c9)\u5747\u6709\u6d89\u730e\uff1b \u76ee\u524d\u4ece\u4e8b\u533b\u7597\u5f71\u50cfAI\u7b97\u6cd5\u7684\u7814\u7a76\u548c\u843d\u5730\u5de5\u4f5c\u3002\u719f\u6089Python\u7684GUI,Web\u5f00\u53d1\u3002\n\n\n\u5173\u4e8e\u8bfe\u7a0b\n\n\n\u8bfe\u7a0b\u7279\u70b9\uff1a\n\n\n\n\n\u5b8c\u5168\u57fa\u4e8ePython,\u5feb\u901f\u5b9e\u73b0Windows,Linux, MacOs, ios, Android\u8de8\u5e73\u53f0GUI\uff0cNUI APP\u5f00\u53d1\n\n\n\u878d\u5408\u673a\u5668\u5b66\u4e60\uff0c\u6df1\u5ea6\u5b66\u4e60\uff0c\u8ba1\u7b97\u673a\u89c6\u89c9\u9879\u76ee\u5b9e\u6218\n\n\n\n\n\u9002\u5408\u4eba\u7fa4\uff1a\n\n\n\n\n\u6709\u4e00\u5b9a\u7684C++,Python\u7f16\u7a0b\u57fa\u7840\uff0c\u5bf9GUI\u5f00\u53d1\u6709\u57fa\u7840\u7684\u4e86\u89e3\n\n\n\u719f\u6089\u673a\u5668\u5b66\u4e60\uff0c\u6df1\u5ea6\u5b66\u4e60\uff0c\u7279\u522b\u662f\u5bf9\u6df1\u5ea6\u5b66\u4e60\u7684\u76f8\u5173\u6846\u67b6\u548c\u7b97\u6cd5\u6709\u4e00\u5b9a\u7684\u4e86\u89e3\uff0c\u672c\u8bfe\u7a0b\u8bbe\u53ca\u6846\u67b6TensorFlow,Pytorch\n\n\n\u4e86\u89e3\u8ba1\u7b97\u673a\u89c6\u89c9\u76f8\u5173\u7b97\u6cd5\uff0c\u672c\u8bfe\u7a0b\u9879\u76ee\u8bbe\u53ca\uff1a \u4eba\u8138\u68c0\u6d4b\uff0c\u7269\u4f53\u8fb9\u7f18\u68c0\u6d4b\uff0c\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\uff0c\u53caOpenCV\u7684\u76f8\u5173\u7b97\u6cd5\n\n\n\n\n\u8bfe\u7a0b\u76ee\u6807\uff1a\n\n\n\n\n\u5b9e\u73b0\u57fa\u4e8eKivy\u7684APP\u5feb\u901f\u5f00\u53d1\n\n\n\n\n\u8bfe\u7a0b\u8bbe\u53ca\u5b9e\u6218\u9879\u76ee\uff1a\n\n\n\n\n\u57fa\u4e8ePyQt5\u7684AI\u4eac\u5267\u6362\u8138\u8f6f\u4ef6\u5f00\u53d1\n\n\n\u57fa\u4e8eKivy(kivymd)\u7684\u6d82\u9e26\u753b\u677f\u8f6f\u4ef6\u5f00\u53d1\n\n\n\u57fa\u4e8ekivy\u7684\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4bAPP\u5f00\u53d1\n\n\n\u57fa\u4e8ekivymd\u7684GAN\u4e00\u952e\u73b0\u5b9e\u8f6c\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fbAPP\u5f00\u53d1\n\n\nkivy\u7684\u5b89\u5353apk\u6253\u5305\u548cWindow\u53ef\u6267\u884c\u6587\u4ef6\u6253\u5305\n\n\n\n\n\u672c\u6559\u7a0b\u6d89\u53ca\u6240\u6709\u6e90\u7801\u4e0b\u8f7d: \nhttps://github.com/DataXujing/create_apps_in_kivy",
            "title": "\u5173\u4e8e"
        },
        {
            "location": "/about/#_1",
            "text": "\u5f90\u9759 \uff1a\uff08 dataxujing \uff09 \u5c0f\u767d\u4e00\u4e2a\uff0cAI\u56fe\u50cf\u7b97\u6cd5\u7814\u53d1\u5de5\u7a0b\u5e08\uff0c\u6570\u636e\u79d1\u5b66\u7231\u597d\u8005\uff0c\u559c\u6b22R, Python, C++ \u5173\u6ce8\u673a\u5668\u5b66\u4e60\uff0c\u6df1\u5ea6\u5b66\u4e60\u7b49AI\u9886\u57df\uff1b \u559c\u6b22\u7f51\u7edc\u722c\u866b\uff0c\u5173\u6ce8\u524d\u7aef\u53ef\u89c6\u5316; \u5bf9ASR(\u8bed\u97f3\u8bc6\u522b)\uff0cNLP(\u81ea\u7136\u8bed\u8a00\u5904\u7406)\uff0cCV(\u8ba1\u7b97\u673a\u89c6\u89c9)\u5747\u6709\u6d89\u730e\uff1b \u76ee\u524d\u4ece\u4e8b\u533b\u7597\u5f71\u50cfAI\u7b97\u6cd5\u7684\u7814\u7a76\u548c\u843d\u5730\u5de5\u4f5c\u3002\u719f\u6089Python\u7684GUI,Web\u5f00\u53d1\u3002",
            "title": "\u5173\u4e8e\u6211"
        },
        {
            "location": "/about/#_2",
            "text": "\u8bfe\u7a0b\u7279\u70b9\uff1a   \u5b8c\u5168\u57fa\u4e8ePython,\u5feb\u901f\u5b9e\u73b0Windows,Linux, MacOs, ios, Android\u8de8\u5e73\u53f0GUI\uff0cNUI APP\u5f00\u53d1  \u878d\u5408\u673a\u5668\u5b66\u4e60\uff0c\u6df1\u5ea6\u5b66\u4e60\uff0c\u8ba1\u7b97\u673a\u89c6\u89c9\u9879\u76ee\u5b9e\u6218   \u9002\u5408\u4eba\u7fa4\uff1a   \u6709\u4e00\u5b9a\u7684C++,Python\u7f16\u7a0b\u57fa\u7840\uff0c\u5bf9GUI\u5f00\u53d1\u6709\u57fa\u7840\u7684\u4e86\u89e3  \u719f\u6089\u673a\u5668\u5b66\u4e60\uff0c\u6df1\u5ea6\u5b66\u4e60\uff0c\u7279\u522b\u662f\u5bf9\u6df1\u5ea6\u5b66\u4e60\u7684\u76f8\u5173\u6846\u67b6\u548c\u7b97\u6cd5\u6709\u4e00\u5b9a\u7684\u4e86\u89e3\uff0c\u672c\u8bfe\u7a0b\u8bbe\u53ca\u6846\u67b6TensorFlow,Pytorch  \u4e86\u89e3\u8ba1\u7b97\u673a\u89c6\u89c9\u76f8\u5173\u7b97\u6cd5\uff0c\u672c\u8bfe\u7a0b\u9879\u76ee\u8bbe\u53ca\uff1a \u4eba\u8138\u68c0\u6d4b\uff0c\u7269\u4f53\u8fb9\u7f18\u68c0\u6d4b\uff0c\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\uff0c\u53caOpenCV\u7684\u76f8\u5173\u7b97\u6cd5   \u8bfe\u7a0b\u76ee\u6807\uff1a   \u5b9e\u73b0\u57fa\u4e8eKivy\u7684APP\u5feb\u901f\u5f00\u53d1   \u8bfe\u7a0b\u8bbe\u53ca\u5b9e\u6218\u9879\u76ee\uff1a   \u57fa\u4e8ePyQt5\u7684AI\u4eac\u5267\u6362\u8138\u8f6f\u4ef6\u5f00\u53d1  \u57fa\u4e8eKivy(kivymd)\u7684\u6d82\u9e26\u753b\u677f\u8f6f\u4ef6\u5f00\u53d1  \u57fa\u4e8ekivy\u7684\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4bAPP\u5f00\u53d1  \u57fa\u4e8ekivymd\u7684GAN\u4e00\u952e\u73b0\u5b9e\u8f6c\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fbAPP\u5f00\u53d1  kivy\u7684\u5b89\u5353apk\u6253\u5305\u548cWindow\u53ef\u6267\u884c\u6587\u4ef6\u6253\u5305   \u672c\u6559\u7a0b\u6d89\u53ca\u6240\u6709\u6e90\u7801\u4e0b\u8f7d:  https://github.com/DataXujing/create_apps_in_kivy",
            "title": "\u5173\u4e8e\u8bfe\u7a0b"
        },
        {
            "location": "/",
            "text": "\u524d\u8a00 \n\n\n\u8bfe\u7a0b\u7279\u70b9\uff1a\n\n\n\n\n\u5b8c\u5168\u57fa\u4e8ePython,\u5feb\u901f\u5b9e\u73b0Windows,Linux, MacOs, ios, Android\u8de8\u5e73\u53f0GUI\uff0cNUI APP\u5f00\u53d1\n\n\n\u878d\u5408\u673a\u5668\u5b66\u4e60\uff0c\u6df1\u5ea6\u5b66\u4e60\uff0c\u8ba1\u7b97\u673a\u89c6\u89c9\u9879\u76ee\u5b9e\u6218\n\n\n\n\n\u9002\u5408\u4eba\u7fa4\uff1a\n\n\n\n\n\u6709\u4e00\u5b9a\u7684C++,Python\u7f16\u7a0b\u57fa\u7840\uff0c\u5bf9GUI\u5f00\u53d1\u6709\u57fa\u7840\u7684\u4e86\u89e3\n\n\n\u719f\u6089\u673a\u5668\u5b66\u4e60\uff0c\u6df1\u5ea6\u5b66\u4e60\uff0c\u7279\u522b\u662f\u5bf9\u6df1\u5ea6\u5b66\u4e60\u7684\u76f8\u5173\u6846\u67b6\u548c\u7b97\u6cd5\u6709\u4e00\u5b9a\u7684\u4e86\u89e3\uff0c\u672c\u8bfe\u7a0b\u8bbe\u53ca\u6846\u67b6TensorFlow,Pytorch\n\n\n\u4e86\u89e3\u8ba1\u7b97\u673a\u89c6\u89c9\u76f8\u5173\u7b97\u6cd5\uff0c\u672c\u8bfe\u7a0b\u9879\u76ee\u8bbe\u53ca\uff1a \u4eba\u8138\u68c0\u6d4b\uff0c\u7269\u4f53\u8fb9\u7f18\u68c0\u6d4b\uff0c\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\uff0c\u53caOpenCV\u7684\u76f8\u5173\u7b97\u6cd5\n\n\n\n\n\u8bfe\u7a0b\u76ee\u6807\uff1a\n\n\n\n\n\u5b9e\u73b0\u57fa\u4e8eKivy\u7684APP\u5feb\u901f\u5f00\u53d1\n\n\n\n\n\u8bfe\u7a0b\u8bbe\u53ca\u5b9e\u6218\u9879\u76ee\uff1a\n\n\n\n\n\u57fa\u4e8ePyQt5\u7684AI\u4eac\u5267\u6362\u8138\u8f6f\u4ef6\u5f00\u53d1\n\n\n\u57fa\u4e8eKivy(kivymd)\u7684\u6d82\u9e26\u753b\u677f\u8f6f\u4ef6\u5f00\u53d1\n\n\n\u57fa\u4e8ekivy\u7684\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4bAPP\u5f00\u53d1\n\n\n\u57fa\u4e8ekivymd\u7684GAN\u4e00\u952e\u73b0\u5b9e\u8f6c\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fbAPP\u5f00\u53d1\n\n\nkivy\u7684\u5b89\u5353apk\u6253\u5305\u548cWindow\u53ef\u6267\u884c\u6587\u4ef6\u6253\u5305\n\n\n\n\n1.kivy\u4ecb\u7ecd\n\n\n\n\n1.kivy\u6846\u67b6\u4ecb\u7ecd\u53cakivy\u4e0ePyQt5\u7684\u5bf9\u6bd4\n\n\n2.kivy\u5b66\u4e60\u8d44\u6e90\u4ecb\u7ecd(\u5305\u62ec \u5b98\u7f51\uff0c\u4e2d\u6587\u6587\u6863\uff0c\u4e66\u7c4d\uff0cB\u7ad9\u8d44\u6e90\u5206\u4eab\uff09\n\n\n3.kivymd\u7684\u7b80\u5355\u4ecb\u7ecd\n\n\n4.\u8bfe\u7a0b\u5b9e\u73b0APP\u6548\u679c\u5c55\u793a\uff08\u5305\u62ecPyQt5\u7a0b\u5e8f\u548c\u672c\u8bfe\u7a0b\u7684\u7a0b\u5e8f)\n\n\n5.\u6253\u5305\u65b9\u5f0f\uff1a3\u79cdandroid\u6253\u5305\u65b9\u5f0f\uff0cpyinstaller\u548cnuitka\u6253\u5305\u53ca\u5176\u4ed6\u4eec\u7684\u4f18\u7f3a\u70b9\n\n\n\n\n2.\u6d82\u9e26\u753b\u677f\u9879\u76ee\u57fa\u4e8ekivy\u5b9e\u73b0\n\n\n\n\n1.\u9879\u76ee\u5c55\u793a\u4e0e\u663e\u793a\u753b\u7b14\u7684\u8f68\u8ff9\n\n\n2.\u8bbe\u7f6e\u989c\u8272\u7684Button\n\n\n3.\u8bbe\u7f6e\u7ebf\u5bbd\u7684Button\n\n\n4.\u6309\u94ae\u8fb9\u6846\u7684\u8bbe\u7f6e\n\n\n5.\u5c4f\u5e55\u6e05\u9664\u529f\u80fd\u7684\u5b9e\u73b0\n\n\n6.\u4e2d\u6587\u663e\u793a\u95ee\u9898\u53ca\u66ff\u6362icon\u548ctitle\n\n\n7.\u9879\u76ee\u603b\u7ed3\n\n\n\n\n3.\u6d82\u9e26\u753b\u677f\u9879\u76ee\u57fa\u4e8ekivymd\u5b9e\u73b0\n\n\n\n\n1.\u9879\u76ee\u5c55\u793a\u4e0e\u753b\u677f\u6574\u4f53\u754c\u9762\n\n\n2.\u6539\u53d8\u7ebf\u5bbdMDFloatingActionButtonSpeedDial\u7684\u5b9e\u73b0\n\n\n3.\u6e05\u9664\u529f\u80fdMDFloatingActionButton\u7684\u5b9e\u73b0\n\n\n4.\u6539\u53d8\u989c\u8272MDRoundFlatButton\u7684\u5b9e\u73b0\n\n\n5.\u9879\u76ee\u603b\u7ed3\n\n\n\n\n4.\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b\u9879\u76ee(\u57fa\u4e8eKivy)\n\n\n\n\n1.\u8f66\u9053\u7ebf\u68c0\u6d4b\u7684OpenCV\u5b9e\u73b0\n\n\n2.\u9879\u76ee\u5c55\u793a\u53caIndex\u9875\u9762\u5f00\u53d1\n\n\n3.\u56fe\u50cf\u8f66\u9053\u7ebf\u68c0\u6d4b\u9875\u9762\u5f00\u53d1\n\n\n4.\u624b\u673a\u6444\u50cf\u5934\u89c6\u9891\u6d41\u8f66\u9053\u7ebf\u76d1\u6d4b\u5f00\u53d1\n\n\n5.\u9879\u76ee\u603b\u7ed3\n\n\n\n\n5.\u57fa\u4e8e\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\u7684\u4e00\u952e\u73b0\u5b9e\u8f6c\u6362\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fb\u9879\u76ee(\u57fa\u4e8eKivymd)\n\n\n\n\n1.CartoonGAN\u7684Flask\u90e8\u7f72\u4e0e\u6d4b\u8bd5\n\n\n2.Kivymd\u5b9a\u4e49\u4e3b\u754c\u9762\n\n\n3.Home\u754c\u9762\u7684\u5b9e\u73b0\n\n\n4.UPLOADIMAGE\u529f\u80fd\u7684\u5b9e\u73b0\n\n\n5.DOWNLOAD\u529f\u80fd\u7684\u5b9e\u73b0\n\n\n6.\u9879\u76ee\u603b\u7ed3\n\n\n\n\n6.pyinstaller\u6253\u5305Windows\u684c\u9762\u5e94\u7528\u7a0b\u5e8f\n\n\n\n\n\u4ee5\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b\u9879\u76eeWindows\u6253\u5305\u4e3a\u4f8b\n\n\n\n\n7.setupfactory\u5b89\u88c5\u7a0b\u5e8f\u6253\u5305\n\n\n8.p4a Android\u6253\u5305\u57fa\u4e8ekivy\u7684\u6d82\u9e26\u753b\u677f\u9879\u76ee\n\n\n\n\n1.\u57fa\u4e8eKivy\u5f00\u53d1\u7684\u6d82\u9e26\u753b\u677f\u9879\u76ee\u7684p4a\u5b89\u5353\u6253\u5305\u53ca\u9879\u76ee\u6f14\u793a\n\n\n2.MUMU\u5b89\u5353\u6a21\u62df\u5668\u53caadb_server.exe\u8c03\u8bd5\n\n\n3.adb\u5b89\u5353\u8c03\u8bd5\n\n\n\n\n9.buildozer Android\u6253\u5305\u57fa\u4e8ekivymd\u7684\u6d82\u9e26\u753b\u677f\u9879\u76ee\n\n\n\n\n1.\u57fa\u4e8eKivy\u5f00\u53d1\u7684\u6d82\u9e26\u753b\u677fbuildozer\u5b89\u5353\u6253\u5305\u53ca\u5728adb\u4e0b\u8fdb\u884c\u5b89\u5353\u8c03\u8bd5\n\n\n2.\u57fa\u4e8e\u667a\u80fd\u8f66\u9053\u7ebf\u76d1\u6d4b\u9879\u76ee\u7684buildozer\u5b89\u5353\u6253\u5305\u53caadb\u5b89\u5353\u8c03\u8bd5\n\n\n3.\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\u7684\u4e00\u952e\u73b0\u5b9e\u8f6c\u6362\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fb\u9879\u76ee(\u57faKivymd)buildozer\u5b89\u5353\u6253\u5305\u53caadb\u8c03\u8bd5\n\n\n\n\n10.\u603b\u7ed3\u52a0\u9879\u76ee\u5c55\u793a\n\n\n\n\n1.\u6700\u540e\u7684\u4f5c\u4e1a\n\n\n2.\u9644\u4ef6\uff1a \u57fa\u4e8ePyQt5\u7684AI\u4eac\u5267\u6362\u8138\u8f6f\u4ef6\u7684\u6e90\u7801\u548c\u6f14\u793a",
            "title": "\u524d\u8a00"
        },
        {
            "location": "/#_1",
            "text": "\u8bfe\u7a0b\u7279\u70b9\uff1a   \u5b8c\u5168\u57fa\u4e8ePython,\u5feb\u901f\u5b9e\u73b0Windows,Linux, MacOs, ios, Android\u8de8\u5e73\u53f0GUI\uff0cNUI APP\u5f00\u53d1  \u878d\u5408\u673a\u5668\u5b66\u4e60\uff0c\u6df1\u5ea6\u5b66\u4e60\uff0c\u8ba1\u7b97\u673a\u89c6\u89c9\u9879\u76ee\u5b9e\u6218   \u9002\u5408\u4eba\u7fa4\uff1a   \u6709\u4e00\u5b9a\u7684C++,Python\u7f16\u7a0b\u57fa\u7840\uff0c\u5bf9GUI\u5f00\u53d1\u6709\u57fa\u7840\u7684\u4e86\u89e3  \u719f\u6089\u673a\u5668\u5b66\u4e60\uff0c\u6df1\u5ea6\u5b66\u4e60\uff0c\u7279\u522b\u662f\u5bf9\u6df1\u5ea6\u5b66\u4e60\u7684\u76f8\u5173\u6846\u67b6\u548c\u7b97\u6cd5\u6709\u4e00\u5b9a\u7684\u4e86\u89e3\uff0c\u672c\u8bfe\u7a0b\u8bbe\u53ca\u6846\u67b6TensorFlow,Pytorch  \u4e86\u89e3\u8ba1\u7b97\u673a\u89c6\u89c9\u76f8\u5173\u7b97\u6cd5\uff0c\u672c\u8bfe\u7a0b\u9879\u76ee\u8bbe\u53ca\uff1a \u4eba\u8138\u68c0\u6d4b\uff0c\u7269\u4f53\u8fb9\u7f18\u68c0\u6d4b\uff0c\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\uff0c\u53caOpenCV\u7684\u76f8\u5173\u7b97\u6cd5   \u8bfe\u7a0b\u76ee\u6807\uff1a   \u5b9e\u73b0\u57fa\u4e8eKivy\u7684APP\u5feb\u901f\u5f00\u53d1   \u8bfe\u7a0b\u8bbe\u53ca\u5b9e\u6218\u9879\u76ee\uff1a   \u57fa\u4e8ePyQt5\u7684AI\u4eac\u5267\u6362\u8138\u8f6f\u4ef6\u5f00\u53d1  \u57fa\u4e8eKivy(kivymd)\u7684\u6d82\u9e26\u753b\u677f\u8f6f\u4ef6\u5f00\u53d1  \u57fa\u4e8ekivy\u7684\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4bAPP\u5f00\u53d1  \u57fa\u4e8ekivymd\u7684GAN\u4e00\u952e\u73b0\u5b9e\u8f6c\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fbAPP\u5f00\u53d1  kivy\u7684\u5b89\u5353apk\u6253\u5305\u548cWindow\u53ef\u6267\u884c\u6587\u4ef6\u6253\u5305   1.kivy\u4ecb\u7ecd   1.kivy\u6846\u67b6\u4ecb\u7ecd\u53cakivy\u4e0ePyQt5\u7684\u5bf9\u6bd4  2.kivy\u5b66\u4e60\u8d44\u6e90\u4ecb\u7ecd(\u5305\u62ec \u5b98\u7f51\uff0c\u4e2d\u6587\u6587\u6863\uff0c\u4e66\u7c4d\uff0cB\u7ad9\u8d44\u6e90\u5206\u4eab\uff09  3.kivymd\u7684\u7b80\u5355\u4ecb\u7ecd  4.\u8bfe\u7a0b\u5b9e\u73b0APP\u6548\u679c\u5c55\u793a\uff08\u5305\u62ecPyQt5\u7a0b\u5e8f\u548c\u672c\u8bfe\u7a0b\u7684\u7a0b\u5e8f)  5.\u6253\u5305\u65b9\u5f0f\uff1a3\u79cdandroid\u6253\u5305\u65b9\u5f0f\uff0cpyinstaller\u548cnuitka\u6253\u5305\u53ca\u5176\u4ed6\u4eec\u7684\u4f18\u7f3a\u70b9   2.\u6d82\u9e26\u753b\u677f\u9879\u76ee\u57fa\u4e8ekivy\u5b9e\u73b0   1.\u9879\u76ee\u5c55\u793a\u4e0e\u663e\u793a\u753b\u7b14\u7684\u8f68\u8ff9  2.\u8bbe\u7f6e\u989c\u8272\u7684Button  3.\u8bbe\u7f6e\u7ebf\u5bbd\u7684Button  4.\u6309\u94ae\u8fb9\u6846\u7684\u8bbe\u7f6e  5.\u5c4f\u5e55\u6e05\u9664\u529f\u80fd\u7684\u5b9e\u73b0  6.\u4e2d\u6587\u663e\u793a\u95ee\u9898\u53ca\u66ff\u6362icon\u548ctitle  7.\u9879\u76ee\u603b\u7ed3   3.\u6d82\u9e26\u753b\u677f\u9879\u76ee\u57fa\u4e8ekivymd\u5b9e\u73b0   1.\u9879\u76ee\u5c55\u793a\u4e0e\u753b\u677f\u6574\u4f53\u754c\u9762  2.\u6539\u53d8\u7ebf\u5bbdMDFloatingActionButtonSpeedDial\u7684\u5b9e\u73b0  3.\u6e05\u9664\u529f\u80fdMDFloatingActionButton\u7684\u5b9e\u73b0  4.\u6539\u53d8\u989c\u8272MDRoundFlatButton\u7684\u5b9e\u73b0  5.\u9879\u76ee\u603b\u7ed3   4.\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b\u9879\u76ee(\u57fa\u4e8eKivy)   1.\u8f66\u9053\u7ebf\u68c0\u6d4b\u7684OpenCV\u5b9e\u73b0  2.\u9879\u76ee\u5c55\u793a\u53caIndex\u9875\u9762\u5f00\u53d1  3.\u56fe\u50cf\u8f66\u9053\u7ebf\u68c0\u6d4b\u9875\u9762\u5f00\u53d1  4.\u624b\u673a\u6444\u50cf\u5934\u89c6\u9891\u6d41\u8f66\u9053\u7ebf\u76d1\u6d4b\u5f00\u53d1  5.\u9879\u76ee\u603b\u7ed3   5.\u57fa\u4e8e\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\u7684\u4e00\u952e\u73b0\u5b9e\u8f6c\u6362\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fb\u9879\u76ee(\u57fa\u4e8eKivymd)   1.CartoonGAN\u7684Flask\u90e8\u7f72\u4e0e\u6d4b\u8bd5  2.Kivymd\u5b9a\u4e49\u4e3b\u754c\u9762  3.Home\u754c\u9762\u7684\u5b9e\u73b0  4.UPLOADIMAGE\u529f\u80fd\u7684\u5b9e\u73b0  5.DOWNLOAD\u529f\u80fd\u7684\u5b9e\u73b0  6.\u9879\u76ee\u603b\u7ed3   6.pyinstaller\u6253\u5305Windows\u684c\u9762\u5e94\u7528\u7a0b\u5e8f   \u4ee5\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b\u9879\u76eeWindows\u6253\u5305\u4e3a\u4f8b   7.setupfactory\u5b89\u88c5\u7a0b\u5e8f\u6253\u5305  8.p4a Android\u6253\u5305\u57fa\u4e8ekivy\u7684\u6d82\u9e26\u753b\u677f\u9879\u76ee   1.\u57fa\u4e8eKivy\u5f00\u53d1\u7684\u6d82\u9e26\u753b\u677f\u9879\u76ee\u7684p4a\u5b89\u5353\u6253\u5305\u53ca\u9879\u76ee\u6f14\u793a  2.MUMU\u5b89\u5353\u6a21\u62df\u5668\u53caadb_server.exe\u8c03\u8bd5  3.adb\u5b89\u5353\u8c03\u8bd5   9.buildozer Android\u6253\u5305\u57fa\u4e8ekivymd\u7684\u6d82\u9e26\u753b\u677f\u9879\u76ee   1.\u57fa\u4e8eKivy\u5f00\u53d1\u7684\u6d82\u9e26\u753b\u677fbuildozer\u5b89\u5353\u6253\u5305\u53ca\u5728adb\u4e0b\u8fdb\u884c\u5b89\u5353\u8c03\u8bd5  2.\u57fa\u4e8e\u667a\u80fd\u8f66\u9053\u7ebf\u76d1\u6d4b\u9879\u76ee\u7684buildozer\u5b89\u5353\u6253\u5305\u53caadb\u5b89\u5353\u8c03\u8bd5  3.\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\u7684\u4e00\u952e\u73b0\u5b9e\u8f6c\u6362\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fb\u9879\u76ee(\u57faKivymd)buildozer\u5b89\u5353\u6253\u5305\u53caadb\u8c03\u8bd5   10.\u603b\u7ed3\u52a0\u9879\u76ee\u5c55\u793a   1.\u6700\u540e\u7684\u4f5c\u4e1a  2.\u9644\u4ef6\uff1a \u57fa\u4e8ePyQt5\u7684AI\u4eac\u5267\u6362\u8138\u8f6f\u4ef6\u7684\u6e90\u7801\u548c\u6f14\u793a",
            "title": "\u524d\u8a00 "
        },
        {
            "location": "/chapter1/",
            "text": "\u7b2c\u4e00\u7ae0 Kivy\u7b80\u4ecb\n\n\n\n\n\n\n \n\n\n\n\n\u56fe1-1\uff1aKivy logo\n\n\n1.kivy\u6846\u67b6\u4ecb\u7ecd\u53cakivy\u4e0ePyQt5\n\n\n\u5728Python\u4e2d\u7ecf\u5e38\u7528\u4e8eGUI\u5f00\u53d1\u7684\u63a7\u4ef6\u96c6\u6709PyQt,Tkinter,wxPython,Kivy,PyGUI\u548cLibavg.\n\n\nkivy(NUI):\n\n\nKivy \u662f\u4e00\u4e2a\u5f00\u6e90\u7684 Python \u6846\u67b6(2011\u5e74)\uff0c\u7528\u4e8e\u5feb\u901f\u5f00\u53d1\u5e94\u7528\uff0c\u5b9e\u73b0\u5404\u79cd\u5f53\u524d\u6d41\u884c\u7684\u7528\u6237\u754c\u9762\uff0c\u6bd4\u5982\u591a\u70b9 \u89e6\u6478\u7b49\u7b49\u3002 Kivy \u53ef\u4ee5\u8fd0\u884c\u4e8e Windows\uff0c Linux\uff0c MacOS\uff0c Android\uff0c iOS \u7b49\u5f53\u524d\u7edd\u5927\u90e8\u5206\u4e3b\u6d41\u684c\u9762/\u79fb \u52a8\u7aef\u64cd\u4f5c\u7cfb\u7edf\u3002 Kivy \u57fa\u4e8e Python\uff0c\u754c\u9762UI\u6587\u4ef6\u548c\u7a0b\u5e8f\u6587\u4ef6\u76f8\u4e92\u5206\u79bb\u7684\u8bbe\u8ba1\u601d\u8def\uff0c\u8bbe\u8ba1\u7b80\u6d01\u4f18\u96c5\uff0c\u8bed\u6cd5\u6613\u5b66\uff0c\u9002\u5408\u65b0 \u4eba\u5165\u95e8\u3002 \u76ee\u524d Kivy \u7684\u5b98\u65b9\u6587\u6863\u8fd8\u7b97\u5f88\u5b8c\u5584\u3002\n\n\nPyQt5(GUI):\n\n\nPyQt5\u662f\u4e00\u4e2a\u7528\u4e8e\u521b\u5efaGUI\u5e94\u7528\u7a0b\u5e8f\u7684\u8de8\u5e73\u53f0\u7684\u5de5\u5177\u5305\uff0c\u5b83\u5c06Python\u7f16\u7a0b\u8bed\u8a00\u548cQt\u5e93\u6210\u529f\u878d\u5408\u5728\u4e00\u8d77\uff0cPyQt5\u662f\u7531Phil Thompson\u5f00\u53d1\u7684\uff0c\u5b9e\u73b0\u4e86\u4e00\u4e2aPython\u6a21\u5757\u96c6\uff0cPyQt5\u62e5\u6709620\u591a\u4e2a\u7c7b\uff0c\u5c06\u8fd16000\u4e2a\u51fd\u6570\uff0cPyQt\u4e5f\u53ef\u4ee5\u8fd0\u884c\u5728\u6240\u6709\u7684\u4e3b\u6d41\u64cd\u4f5c\u7cfb\u7edf\u4e0a,\u5305\u62ecUNIX,Windows\u548cMacOS\n\n\n\u5982\u679c\u4f60\u5f00\u53d1\u4e00\u4e2a\u57fa\u4e8ePC\u7684\u5e94\u7528\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528kivy\u548cPyQt5\u5747\u53ef\u4ee5\uff0c\u5982\u679c\u4f60\u5f00\u53d1\u4e00\u4e2a\u57fa\u4e8eiOS\u6216Android\u7684\u5e94\u7528\uff0c\u5efa\u8bae\u4f60\u4f7f\u7528kivy. \u6211\u4eec\u5c06\u5728\u672c\u8282\u8bfe\u7684\u7ed3\u675f\u6f14\u793a\u4e24\u79cd\u5f00\u53d1\u5de5\u5177\u5f00\u53d1\u7684\u7b80\u5355\u7684\u5e94\u7528\u3002\n\n\n2.kivy\u5b66\u4e60\u8d44\u6e90\u4ecb\u7ecd(\u5305\u62ec \u5b98\u7f51\uff0c\u4e2d\u6587\u6587\u6863\uff0c\u4e66\u7c4d\uff0cB\u7ad9\u8d44\u6e90\u5206\u4eab\uff09\n\n\n\u63a8\u8350\u4e66\u7c4d\n\n\n\n\n \n\n\n\n\n\u63a8\u8350\u7535\u5b50\u4e66\n\n\n\n\n\n\nKivy\u4e2d\u6587\u7f16\u7a0b\u6307\u53570\n\n\n\n\n\n\nKivy\u5b98\u65b9\u6587\u6863\u7ffb\u8bd1\n\n\n\n\n\n\nkivy\u4e2d\u6587\u7f16\u7a0b\u6307\u5357\n\n\n\n\n\n\nkivy\u5b98\u65b9\u6587\u6863\n\n\n\n\n\n\nkivymd\u5b98\u65b9\u6587\u6863\n\n\n\n\n\n\nkivymd\u5b98\u65b9demo\n\n\n\n\n\n\nB\u7ad9\u8d44\u6e90\n\n\n\n\n\n\npython\u5236\u4f5cAPP\uff0ckivy\u6559\u7a0b(\u4e2d\u6587\u5b57\u5e55)\n\n\n\n\n\n\n\u4f7f\u7528python\u5f00\u53d1\u79fb\u52a8\u5e94\u7528\n\n\n\n\n\n\nKivy Tutorial - \u4f7f\u7528python\u7f16\u5199\u79fb\u52a8\u7aefapp\n\n\n\n\n\n\nBuilding a POS System with Python and Kivy\n\n\n\n\n\n\n3.kivymd\u7684\u7b80\u5355\u4ecb\u7ecd\n\n\nkivymd\u662f\u4e0eKivy\u8de8\u5e73\u53f0\u56fe\u5f62\u6846\u67b6\u4e00\u8d77\u4f7f\u7528\u7684\u4e0eMaterial Design\uff08\u6750\u6599\u8bbe\u8ba1\u8bed\u8a00\uff09\u517c\u5bb9\u7684\u7a97\u53e3\u5c0f\u90e8\u4ef6\u7684\u96c6\u5408\uff0c \u8be5\u6846\u67b6\u662f\u7528\u4e8e\u8de8\u5e73\u53f0\uff0c\u542f\u7528\u89e6\u6478\u7684\u56fe\u5f62\u5e94\u7528\u7a0b\u5e8f\u7684\u6846\u67b6\u3002\u76ee\u6807\u662f\u5728\u4e0d\u727a\u7272\u6613\u7528\u6027\u6216\u5e94\u7528\u7a0b\u5e8f\u6027\u80fd\u7684\u524d\u63d0\u4e0b\uff0c\u5c3d\u53ef\u80fd\u63a5\u8fd1Google\u7684Material Design\u89c4\u8303\u3002\n\u4f7f\u7528kivymd\u53ef\u4ee5\u4f7f\u5f97\u5728\u5b9e\u73b0\u70ab\u9177\u7684\u5e94\u7528\u7684\u540c\u65f6\u4e0d\u4f1a\u589e\u52a0\u989d\u5916\u7684\u4ee3\u7801\u91cf\u3002\n\n\n4.\u8bfe\u7a0b\u5b9e\u73b0APP\u6548\u679c\u5c55\u793a\uff08\u5305\u62ecPyQt5\u7a0b\u5e8f\u548c\u672c\u8bfe\u7a0b\u7684\u7a0b\u5e8f)\n\n\n\n\n\n\nPyQt5\uff1a AI\u4eac\u5267\u6362\u8138\u9879\u76ee\n\n\n\n\n\n\nkivy: \u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b\u9879\u76ee\n\n\n\n\n\n\nkivymd: \u4e8c\u6b21\u5143\u573a\u666f\u8fc1\u79fb\u9879\u76ee\n\n\n\n\n\n\n5.\u6253\u5305\u65b9\u5f0f\uff1a3\u79cdandroid\u6253\u5305\u65b9\u5f0f\uff0cpyinstaller\u548cnuitka\u6253\u5305\u53ca\u5176\u4ed6\u4eec\u7684\u4f18\u7f3a\u70b9\n\n\nAndroid\u6253\u5305\uff1a \n\n\n\n\nkivy Launcher(\u4e0d\u80fd\u751f\u6210apk\u5b89\u88c5\u5305\uff0c\u6211\u5c1d\u8bd5\u4e86\u5f88\u591a\u5b98\u65b9\u7684\u4f8b\u5b50\u90fd\u6ca1\u6709\u6210\u529f\uff0c\u6211\u4eec\u4e5f\u4f1a\u4e3a\u5927\u5bb6\u63d0\u4f9b\u5b89\u5353\u5305)\n\n\nbuildozer(\u5b98\u65b9\u63a8\u8350\u7684\u6253\u5305\u65b9\u5f0f\uff0c\u57fa\u4e8ep4a)\n\n\np4a\n\n\n\n\nPC\u6253\u5305\uff1a\n\n\n\n\npyinstaller\n\n\nnuitka",
            "title": "\u7b2c\u4e00\u7ae0 Kivy\u7b80\u4ecb"
        },
        {
            "location": "/chapter1/#kivy",
            "text": "\u56fe1-1\uff1aKivy logo",
            "title": "\u7b2c\u4e00\u7ae0 Kivy\u7b80\u4ecb"
        },
        {
            "location": "/chapter1/#1kivykivypyqt5",
            "text": "\u5728Python\u4e2d\u7ecf\u5e38\u7528\u4e8eGUI\u5f00\u53d1\u7684\u63a7\u4ef6\u96c6\u6709PyQt,Tkinter,wxPython,Kivy,PyGUI\u548cLibavg.  kivy(NUI):  Kivy \u662f\u4e00\u4e2a\u5f00\u6e90\u7684 Python \u6846\u67b6(2011\u5e74)\uff0c\u7528\u4e8e\u5feb\u901f\u5f00\u53d1\u5e94\u7528\uff0c\u5b9e\u73b0\u5404\u79cd\u5f53\u524d\u6d41\u884c\u7684\u7528\u6237\u754c\u9762\uff0c\u6bd4\u5982\u591a\u70b9 \u89e6\u6478\u7b49\u7b49\u3002 Kivy \u53ef\u4ee5\u8fd0\u884c\u4e8e Windows\uff0c Linux\uff0c MacOS\uff0c Android\uff0c iOS \u7b49\u5f53\u524d\u7edd\u5927\u90e8\u5206\u4e3b\u6d41\u684c\u9762/\u79fb \u52a8\u7aef\u64cd\u4f5c\u7cfb\u7edf\u3002 Kivy \u57fa\u4e8e Python\uff0c\u754c\u9762UI\u6587\u4ef6\u548c\u7a0b\u5e8f\u6587\u4ef6\u76f8\u4e92\u5206\u79bb\u7684\u8bbe\u8ba1\u601d\u8def\uff0c\u8bbe\u8ba1\u7b80\u6d01\u4f18\u96c5\uff0c\u8bed\u6cd5\u6613\u5b66\uff0c\u9002\u5408\u65b0 \u4eba\u5165\u95e8\u3002 \u76ee\u524d Kivy \u7684\u5b98\u65b9\u6587\u6863\u8fd8\u7b97\u5f88\u5b8c\u5584\u3002  PyQt5(GUI):  PyQt5\u662f\u4e00\u4e2a\u7528\u4e8e\u521b\u5efaGUI\u5e94\u7528\u7a0b\u5e8f\u7684\u8de8\u5e73\u53f0\u7684\u5de5\u5177\u5305\uff0c\u5b83\u5c06Python\u7f16\u7a0b\u8bed\u8a00\u548cQt\u5e93\u6210\u529f\u878d\u5408\u5728\u4e00\u8d77\uff0cPyQt5\u662f\u7531Phil Thompson\u5f00\u53d1\u7684\uff0c\u5b9e\u73b0\u4e86\u4e00\u4e2aPython\u6a21\u5757\u96c6\uff0cPyQt5\u62e5\u6709620\u591a\u4e2a\u7c7b\uff0c\u5c06\u8fd16000\u4e2a\u51fd\u6570\uff0cPyQt\u4e5f\u53ef\u4ee5\u8fd0\u884c\u5728\u6240\u6709\u7684\u4e3b\u6d41\u64cd\u4f5c\u7cfb\u7edf\u4e0a,\u5305\u62ecUNIX,Windows\u548cMacOS  \u5982\u679c\u4f60\u5f00\u53d1\u4e00\u4e2a\u57fa\u4e8ePC\u7684\u5e94\u7528\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528kivy\u548cPyQt5\u5747\u53ef\u4ee5\uff0c\u5982\u679c\u4f60\u5f00\u53d1\u4e00\u4e2a\u57fa\u4e8eiOS\u6216Android\u7684\u5e94\u7528\uff0c\u5efa\u8bae\u4f60\u4f7f\u7528kivy. \u6211\u4eec\u5c06\u5728\u672c\u8282\u8bfe\u7684\u7ed3\u675f\u6f14\u793a\u4e24\u79cd\u5f00\u53d1\u5de5\u5177\u5f00\u53d1\u7684\u7b80\u5355\u7684\u5e94\u7528\u3002",
            "title": "1.kivy\u6846\u67b6\u4ecb\u7ecd\u53cakivy\u4e0ePyQt5"
        },
        {
            "location": "/chapter1/#2kivy-b",
            "text": "\u63a8\u8350\u4e66\u7c4d      \u63a8\u8350\u7535\u5b50\u4e66    Kivy\u4e2d\u6587\u7f16\u7a0b\u6307\u53570    Kivy\u5b98\u65b9\u6587\u6863\u7ffb\u8bd1    kivy\u4e2d\u6587\u7f16\u7a0b\u6307\u5357    kivy\u5b98\u65b9\u6587\u6863    kivymd\u5b98\u65b9\u6587\u6863    kivymd\u5b98\u65b9demo    B\u7ad9\u8d44\u6e90    python\u5236\u4f5cAPP\uff0ckivy\u6559\u7a0b(\u4e2d\u6587\u5b57\u5e55)    \u4f7f\u7528python\u5f00\u53d1\u79fb\u52a8\u5e94\u7528    Kivy Tutorial - \u4f7f\u7528python\u7f16\u5199\u79fb\u52a8\u7aefapp    Building a POS System with Python and Kivy",
            "title": "2.kivy\u5b66\u4e60\u8d44\u6e90\u4ecb\u7ecd(\u5305\u62ec \u5b98\u7f51\uff0c\u4e2d\u6587\u6587\u6863\uff0c\u4e66\u7c4d\uff0cB\u7ad9\u8d44\u6e90\u5206\u4eab\uff09"
        },
        {
            "location": "/chapter1/#3kivymd",
            "text": "kivymd\u662f\u4e0eKivy\u8de8\u5e73\u53f0\u56fe\u5f62\u6846\u67b6\u4e00\u8d77\u4f7f\u7528\u7684\u4e0eMaterial Design\uff08\u6750\u6599\u8bbe\u8ba1\u8bed\u8a00\uff09\u517c\u5bb9\u7684\u7a97\u53e3\u5c0f\u90e8\u4ef6\u7684\u96c6\u5408\uff0c \u8be5\u6846\u67b6\u662f\u7528\u4e8e\u8de8\u5e73\u53f0\uff0c\u542f\u7528\u89e6\u6478\u7684\u56fe\u5f62\u5e94\u7528\u7a0b\u5e8f\u7684\u6846\u67b6\u3002\u76ee\u6807\u662f\u5728\u4e0d\u727a\u7272\u6613\u7528\u6027\u6216\u5e94\u7528\u7a0b\u5e8f\u6027\u80fd\u7684\u524d\u63d0\u4e0b\uff0c\u5c3d\u53ef\u80fd\u63a5\u8fd1Google\u7684Material Design\u89c4\u8303\u3002\n\u4f7f\u7528kivymd\u53ef\u4ee5\u4f7f\u5f97\u5728\u5b9e\u73b0\u70ab\u9177\u7684\u5e94\u7528\u7684\u540c\u65f6\u4e0d\u4f1a\u589e\u52a0\u989d\u5916\u7684\u4ee3\u7801\u91cf\u3002",
            "title": "3.kivymd\u7684\u7b80\u5355\u4ecb\u7ecd"
        },
        {
            "location": "/chapter1/#4apppyqt5",
            "text": "PyQt5\uff1a AI\u4eac\u5267\u6362\u8138\u9879\u76ee    kivy: \u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b\u9879\u76ee    kivymd: \u4e8c\u6b21\u5143\u573a\u666f\u8fc1\u79fb\u9879\u76ee",
            "title": "4.\u8bfe\u7a0b\u5b9e\u73b0APP\u6548\u679c\u5c55\u793a\uff08\u5305\u62ecPyQt5\u7a0b\u5e8f\u548c\u672c\u8bfe\u7a0b\u7684\u7a0b\u5e8f)"
        },
        {
            "location": "/chapter1/#53androidpyinstallernuitka",
            "text": "Android\u6253\u5305\uff1a    kivy Launcher(\u4e0d\u80fd\u751f\u6210apk\u5b89\u88c5\u5305\uff0c\u6211\u5c1d\u8bd5\u4e86\u5f88\u591a\u5b98\u65b9\u7684\u4f8b\u5b50\u90fd\u6ca1\u6709\u6210\u529f\uff0c\u6211\u4eec\u4e5f\u4f1a\u4e3a\u5927\u5bb6\u63d0\u4f9b\u5b89\u5353\u5305)  buildozer(\u5b98\u65b9\u63a8\u8350\u7684\u6253\u5305\u65b9\u5f0f\uff0c\u57fa\u4e8ep4a)  p4a   PC\u6253\u5305\uff1a   pyinstaller  nuitka",
            "title": "5.\u6253\u5305\u65b9\u5f0f\uff1a3\u79cdandroid\u6253\u5305\u65b9\u5f0f\uff0cpyinstaller\u548cnuitka\u6253\u5305\u53ca\u5176\u4ed6\u4eec\u7684\u4f18\u7f3a\u70b9"
        },
        {
            "location": "/chapter2/",
            "text": "\u7b2c\u4e8c\u7ae0 \u6d82\u9e26\u753b\u677f\u9879\u76ee\u57fa\u4e8ekivy\u5b9e\u73b0\n\n\n\n\n1.\u9879\u76ee\u5c55\u793a\u4e0e\u663e\u793a\u753b\u7b14\u7684\u8f68\u8ff9\n\n\n\u60f3\u8981\u663e\u793a\u7ed8\u56fe\u7684\u8f68\u8ff9\uff0c\u9996\u5148\u9700\u8981\u6784\u9020\u51fa\u4e00\u4e2a\u7a97\u53e3\uff0c\u8ba9\u5176\u52a0\u8f7d\n.kv\n\u6587\u4ef6\uff0c\u5e76\u5728\n.kv\n\u6587\u4ef6\u4e2d\u628a\u9875\u9762\u80cc\u666f\u8bbe\u7f6e\u4e3a\u767d\u8272\n\n\nstep1: \u65b0\u5efa\u4e00\u4e2a\nmain.py\n\u6587\u4ef6\uff0c\u5728\u5176\u4e2d\u5148\u7b80\u5355\u7684\u52a0\u8f7d\n.kv\n\u6587\u4ef6\uff0c\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\n\n\nfrom kivy.app import App\nfrom kivy.graphics import Line, Color\nfrom kivy.uix.widget import Widget\n\n\nclass DrawCanvasWidget(Widget):\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n\n\nclass PaintApp(App):\n    def build(self):\n        self.draw_canvas_widget = DrawCanvasWidget()\n\n        return self.draw_canvas_widget  # \u8fd4\u56deroot\u63a7\u4ef6\n\nif __name__ == \"__main__\":\n    PaintApp().run()\n\n\n\n\n\n\u8fd9\u65f6\u5019\u8fd0\u884c\u6548\u679c(\u4ec0\u4e48\u4e5f\u6ca1\u6709\uff0c\u4ee5\u4e3a\u6211\u4eec\u5e76\u6ca1\u6709\u5b9a\u4e49\u4efb\u4f55\u63a7\u4ef6\u548c\u7ed8\u56fe\u5728\u754c\u9762\uff09\uff1a\n\n\n\n\n \n\n\n\n\nstep2: \u521b\u5efa\u548cAPP\u540c\u540d\u7684\n.kv\n\u6587\u4ef6,\u8bbe\u7f6e\u7a97\u53e3\u7684\u4e00\u4e9b\u5c5e\u6027\n\n\n# \u6ce8\u610fpaint.kv\u6587\u4ef6\u4e2d\u4e0d\u80fd\u51fa\u73b0\u4e2d\u6587\u548c\u7c7b\u4f3c\u4e8epython\u7684\u6ce8\u91ca\n<DrawCanvasWidget>  # \u5b9a\u4e49\u9875\u9762\n    canvas.before:\n        Color:      # \u989c\u8272\n            rgba: [1,1,1,1]\n        Rectangle:  #\u5f62\u72b6\n            pos: self.pos\n            size: self.size\n\n\n\n\n\n\n\n \n\n\n\n\nstep3\uff1a\u76d1\u542c\u5c4f\u5e55\u7684\u70b9\u51fb\u548c\u79fb\u52a8\u89e6\u53d1\u4e8b\u4ef6\n\n\n\nfrom kivy.app import App\nfrom kivy.graphics import Line, Color\nfrom kivy.uix.widget import Widget\n\n\nclass DrawCanvasWidget(Widget):\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n        # \u9ed8\u8ba4\u5212\u7ebf\u7684\u989c\u8272\n        self.canvas.add(Color(rgb=[0,0,0]))\n        self.line_width = 2\n\n    def on_touch_down(self,touch):\n        if Widget.on_touch_down(self,touch):\n            return\n        with self.canvas:\n            #User data dictionary. Use this dictionary to save your own data on the touch\n            touc.ud['current_line'] = Line(points=(touch.x,touch.y),width=self.line_width)\n\n    def on_touch_move(self,touch):\n        if 'current_line' in touch.ud:\n            touch.ud['current_line'].points += (touch.x,touch.y)\n\n\nclass PaintApp(App):\n    def build(self):\n        self.draw_canvas_widget = DrawCanvasWidget()\n\n        return self.draw_canvas_widget  # \u8fd4\u56deroot\u63a7\u4ef6\n\nif __name__ == \"__main__\":\n    PaintApp().run()\n\n\n\n\n\n\n\n \n\n\n\n\n2.\u8bbe\u7f6e\u989c\u8272\u7684Button\n\n\n\u8be5\u90e8\u5206\u6211\u4eec\u901a\u8fc7button\u5b9e\u73b0\u70b9\u51fbbutton\u5207\u6362\u5212\u7ebf\u7684\u989c\u8272\uff0c\u4e0a\u4e00\u8282\u4e2d\u6211\u4eec\u4ec5\u4ec5\u5b9a\u4e49\u4e86\u4e86\u9ed8\u8ba4\u7684\u753b\u677f\u989c\u8272\u3002\n\n\n\u9996\u5148\u6211\u4eec\u5728\npaint.kv\n\u4e2d\u6dfb\u52a012\u79cd\u989c\u8272\u7684button\n\n\n#: import C kivy.utils.get_color_from_hex\n\n<BottomColorButton@ToggleButton>:\n    group: 'color'  \n    border: (3,3,3,3) \n    on_release: app.draw_canvas_widget.change_color(self.background_color)\n\n<DrawCanvasWidget>:\n    canvas.before:\n        Color: \n            rgba: [1,1,1,1]\n        Rectangle:\n            pos: self.pos\n            size: self.size\n\n    BoxLayout:\n        id: bottom_box\n        orientation: \"horizontal\"\n        padding: 2\n        spacing: 2\n        size: root.width,40\n\n        BottomColorButton:\n            background_color: C(\"#19caad\")\n            state: 'down'\n        BottomColorButton:\n            background_color: C(\"#8cc7b5\")\n        BottomColorButton:\n            background_color: C(\"#a0eee1\")\n        BottomColorButton:\n            background_color: C(\"#bee7e9\")\n        BottomColorButton:\n            background_color: C(\"#beedc7\")\n        BottomColorButton:\n            background_color: C(\"#d6d5b7\")\n        BottomColorButton:\n            background_color: C(\"#d1ba74\")\n        BottomColorButton:\n            background_color: C(\"#e6ceac\")\n        BottomColorButton:\n            background_color: C(\"#ecad9e\")\n        BottomColorButton:\n            background_color: C(\"#f4606c\")\n        BottomColorButton:\n            background_color: C(\"#3498db\")\n        BottomColorButton:\n            background_color: C(\"#1abc9c\")\n\n\n\n\n\n\nfrom kivy.app import App\nfrom kivy.graphics import Line, Color\nfrom kivy.uix.widget import Widget\n\nfrom kivy.uix.behaviors import ToggleButtonBehavior\nfrom kivy.uix.togglebutton import ToggleButton\n\n\nclass DrawCanvasWidget(Widget):\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n        # \u9ed8\u8ba4\u5212\u7ebf\u7684\u989c\u8272\n        self.canvas.add(Color(rgb=[0,0,0]))\n        self.line_width = 2\n\n    def on_touch_down(self,touch):\n        if Widget.on_touch_down(self,touch):\n            return\n        with self.canvas:\n            touch.ud['current_line'] = Line(points=(touch.x,touch.y),width=self.line_width)\n\n    def on_touch_move(self,touch):\n        if 'current_line' in touch.ud:\n            touch.ud['current_line'].points += (touch.x,touch.y)\n    # \u589e\u52a0\u8be5\u65b9\u6cd5\u6539\u53d8\u989c\u8272\n    def change_color(self,new_color):\n        self.canvas.add(Color(*new_color))\n\n\nclass PaintApp(App):\n    def build(self):\n        self.draw_canvas_widget = DrawCanvasWidget()\n\n        return self.draw_canvas_widget  # \u8fd4\u56deroot\u63a7\u4ef6\n\nif __name__ == \"__main__\":\n    PaintApp().run()\n\n\n\n\n\n\n \n\n\n\n\n3.\u8bbe\u7f6e\u7ebf\u5bbd\u7684Button\n\n\n\u76ee\u524d\u7ebf\u5bbd\u4ec5\u4ec5\u5728\u521d\u59cb\u5316\u65f6\u4f5c\u4e86\u8bbe\u7f6e\uff0c\u6539\u53d8\u7ebf\u5bbd\u548c\u6539\u53d8\u989c\u8272\u8bbe\u7f6e\u65b9\u5f0f\u4e00\u81f4\uff0c\u5728root\u63a7\u4ef6\u4e2d\u521b\u5efa\u4e00\u4e2a\u6539\u53d8\u7ebf\u5bbd\u7684\u65b9\u6cd5\n\n\n\nfrom kivy.app import App\nfrom kivy.graphics import Line, Color\nfrom kivy.uix.widget import Widget\n\nfrom kivy.uix.behaviors import ToggleButtonBehavior\nfrom kivy.uix.togglebutton import ToggleButton\nfrom kivy.utils import get_color_from_hex\n\nclass DrawCanvasWidget(Widget):\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n        # \u9ed8\u8ba4\u5212\u7ebf\u7684\u989c\u8272\n        self.canvas.add(Color(rgb=[0,0,0]))\n        self.line_width = 2\n\n    def on_touch_down(self,touch):\n        if Widget.on_touch_down(self,touch):\n            return\n        with self.canvas:\n            touch.ud['current_line'] = Line(points=(touch.x,touch.y),width=self.line_width)\n\n    def on_touch_move(self,touch):\n        if 'current_line' in touch.ud:\n            touch.ud['current_line'].points += (touch.x,touch.y)\n\n    def change_color(self,new_color):\n        self.canvas.add(Color(*new_color))\n    # \u589e\u52a0\u8be5\u65b9\u6cd5\uff0c\u6539\u53d8\u7ebf\u5bbd\n    def change_line_width(self,line_width=\"Normal\"):\n        self.line_width = {\"Thin\":1,\"Normal\":2,\"Thick\":4}[line_width]\n\n\nclass PaintApp(App):\n    def build(self):\n        self.draw_canvas_widget = DrawCanvasWidget()\n\n        return self.draw_canvas_widget  # \u8fd4\u56deroot\u63a7\u4ef6\n\nif __name__ == \"__main__\":\n    PaintApp().run()\n\n\n\n\n\u7136\u540e\u6211\u4eec\u5728\npaint.kv\n\u4e2d\u8bbe\u7f6e\u6539\u53d8\u7ebf\u5bbd\u7684button\n\n\n#: import C kivy.utils.get_color_from_hex\n\n<BottomColorButton@ToggleButton>:\n    group: 'color' \n    background_normal: ''  # \u6807\u51c6\u80cc\u666f\u989c\u8272\n    background_down: ''    # \u9009\u4e2d\u540e\u7684\u80cc\u666f\u989c\u8272\n    border: (3,3,3,3) \n    on_release: app.draw_canvas_widget.change_color(self.background_color)\n\n<LineWidthButton@ToggleButton>:\n    group: \"line_width\"\n    color: C(\"#2c3e50\")\n    background_color: C(\"#ecf0f1\")\n    background_normal: ''\n    background_down: ''\n    border: (3,3,3,3)\n    on_release: app.draw_canvas_widget.change_line_width(self.text)\n\n<DrawCanvasWidget>:\n    canvas.before:\n        Color: \n            rgba: [1,1,1,1]\n        Rectangle:\n            pos: self.pos\n            size: self.size\n\n    BoxLayout:\n        orientation: \"horizontal\"\n        padding: 2\n        spacing: 2\n        x: 0\n        top: root.top\n        size_hint: None,None\n        size: 280,44\n\n        LineWidthButton:\n            text: \"Thin\"\n\n        LineWidthButton:\n            text: \"Normal\"\n            state: \"down\"\n        LineWidthButton:\n            text: \"Thick\"\n\n\n\n    BoxLayout:\n        id: bottom_box\n        orientation: \"horizontal\"\n        padding: 2\n        spacing: 2\n        size: root.width,40\n\n        BottomColorButton:\n            background_color: C(\"#19caad\")\n            state: 'down'\n        BottomColorButton:\n            background_color: C(\"#8cc7b5\")\n        BottomColorButton:\n            background_color: C(\"#a0eee1\")\n        BottomColorButton:\n            background_color: C(\"#bee7e9\")\n        BottomColorButton:\n            background_color: C(\"#beedc7\")\n        BottomColorButton:\n            background_color: C(\"#d6d5b7\")\n        BottomColorButton:\n            background_color: C(\"#d1ba74\")\n        BottomColorButton:\n            background_color: C(\"#e6ceac\")\n        BottomColorButton:\n            background_color: C(\"#ecad9e\")\n        BottomColorButton:\n            background_color: C(\"#f4606c\")\n        BottomColorButton:\n            background_color: C(\"#3498db\")\n        BottomColorButton:\n            background_color: C(\"#1abc9c\")\n\n\n\n\n\n\n\n \n\n\n\n\n4.\u6309\u94ae\u8fb9\u6846\u7684\u8bbe\u7f6e\n\n\n\u9009\u4e2d\u4e86\u989c\u8272\u548c\u7ebf\u5bbd\u540e\uff0c\u6211\u4eec\u65e0\u6cd5\u77e5\u9053\u6211\u4eec\u76ee\u524d\u5230\u5e95\u9009\u4e2d\u7684\u662f\u54ea\u4e2a\u989c\u8272\uff0c\u662f\u54ea\u4e2a\u7ebf\u5bbd\uff0c\u56e0\u6b64\u6211\u4eec\u4e3a\u9009\u4e2d\u7684button\u6dfb\u52a0\u4e00\u4e9b\u6837\u5f0f\uff0c\u8fd9\u91cc\u6211\u4eec\u7ed9\u9009\u4e2d\u7684butoon\u5916\u9762\u6dfb\u52a0\u4e00\u4e2a\u8fb9\u6846\u3002\n\u4fee\u6539\npaint.kv\n\n\n#: import C kivy.utils.get_color_from_hex\n\n<BottomColorButton@ToggleButton>:\n    group: 'color' \n    background_normal: 'radio_background_normal.png'  # \u672a\u9009\u4e2d\u65f6\u7684\u6837\u5f0f\n    background_down: 'radio_background_down.png'      # \u9009\u4e2d\u540e\u7684\u6837\u5f0f\n    border: (3,3,3,3) \n    on_release: app.draw_canvas_widget.change_color(self.background_color)\n\n<LineWidthButton@ToggleButton>:\n    group: \"line_width\"\n    color: C(\"#2c3e50\")\n    background_color: C(\"#ecf0f1\")\n    background_normal: 'radio_background_normal.png'\n    background_down: 'radio_background_down.png'\n    border: (3,3,3,3)\n    on_release: app.draw_canvas_widget.change_line_width(self.text)\n\n<DrawCanvasWidget>:\n    canvas.before:\n        Color: \n            rgba: [1,1,1,1]\n        Rectangle:\n            pos: self.pos\n            size: self.size\n\n    BoxLayout:\n        orientation: \"horizontal\"\n        padding: 2\n        spacing: 2\n        x: 0\n        top: root.top\n        size_hint: None,None\n        size: 280,44\n\n        LineWidthButton:\n            text: \"Thin\"\n\n        LineWidthButton:\n            text: \"Normal\"\n            state: \"down\"\n        LineWidthButton:\n            text: \"Thick\"\n\n\n\n    BoxLayout:\n        id: bottom_box\n        orientation: \"horizontal\"\n        padding: 2\n        spacing: 2\n        size: root.width,40\n\n        BottomColorButton:\n            background_color: C(\"#19caad\")\n            state: 'down'\n        BottomColorButton:\n            background_color: C(\"#8cc7b5\")\n        BottomColorButton:\n            background_color: C(\"#a0eee1\")\n        BottomColorButton:\n            background_color: C(\"#bee7e9\")\n        BottomColorButton:\n            background_color: C(\"#beedc7\")\n        BottomColorButton:\n            background_color: C(\"#d6d5b7\")\n        BottomColorButton:\n            background_color: C(\"#d1ba74\")\n        BottomColorButton:\n            background_color: C(\"#e6ceac\")\n        BottomColorButton:\n            background_color: C(\"#ecad9e\")\n        BottomColorButton:\n            background_color: C(\"#f4606c\")\n        BottomColorButton:\n            background_color: C(\"#3498db\")\n        BottomColorButton:\n            background_color: C(\"#1abc9c\")\n\n\n\n\n\n\n\n\n \n\n\n\n\n5.\u5c4f\u5e55\u6e05\u9664\u529f\u80fd\u7684\u5b9e\u73b0\n\n\n\u753b\u5728\u753b\u677f\u7684\u5185\u5bb9\u6211\u4eec\u9700\u8981\u6e05\u9664\uff0c\u4e0b\u9762\u6211\u4eec\u5b9e\u73b0\u6e05\u9664\u753b\u677f\u7684\u529f\u80fd\uff0c\u9996\u5148\u6211\u4eec\u5728\npaint.kv\n\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u6e05\u9664\u7684button\n\n\n#: import C kivy.utils.get_color_from_hex\n\n<BottomColorButton@ToggleButton>:\n    group: 'color' \n    background_normal: 'radio_background_normal.png'\n    background_down: 'radio_background_down.png' \n    border: (3,3,3,3) \n    on_release: app.draw_canvas_widget.change_color(self.background_color)\n\n<LineWidthButton@ToggleButton>:\n    group: \"line_width\"\n    color: C(\"#2c3e50\")\n    background_color: C(\"#ecf0f1\")\n    background_normal: 'radio_background_normal.png'\n    background_down: 'radio_background_down.png'\n    border: (3,3,3,3)\n    on_release: app.draw_canvas_widget.change_line_width(self.text)\n\n<DrawCanvasWidget>:\n    canvas.before:\n        Color: \n            rgba: [1,1,1,1]\n        Rectangle:\n            pos: self.pos\n            size: self.size\n\n    BoxLayout:\n        orientation: \"horizontal\"\n        padding: 2\n        spacing: 2\n        x: 0\n        top: root.top\n        size_hint: None,None\n        size: 280,44\n\n        LineWidthButton:\n            text: \"Thin\"\n\n        LineWidthButton:\n            text: \"Normal\"\n            state: \"down\"\n        LineWidthButton:\n            text: \"Thick\"\n\n        # \u8fd9\u4e2abutton\u7528\u6765\u6e05\u9664\u753b\u677f\n        Button:\n            text: 'Clear'\n            on_release: root.draw_canvas_widget.clean_canvas()\n\n\n\n    BoxLayout:\n        id: bottom_box\n        orientation: \"horizontal\"\n        padding: 2\n        spacing: 2\n        size: root.width,40\n\n        BottomColorButton:\n            background_color: C(\"#19caad\")\n            state: 'down'\n        BottomColorButton:\n            background_color: C(\"#8cc7b5\")\n        BottomColorButton:\n            background_color: C(\"#a0eee1\")\n        BottomColorButton:\n            background_color: C(\"#bee7e9\")\n        BottomColorButton:\n            background_color: C(\"#beedc7\")\n        BottomColorButton:\n            background_color: C(\"#d6d5b7\")\n        BottomColorButton:\n            background_color: C(\"#d1ba74\")\n        BottomColorButton:\n            background_color: C(\"#e6ceac\")\n        BottomColorButton:\n            background_color: C(\"#ecad9e\")\n        BottomColorButton:\n            background_color: C(\"#f4606c\")\n        BottomColorButton:\n            background_color: C(\"#3498db\")\n        BottomColorButton:\n            background_color: C(\"#1abc9c\")\n\n\n\n\n\n\u5728\nmain.py\n\u4e2d\u5b9e\u73b0\u6e05\u9664\u7684\u65b9\u6cd5\n\n\nfrom kivy.app import App\nfrom kivy.graphics import Line, Color\nfrom kivy.uix.widget import Widget\n\nfrom kivy.uix.behaviors import ToggleButtonBehavior\nfrom kivy.uix.togglebutton import ToggleButton\nfrom kivy.utils import get_color_from_hex\n\nclass DrawCanvasWidget(Widget):\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n        # \u9ed8\u8ba4\u5212\u7ebf\u7684\u989c\u8272\n        # self.canvas.add(Color(rgb=[0,0,0]))\n        self.change_color(get_color_from_hex('#19caad'))  # \u4fee\u6539\u9ed8\u8ba4\u5212\u7ebf\u7ebf\u989c\u8272\n        self.line_width = 2\n\n    def on_touch_down(self,touch):\n        if Widget.on_touch_down(self,touch):\n            return\n        with self.canvas:\n            touch.ud['current_line'] = Line(points=(touch.x,touch.y),width=self.line_width)\n\n    def on_touch_move(self,touch):\n        if 'current_line' in touch.ud:\n            touch.ud['current_line'].points += (touch.x,touch.y)\n\n    def change_color(self,new_color):\n        self.last_color = new_color  # \u5728\u6e05\u9664\u753b\u677f\u65f6\u4f7f\u7528\n        self.canvas.add(Color(*new_color))\n\n    def change_line_width(self,line_width=\"Normal\"):\n        self.line_width = {\"Thin\":1,\"Normal\":2,\"Thick\":4}[line_width]\n\n\n    def clean_canvas(self):\n        saved = self.children[:]  # \u4fdd\u7559root\u63a7\u4ef6\u4e0a\u7684\u5b50\u63a7\u4ef6\uff08button)\n        self.clear_widgets()  # \u6e05\u9664\u6240\u6709\u63a7\u4ef6\u95f4\n        self.canvas.clear()   # \u6e05\u9664canvas\n        for widget in saved:  # \u5c06\u6e05\u9664\u7684\u5b50\u63a7\u4ef6\u518d\u753b\u4e0a\n            self.add_widget(widget)\n\n        self.change_color(self.last_color)\n\n\n\n\nclass PaintApp(App):\n    def build(self):\n        self.draw_canvas_widget = DrawCanvasWidget()\n\n        return self.draw_canvas_widget  # \u8fd4\u56deroot\u63a7\u4ef6\n\nif __name__ == \"__main__\":\n    PaintApp().run()\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n6.\u4e2d\u6587\u663e\u793a\u95ee\u9898\u53ca\u66ff\u6362icon\u548ctitle\n\n\n\u9996\u5148\u6211\u4eec\u89e3\u51b3\u4e2d\u6587\u663e\u793a\u7684\u95ee\u9898\uff0ckivy\u5bf9\u4e8e\u4e2d\u6587\u7684\u652f\u6301\u5e76\u4e0d\u662f\u5f88\u5b8c\u7f8e\uff0c\u8fd9\u4e5f\u53ef\u80fd\u662fkivy\u5728\u56fd\u5185\u63a8\u5e7f\u4e0d\u662f\u5f88\u987a\u5229\u7684\u539f\u56e0\uff0c\u5bf9\u4e8e\u5728kv\u8bed\u8a00\u4e2d\u4f7f\u7528\u4e2d\u6587\u9700\u8981\u5bfc\u5165\u4e2d\u6587\u5b57\u5e93\u548c\u628a\u4e2d\u6587\u7f16\u7801\u6210unicode,\u800c\u5728kivy\u7684main\u811a\u672c\u4e2d\uff0c\u9700\u8981\u5728\u63a7\u4ef6\u4e2d\u901a\u8fc7font_name\u8fd9\u4e2a\u53c2\u6570\u5bfc\u5165\u4e2d\u6587\u5b57\u5e93\u3002\n\n\n\u5bf9\u4e8e\u66ff\u6362icon\u548ctitle\u6211\u4eec\u53ea\u9700\u8981\u5728build\u65b9\u6cd5\u4e2d\u5b9e\u73b0\u5c31\u53ef\u4ee5\u4e86\n\n\n\u9996\u5148\u6211\u4eec\u4fee\u6539\npaint.kv\n\u4f7f\u5176\u652f\u6301\u4e2d\u6587\n\n\n\n#: import C kivy.utils.get_color_from_hex\n\n<BottomColorButton@ToggleButton>:\n    group: 'color' \n    background_normal: 'radio_background_normal.png'\n    background_down: 'radio_background_down.png' \n    border: (3,3,3,3) \n    on_release: app.draw_canvas_widget.change_color(self.background_color)\n\n<LineWidthButton@ToggleButton>:\n    group: \"line_width\"\n    color: C(\"#2c3e50\")\n    background_color: C(\"#ecf0f1\")\n    background_normal: 'radio_background_normal.png'\n    background_down: 'radio_background_down.png'\n    border: (3,3,3,3)\n    on_release: app.draw_canvas_widget.change_line_width(self.text)\n\n<DrawCanvasWidget>:\n    canvas.before:\n        Color: \n            rgba: [1,1,1,1]\n        Rectangle:\n            pos: self.pos\n            size: self.size\n\n    BoxLayout:\n        orientation: \"horizontal\"\n        padding: 2\n        spacing: 2\n        x: 0\n        top: root.top\n        size_hint: None,None\n        size: 280,44\n\n        LineWidthButton:  # \u8fd9\u91cc\u6211\u4eec\u4fee\u6539\u652f\u6301\u4e2d\u6587\n            text: \"\\u53d8\\u7ec6\"\n            font_name: \"./DroidSansFallback.ttf\"\n        LineWidthButton:\n            text: \"\\u6b63\\u5e38\"\n            font_name: \"./DroidSansFallback.ttf\"\n            state: \"down\"\n        LineWidthButton:\n            text: \"\\u52a0\\u7c97\"\n            font_name: \"./DroidSansFallback.ttf\"\n\n        Button:\n            text: '\\u6e05\\u9664'\n            on_release: app.draw_canvas_widget.clean_canvas()\n            font_name: \"./DroidSansFallback.ttf\"\n\n\n    BoxLayout:\n        id: bottom_box\n        orientation: \"horizontal\"\n        padding: 2\n        spacing: 2\n        size: root.width,40\n\n        BottomColorButton:\n            background_color: C(\"#19caad\")\n            state: 'down'\n        BottomColorButton:\n            background_color: C(\"#8cc7b5\")\n        BottomColorButton:\n            background_color: C(\"#a0eee1\")\n        BottomColorButton:\n            background_color: C(\"#bee7e9\")\n        BottomColorButton:\n            background_color: C(\"#beedc7\")\n        BottomColorButton:\n            background_color: C(\"#d6d5b7\")\n        BottomColorButton:\n            background_color: C(\"#d1ba74\")\n        BottomColorButton:\n            background_color: C(\"#e6ceac\")\n        BottomColorButton:\n            background_color: C(\"#ecad9e\")\n        BottomColorButton:\n            background_color: C(\"#f4606c\")\n        BottomColorButton:\n            background_color: C(\"#3498db\")\n        BottomColorButton:\n            background_color: C(\"#1abc9c\")\n\n\n\n\n\n\u5176\u6b21\u6211\u4eec\u4fee\u6539icon\u548ctitle\n\n\nfrom kivy.app import App\nfrom kivy.graphics import Line, Color\nfrom kivy.uix.widget import Widget\n\nfrom kivy.uix.behaviors import ToggleButtonBehavior\nfrom kivy.uix.togglebutton import ToggleButton\nfrom kivy.utils import get_color_from_hex\n\nclass DrawCanvasWidget(Widget):\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n        # \u9ed8\u8ba4\u5212\u7ebf\u7684\u989c\u8272\n        # self.canvas.add(Color(rgb=[0,0,0]))\n        self.change_color(get_color_from_hex('#19caad'))  # \u4fee\u6539\u9ed8\u8ba4\u5212\u7ebf\u7ebf\u989c\u8272\n        self.line_width = 2\n\n    def on_touch_down(self,touch):\n        if Widget.on_touch_down(self,touch):\n            return\n        with self.canvas:\n            touch.ud['current_line'] = Line(points=(touch.x,touch.y),width=self.line_width)\n\n    def on_touch_move(self,touch):\n        if 'current_line' in touch.ud:\n            touch.ud['current_line'].points += (touch.x,touch.y)\n\n    def change_color(self,new_color):\n        self.last_color = new_color  # \u5728\u6e05\u9664\u753b\u677f\u65f6\u4f7f\u7528\n        self.canvas.add(Color(*new_color))\n\n    def change_line_width(self,line_width=\"\u6b63\u5e38\"):  # \u6539\u53d8\u4e2d\u6587\u65f6\u8fd9\u4e2a\u4f4d\u7f6e\u4e5f\u8981\u4fee\u6539\n        self.line_width = {\"\u53d8\u7ec6\":1,\"\u6b63\u5e38\":2,\"\u52a0\u7c97\":4}[line_width]\n\n\n    def clean_canvas(self):\n        saved = self.children[:]  # \u4fdd\u7559root\u63a7\u4ef6\u4e0a\u7684\u5b50\u63a7\u4ef6\uff08button)\n        self.clear_widgets()  # \u6e05\u9664\u6240\u6709\u63a7\u4ef6\u95f4\n        self.canvas.clear()   # \u6e05\u9664canvas\n        for widget in saved:  # \u5c06\u6e05\u9664\u7684\u5b50\u63a7\u4ef6\u518d\u753b\u4e0a\n            self.add_widget(widget)\n\n        self.change_color(self.last_color)\n\n\n\n\nclass PaintApp(App):\n    def build(self):\n        self.icon = \"icon.ico\"\n        self.title = \"\u6d82\u9e26\u753b\u677f v1.0.0\"\n        self.draw_canvas_widget = DrawCanvasWidget()\n\n        return self.draw_canvas_widget  # \u8fd4\u56deroot\u63a7\u4ef6\n\nif __name__ == \"__main__\":\n    PaintApp().run()\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n7.\u9879\u76ee\u603b\u7ed3\n\n\n\u5173\u4e8e\u6d82\u9e26\u753b\u677f\u9879\u76ee\u7684Android\u6253\u5305\u8be6\u89c1\u7b2c\u516b\u7ae0\u3002",
            "title": "\u7b2c\u4e8c\u7ae0 \u6d82\u9e26\u753b\u677f\u9879\u76ee\u57fa\u4e8ekivy\u5b9e\u73b0"
        },
        {
            "location": "/chapter2/#kivy",
            "text": "",
            "title": "\u7b2c\u4e8c\u7ae0 \u6d82\u9e26\u753b\u677f\u9879\u76ee\u57fa\u4e8ekivy\u5b9e\u73b0"
        },
        {
            "location": "/chapter2/#1",
            "text": "\u60f3\u8981\u663e\u793a\u7ed8\u56fe\u7684\u8f68\u8ff9\uff0c\u9996\u5148\u9700\u8981\u6784\u9020\u51fa\u4e00\u4e2a\u7a97\u53e3\uff0c\u8ba9\u5176\u52a0\u8f7d .kv \u6587\u4ef6\uff0c\u5e76\u5728 .kv \u6587\u4ef6\u4e2d\u628a\u9875\u9762\u80cc\u666f\u8bbe\u7f6e\u4e3a\u767d\u8272  step1: \u65b0\u5efa\u4e00\u4e2a main.py \u6587\u4ef6\uff0c\u5728\u5176\u4e2d\u5148\u7b80\u5355\u7684\u52a0\u8f7d .kv \u6587\u4ef6\uff0c\u5177\u4f53\u4ee3\u7801\u5982\u4e0b  from kivy.app import App\nfrom kivy.graphics import Line, Color\nfrom kivy.uix.widget import Widget\n\n\nclass DrawCanvasWidget(Widget):\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n\n\nclass PaintApp(App):\n    def build(self):\n        self.draw_canvas_widget = DrawCanvasWidget()\n\n        return self.draw_canvas_widget  # \u8fd4\u56deroot\u63a7\u4ef6\n\nif __name__ == \"__main__\":\n    PaintApp().run()  \u8fd9\u65f6\u5019\u8fd0\u884c\u6548\u679c(\u4ec0\u4e48\u4e5f\u6ca1\u6709\uff0c\u4ee5\u4e3a\u6211\u4eec\u5e76\u6ca1\u6709\u5b9a\u4e49\u4efb\u4f55\u63a7\u4ef6\u548c\u7ed8\u56fe\u5728\u754c\u9762\uff09\uff1a      step2: \u521b\u5efa\u548cAPP\u540c\u540d\u7684 .kv \u6587\u4ef6,\u8bbe\u7f6e\u7a97\u53e3\u7684\u4e00\u4e9b\u5c5e\u6027  # \u6ce8\u610fpaint.kv\u6587\u4ef6\u4e2d\u4e0d\u80fd\u51fa\u73b0\u4e2d\u6587\u548c\u7c7b\u4f3c\u4e8epython\u7684\u6ce8\u91ca\n<DrawCanvasWidget>  # \u5b9a\u4e49\u9875\u9762\n    canvas.before:\n        Color:      # \u989c\u8272\n            rgba: [1,1,1,1]\n        Rectangle:  #\u5f62\u72b6\n            pos: self.pos\n            size: self.size      step3\uff1a\u76d1\u542c\u5c4f\u5e55\u7684\u70b9\u51fb\u548c\u79fb\u52a8\u89e6\u53d1\u4e8b\u4ef6  \nfrom kivy.app import App\nfrom kivy.graphics import Line, Color\nfrom kivy.uix.widget import Widget\n\n\nclass DrawCanvasWidget(Widget):\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n        # \u9ed8\u8ba4\u5212\u7ebf\u7684\u989c\u8272\n        self.canvas.add(Color(rgb=[0,0,0]))\n        self.line_width = 2\n\n    def on_touch_down(self,touch):\n        if Widget.on_touch_down(self,touch):\n            return\n        with self.canvas:\n            #User data dictionary. Use this dictionary to save your own data on the touch\n            touc.ud['current_line'] = Line(points=(touch.x,touch.y),width=self.line_width)\n\n    def on_touch_move(self,touch):\n        if 'current_line' in touch.ud:\n            touch.ud['current_line'].points += (touch.x,touch.y)\n\n\nclass PaintApp(App):\n    def build(self):\n        self.draw_canvas_widget = DrawCanvasWidget()\n\n        return self.draw_canvas_widget  # \u8fd4\u56deroot\u63a7\u4ef6\n\nif __name__ == \"__main__\":\n    PaintApp().run()",
            "title": "1.\u9879\u76ee\u5c55\u793a\u4e0e\u663e\u793a\u753b\u7b14\u7684\u8f68\u8ff9"
        },
        {
            "location": "/chapter2/#2button",
            "text": "\u8be5\u90e8\u5206\u6211\u4eec\u901a\u8fc7button\u5b9e\u73b0\u70b9\u51fbbutton\u5207\u6362\u5212\u7ebf\u7684\u989c\u8272\uff0c\u4e0a\u4e00\u8282\u4e2d\u6211\u4eec\u4ec5\u4ec5\u5b9a\u4e49\u4e86\u4e86\u9ed8\u8ba4\u7684\u753b\u677f\u989c\u8272\u3002  \u9996\u5148\u6211\u4eec\u5728 paint.kv \u4e2d\u6dfb\u52a012\u79cd\u989c\u8272\u7684button  #: import C kivy.utils.get_color_from_hex\n\n<BottomColorButton@ToggleButton>:\n    group: 'color'  \n    border: (3,3,3,3) \n    on_release: app.draw_canvas_widget.change_color(self.background_color)\n\n<DrawCanvasWidget>:\n    canvas.before:\n        Color: \n            rgba: [1,1,1,1]\n        Rectangle:\n            pos: self.pos\n            size: self.size\n\n    BoxLayout:\n        id: bottom_box\n        orientation: \"horizontal\"\n        padding: 2\n        spacing: 2\n        size: root.width,40\n\n        BottomColorButton:\n            background_color: C(\"#19caad\")\n            state: 'down'\n        BottomColorButton:\n            background_color: C(\"#8cc7b5\")\n        BottomColorButton:\n            background_color: C(\"#a0eee1\")\n        BottomColorButton:\n            background_color: C(\"#bee7e9\")\n        BottomColorButton:\n            background_color: C(\"#beedc7\")\n        BottomColorButton:\n            background_color: C(\"#d6d5b7\")\n        BottomColorButton:\n            background_color: C(\"#d1ba74\")\n        BottomColorButton:\n            background_color: C(\"#e6ceac\")\n        BottomColorButton:\n            background_color: C(\"#ecad9e\")\n        BottomColorButton:\n            background_color: C(\"#f4606c\")\n        BottomColorButton:\n            background_color: C(\"#3498db\")\n        BottomColorButton:\n            background_color: C(\"#1abc9c\")  from kivy.app import App\nfrom kivy.graphics import Line, Color\nfrom kivy.uix.widget import Widget\n\nfrom kivy.uix.behaviors import ToggleButtonBehavior\nfrom kivy.uix.togglebutton import ToggleButton\n\n\nclass DrawCanvasWidget(Widget):\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n        # \u9ed8\u8ba4\u5212\u7ebf\u7684\u989c\u8272\n        self.canvas.add(Color(rgb=[0,0,0]))\n        self.line_width = 2\n\n    def on_touch_down(self,touch):\n        if Widget.on_touch_down(self,touch):\n            return\n        with self.canvas:\n            touch.ud['current_line'] = Line(points=(touch.x,touch.y),width=self.line_width)\n\n    def on_touch_move(self,touch):\n        if 'current_line' in touch.ud:\n            touch.ud['current_line'].points += (touch.x,touch.y)\n    # \u589e\u52a0\u8be5\u65b9\u6cd5\u6539\u53d8\u989c\u8272\n    def change_color(self,new_color):\n        self.canvas.add(Color(*new_color))\n\n\nclass PaintApp(App):\n    def build(self):\n        self.draw_canvas_widget = DrawCanvasWidget()\n\n        return self.draw_canvas_widget  # \u8fd4\u56deroot\u63a7\u4ef6\n\nif __name__ == \"__main__\":\n    PaintApp().run()",
            "title": "2.\u8bbe\u7f6e\u989c\u8272\u7684Button"
        },
        {
            "location": "/chapter2/#3button",
            "text": "\u76ee\u524d\u7ebf\u5bbd\u4ec5\u4ec5\u5728\u521d\u59cb\u5316\u65f6\u4f5c\u4e86\u8bbe\u7f6e\uff0c\u6539\u53d8\u7ebf\u5bbd\u548c\u6539\u53d8\u989c\u8272\u8bbe\u7f6e\u65b9\u5f0f\u4e00\u81f4\uff0c\u5728root\u63a7\u4ef6\u4e2d\u521b\u5efa\u4e00\u4e2a\u6539\u53d8\u7ebf\u5bbd\u7684\u65b9\u6cd5  \nfrom kivy.app import App\nfrom kivy.graphics import Line, Color\nfrom kivy.uix.widget import Widget\n\nfrom kivy.uix.behaviors import ToggleButtonBehavior\nfrom kivy.uix.togglebutton import ToggleButton\nfrom kivy.utils import get_color_from_hex\n\nclass DrawCanvasWidget(Widget):\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n        # \u9ed8\u8ba4\u5212\u7ebf\u7684\u989c\u8272\n        self.canvas.add(Color(rgb=[0,0,0]))\n        self.line_width = 2\n\n    def on_touch_down(self,touch):\n        if Widget.on_touch_down(self,touch):\n            return\n        with self.canvas:\n            touch.ud['current_line'] = Line(points=(touch.x,touch.y),width=self.line_width)\n\n    def on_touch_move(self,touch):\n        if 'current_line' in touch.ud:\n            touch.ud['current_line'].points += (touch.x,touch.y)\n\n    def change_color(self,new_color):\n        self.canvas.add(Color(*new_color))\n    # \u589e\u52a0\u8be5\u65b9\u6cd5\uff0c\u6539\u53d8\u7ebf\u5bbd\n    def change_line_width(self,line_width=\"Normal\"):\n        self.line_width = {\"Thin\":1,\"Normal\":2,\"Thick\":4}[line_width]\n\n\nclass PaintApp(App):\n    def build(self):\n        self.draw_canvas_widget = DrawCanvasWidget()\n\n        return self.draw_canvas_widget  # \u8fd4\u56deroot\u63a7\u4ef6\n\nif __name__ == \"__main__\":\n    PaintApp().run()  \u7136\u540e\u6211\u4eec\u5728 paint.kv \u4e2d\u8bbe\u7f6e\u6539\u53d8\u7ebf\u5bbd\u7684button  #: import C kivy.utils.get_color_from_hex\n\n<BottomColorButton@ToggleButton>:\n    group: 'color' \n    background_normal: ''  # \u6807\u51c6\u80cc\u666f\u989c\u8272\n    background_down: ''    # \u9009\u4e2d\u540e\u7684\u80cc\u666f\u989c\u8272\n    border: (3,3,3,3) \n    on_release: app.draw_canvas_widget.change_color(self.background_color)\n\n<LineWidthButton@ToggleButton>:\n    group: \"line_width\"\n    color: C(\"#2c3e50\")\n    background_color: C(\"#ecf0f1\")\n    background_normal: ''\n    background_down: ''\n    border: (3,3,3,3)\n    on_release: app.draw_canvas_widget.change_line_width(self.text)\n\n<DrawCanvasWidget>:\n    canvas.before:\n        Color: \n            rgba: [1,1,1,1]\n        Rectangle:\n            pos: self.pos\n            size: self.size\n\n    BoxLayout:\n        orientation: \"horizontal\"\n        padding: 2\n        spacing: 2\n        x: 0\n        top: root.top\n        size_hint: None,None\n        size: 280,44\n\n        LineWidthButton:\n            text: \"Thin\"\n\n        LineWidthButton:\n            text: \"Normal\"\n            state: \"down\"\n        LineWidthButton:\n            text: \"Thick\"\n\n\n\n    BoxLayout:\n        id: bottom_box\n        orientation: \"horizontal\"\n        padding: 2\n        spacing: 2\n        size: root.width,40\n\n        BottomColorButton:\n            background_color: C(\"#19caad\")\n            state: 'down'\n        BottomColorButton:\n            background_color: C(\"#8cc7b5\")\n        BottomColorButton:\n            background_color: C(\"#a0eee1\")\n        BottomColorButton:\n            background_color: C(\"#bee7e9\")\n        BottomColorButton:\n            background_color: C(\"#beedc7\")\n        BottomColorButton:\n            background_color: C(\"#d6d5b7\")\n        BottomColorButton:\n            background_color: C(\"#d1ba74\")\n        BottomColorButton:\n            background_color: C(\"#e6ceac\")\n        BottomColorButton:\n            background_color: C(\"#ecad9e\")\n        BottomColorButton:\n            background_color: C(\"#f4606c\")\n        BottomColorButton:\n            background_color: C(\"#3498db\")\n        BottomColorButton:\n            background_color: C(\"#1abc9c\")",
            "title": "3.\u8bbe\u7f6e\u7ebf\u5bbd\u7684Button"
        },
        {
            "location": "/chapter2/#4",
            "text": "\u9009\u4e2d\u4e86\u989c\u8272\u548c\u7ebf\u5bbd\u540e\uff0c\u6211\u4eec\u65e0\u6cd5\u77e5\u9053\u6211\u4eec\u76ee\u524d\u5230\u5e95\u9009\u4e2d\u7684\u662f\u54ea\u4e2a\u989c\u8272\uff0c\u662f\u54ea\u4e2a\u7ebf\u5bbd\uff0c\u56e0\u6b64\u6211\u4eec\u4e3a\u9009\u4e2d\u7684button\u6dfb\u52a0\u4e00\u4e9b\u6837\u5f0f\uff0c\u8fd9\u91cc\u6211\u4eec\u7ed9\u9009\u4e2d\u7684butoon\u5916\u9762\u6dfb\u52a0\u4e00\u4e2a\u8fb9\u6846\u3002\n\u4fee\u6539 paint.kv  #: import C kivy.utils.get_color_from_hex\n\n<BottomColorButton@ToggleButton>:\n    group: 'color' \n    background_normal: 'radio_background_normal.png'  # \u672a\u9009\u4e2d\u65f6\u7684\u6837\u5f0f\n    background_down: 'radio_background_down.png'      # \u9009\u4e2d\u540e\u7684\u6837\u5f0f\n    border: (3,3,3,3) \n    on_release: app.draw_canvas_widget.change_color(self.background_color)\n\n<LineWidthButton@ToggleButton>:\n    group: \"line_width\"\n    color: C(\"#2c3e50\")\n    background_color: C(\"#ecf0f1\")\n    background_normal: 'radio_background_normal.png'\n    background_down: 'radio_background_down.png'\n    border: (3,3,3,3)\n    on_release: app.draw_canvas_widget.change_line_width(self.text)\n\n<DrawCanvasWidget>:\n    canvas.before:\n        Color: \n            rgba: [1,1,1,1]\n        Rectangle:\n            pos: self.pos\n            size: self.size\n\n    BoxLayout:\n        orientation: \"horizontal\"\n        padding: 2\n        spacing: 2\n        x: 0\n        top: root.top\n        size_hint: None,None\n        size: 280,44\n\n        LineWidthButton:\n            text: \"Thin\"\n\n        LineWidthButton:\n            text: \"Normal\"\n            state: \"down\"\n        LineWidthButton:\n            text: \"Thick\"\n\n\n\n    BoxLayout:\n        id: bottom_box\n        orientation: \"horizontal\"\n        padding: 2\n        spacing: 2\n        size: root.width,40\n\n        BottomColorButton:\n            background_color: C(\"#19caad\")\n            state: 'down'\n        BottomColorButton:\n            background_color: C(\"#8cc7b5\")\n        BottomColorButton:\n            background_color: C(\"#a0eee1\")\n        BottomColorButton:\n            background_color: C(\"#bee7e9\")\n        BottomColorButton:\n            background_color: C(\"#beedc7\")\n        BottomColorButton:\n            background_color: C(\"#d6d5b7\")\n        BottomColorButton:\n            background_color: C(\"#d1ba74\")\n        BottomColorButton:\n            background_color: C(\"#e6ceac\")\n        BottomColorButton:\n            background_color: C(\"#ecad9e\")\n        BottomColorButton:\n            background_color: C(\"#f4606c\")\n        BottomColorButton:\n            background_color: C(\"#3498db\")\n        BottomColorButton:\n            background_color: C(\"#1abc9c\")",
            "title": "4.\u6309\u94ae\u8fb9\u6846\u7684\u8bbe\u7f6e"
        },
        {
            "location": "/chapter2/#5",
            "text": "\u753b\u5728\u753b\u677f\u7684\u5185\u5bb9\u6211\u4eec\u9700\u8981\u6e05\u9664\uff0c\u4e0b\u9762\u6211\u4eec\u5b9e\u73b0\u6e05\u9664\u753b\u677f\u7684\u529f\u80fd\uff0c\u9996\u5148\u6211\u4eec\u5728 paint.kv \u4e2d\u5b9e\u73b0\u4e00\u4e2a\u6e05\u9664\u7684button  #: import C kivy.utils.get_color_from_hex\n\n<BottomColorButton@ToggleButton>:\n    group: 'color' \n    background_normal: 'radio_background_normal.png'\n    background_down: 'radio_background_down.png' \n    border: (3,3,3,3) \n    on_release: app.draw_canvas_widget.change_color(self.background_color)\n\n<LineWidthButton@ToggleButton>:\n    group: \"line_width\"\n    color: C(\"#2c3e50\")\n    background_color: C(\"#ecf0f1\")\n    background_normal: 'radio_background_normal.png'\n    background_down: 'radio_background_down.png'\n    border: (3,3,3,3)\n    on_release: app.draw_canvas_widget.change_line_width(self.text)\n\n<DrawCanvasWidget>:\n    canvas.before:\n        Color: \n            rgba: [1,1,1,1]\n        Rectangle:\n            pos: self.pos\n            size: self.size\n\n    BoxLayout:\n        orientation: \"horizontal\"\n        padding: 2\n        spacing: 2\n        x: 0\n        top: root.top\n        size_hint: None,None\n        size: 280,44\n\n        LineWidthButton:\n            text: \"Thin\"\n\n        LineWidthButton:\n            text: \"Normal\"\n            state: \"down\"\n        LineWidthButton:\n            text: \"Thick\"\n\n        # \u8fd9\u4e2abutton\u7528\u6765\u6e05\u9664\u753b\u677f\n        Button:\n            text: 'Clear'\n            on_release: root.draw_canvas_widget.clean_canvas()\n\n\n\n    BoxLayout:\n        id: bottom_box\n        orientation: \"horizontal\"\n        padding: 2\n        spacing: 2\n        size: root.width,40\n\n        BottomColorButton:\n            background_color: C(\"#19caad\")\n            state: 'down'\n        BottomColorButton:\n            background_color: C(\"#8cc7b5\")\n        BottomColorButton:\n            background_color: C(\"#a0eee1\")\n        BottomColorButton:\n            background_color: C(\"#bee7e9\")\n        BottomColorButton:\n            background_color: C(\"#beedc7\")\n        BottomColorButton:\n            background_color: C(\"#d6d5b7\")\n        BottomColorButton:\n            background_color: C(\"#d1ba74\")\n        BottomColorButton:\n            background_color: C(\"#e6ceac\")\n        BottomColorButton:\n            background_color: C(\"#ecad9e\")\n        BottomColorButton:\n            background_color: C(\"#f4606c\")\n        BottomColorButton:\n            background_color: C(\"#3498db\")\n        BottomColorButton:\n            background_color: C(\"#1abc9c\")  \u5728 main.py \u4e2d\u5b9e\u73b0\u6e05\u9664\u7684\u65b9\u6cd5  from kivy.app import App\nfrom kivy.graphics import Line, Color\nfrom kivy.uix.widget import Widget\n\nfrom kivy.uix.behaviors import ToggleButtonBehavior\nfrom kivy.uix.togglebutton import ToggleButton\nfrom kivy.utils import get_color_from_hex\n\nclass DrawCanvasWidget(Widget):\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n        # \u9ed8\u8ba4\u5212\u7ebf\u7684\u989c\u8272\n        # self.canvas.add(Color(rgb=[0,0,0]))\n        self.change_color(get_color_from_hex('#19caad'))  # \u4fee\u6539\u9ed8\u8ba4\u5212\u7ebf\u7ebf\u989c\u8272\n        self.line_width = 2\n\n    def on_touch_down(self,touch):\n        if Widget.on_touch_down(self,touch):\n            return\n        with self.canvas:\n            touch.ud['current_line'] = Line(points=(touch.x,touch.y),width=self.line_width)\n\n    def on_touch_move(self,touch):\n        if 'current_line' in touch.ud:\n            touch.ud['current_line'].points += (touch.x,touch.y)\n\n    def change_color(self,new_color):\n        self.last_color = new_color  # \u5728\u6e05\u9664\u753b\u677f\u65f6\u4f7f\u7528\n        self.canvas.add(Color(*new_color))\n\n    def change_line_width(self,line_width=\"Normal\"):\n        self.line_width = {\"Thin\":1,\"Normal\":2,\"Thick\":4}[line_width]\n\n\n    def clean_canvas(self):\n        saved = self.children[:]  # \u4fdd\u7559root\u63a7\u4ef6\u4e0a\u7684\u5b50\u63a7\u4ef6\uff08button)\n        self.clear_widgets()  # \u6e05\u9664\u6240\u6709\u63a7\u4ef6\u95f4\n        self.canvas.clear()   # \u6e05\u9664canvas\n        for widget in saved:  # \u5c06\u6e05\u9664\u7684\u5b50\u63a7\u4ef6\u518d\u753b\u4e0a\n            self.add_widget(widget)\n\n        self.change_color(self.last_color)\n\n\n\n\nclass PaintApp(App):\n    def build(self):\n        self.draw_canvas_widget = DrawCanvasWidget()\n\n        return self.draw_canvas_widget  # \u8fd4\u56deroot\u63a7\u4ef6\n\nif __name__ == \"__main__\":\n    PaintApp().run()",
            "title": "5.\u5c4f\u5e55\u6e05\u9664\u529f\u80fd\u7684\u5b9e\u73b0"
        },
        {
            "location": "/chapter2/#6icontitle",
            "text": "\u9996\u5148\u6211\u4eec\u89e3\u51b3\u4e2d\u6587\u663e\u793a\u7684\u95ee\u9898\uff0ckivy\u5bf9\u4e8e\u4e2d\u6587\u7684\u652f\u6301\u5e76\u4e0d\u662f\u5f88\u5b8c\u7f8e\uff0c\u8fd9\u4e5f\u53ef\u80fd\u662fkivy\u5728\u56fd\u5185\u63a8\u5e7f\u4e0d\u662f\u5f88\u987a\u5229\u7684\u539f\u56e0\uff0c\u5bf9\u4e8e\u5728kv\u8bed\u8a00\u4e2d\u4f7f\u7528\u4e2d\u6587\u9700\u8981\u5bfc\u5165\u4e2d\u6587\u5b57\u5e93\u548c\u628a\u4e2d\u6587\u7f16\u7801\u6210unicode,\u800c\u5728kivy\u7684main\u811a\u672c\u4e2d\uff0c\u9700\u8981\u5728\u63a7\u4ef6\u4e2d\u901a\u8fc7font_name\u8fd9\u4e2a\u53c2\u6570\u5bfc\u5165\u4e2d\u6587\u5b57\u5e93\u3002  \u5bf9\u4e8e\u66ff\u6362icon\u548ctitle\u6211\u4eec\u53ea\u9700\u8981\u5728build\u65b9\u6cd5\u4e2d\u5b9e\u73b0\u5c31\u53ef\u4ee5\u4e86  \u9996\u5148\u6211\u4eec\u4fee\u6539 paint.kv \u4f7f\u5176\u652f\u6301\u4e2d\u6587  \n#: import C kivy.utils.get_color_from_hex\n\n<BottomColorButton@ToggleButton>:\n    group: 'color' \n    background_normal: 'radio_background_normal.png'\n    background_down: 'radio_background_down.png' \n    border: (3,3,3,3) \n    on_release: app.draw_canvas_widget.change_color(self.background_color)\n\n<LineWidthButton@ToggleButton>:\n    group: \"line_width\"\n    color: C(\"#2c3e50\")\n    background_color: C(\"#ecf0f1\")\n    background_normal: 'radio_background_normal.png'\n    background_down: 'radio_background_down.png'\n    border: (3,3,3,3)\n    on_release: app.draw_canvas_widget.change_line_width(self.text)\n\n<DrawCanvasWidget>:\n    canvas.before:\n        Color: \n            rgba: [1,1,1,1]\n        Rectangle:\n            pos: self.pos\n            size: self.size\n\n    BoxLayout:\n        orientation: \"horizontal\"\n        padding: 2\n        spacing: 2\n        x: 0\n        top: root.top\n        size_hint: None,None\n        size: 280,44\n\n        LineWidthButton:  # \u8fd9\u91cc\u6211\u4eec\u4fee\u6539\u652f\u6301\u4e2d\u6587\n            text: \"\\u53d8\\u7ec6\"\n            font_name: \"./DroidSansFallback.ttf\"\n        LineWidthButton:\n            text: \"\\u6b63\\u5e38\"\n            font_name: \"./DroidSansFallback.ttf\"\n            state: \"down\"\n        LineWidthButton:\n            text: \"\\u52a0\\u7c97\"\n            font_name: \"./DroidSansFallback.ttf\"\n\n        Button:\n            text: '\\u6e05\\u9664'\n            on_release: app.draw_canvas_widget.clean_canvas()\n            font_name: \"./DroidSansFallback.ttf\"\n\n\n    BoxLayout:\n        id: bottom_box\n        orientation: \"horizontal\"\n        padding: 2\n        spacing: 2\n        size: root.width,40\n\n        BottomColorButton:\n            background_color: C(\"#19caad\")\n            state: 'down'\n        BottomColorButton:\n            background_color: C(\"#8cc7b5\")\n        BottomColorButton:\n            background_color: C(\"#a0eee1\")\n        BottomColorButton:\n            background_color: C(\"#bee7e9\")\n        BottomColorButton:\n            background_color: C(\"#beedc7\")\n        BottomColorButton:\n            background_color: C(\"#d6d5b7\")\n        BottomColorButton:\n            background_color: C(\"#d1ba74\")\n        BottomColorButton:\n            background_color: C(\"#e6ceac\")\n        BottomColorButton:\n            background_color: C(\"#ecad9e\")\n        BottomColorButton:\n            background_color: C(\"#f4606c\")\n        BottomColorButton:\n            background_color: C(\"#3498db\")\n        BottomColorButton:\n            background_color: C(\"#1abc9c\")  \u5176\u6b21\u6211\u4eec\u4fee\u6539icon\u548ctitle  from kivy.app import App\nfrom kivy.graphics import Line, Color\nfrom kivy.uix.widget import Widget\n\nfrom kivy.uix.behaviors import ToggleButtonBehavior\nfrom kivy.uix.togglebutton import ToggleButton\nfrom kivy.utils import get_color_from_hex\n\nclass DrawCanvasWidget(Widget):\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n        # \u9ed8\u8ba4\u5212\u7ebf\u7684\u989c\u8272\n        # self.canvas.add(Color(rgb=[0,0,0]))\n        self.change_color(get_color_from_hex('#19caad'))  # \u4fee\u6539\u9ed8\u8ba4\u5212\u7ebf\u7ebf\u989c\u8272\n        self.line_width = 2\n\n    def on_touch_down(self,touch):\n        if Widget.on_touch_down(self,touch):\n            return\n        with self.canvas:\n            touch.ud['current_line'] = Line(points=(touch.x,touch.y),width=self.line_width)\n\n    def on_touch_move(self,touch):\n        if 'current_line' in touch.ud:\n            touch.ud['current_line'].points += (touch.x,touch.y)\n\n    def change_color(self,new_color):\n        self.last_color = new_color  # \u5728\u6e05\u9664\u753b\u677f\u65f6\u4f7f\u7528\n        self.canvas.add(Color(*new_color))\n\n    def change_line_width(self,line_width=\"\u6b63\u5e38\"):  # \u6539\u53d8\u4e2d\u6587\u65f6\u8fd9\u4e2a\u4f4d\u7f6e\u4e5f\u8981\u4fee\u6539\n        self.line_width = {\"\u53d8\u7ec6\":1,\"\u6b63\u5e38\":2,\"\u52a0\u7c97\":4}[line_width]\n\n\n    def clean_canvas(self):\n        saved = self.children[:]  # \u4fdd\u7559root\u63a7\u4ef6\u4e0a\u7684\u5b50\u63a7\u4ef6\uff08button)\n        self.clear_widgets()  # \u6e05\u9664\u6240\u6709\u63a7\u4ef6\u95f4\n        self.canvas.clear()   # \u6e05\u9664canvas\n        for widget in saved:  # \u5c06\u6e05\u9664\u7684\u5b50\u63a7\u4ef6\u518d\u753b\u4e0a\n            self.add_widget(widget)\n\n        self.change_color(self.last_color)\n\n\n\n\nclass PaintApp(App):\n    def build(self):\n        self.icon = \"icon.ico\"\n        self.title = \"\u6d82\u9e26\u753b\u677f v1.0.0\"\n        self.draw_canvas_widget = DrawCanvasWidget()\n\n        return self.draw_canvas_widget  # \u8fd4\u56deroot\u63a7\u4ef6\n\nif __name__ == \"__main__\":\n    PaintApp().run()",
            "title": "6.\u4e2d\u6587\u663e\u793a\u95ee\u9898\u53ca\u66ff\u6362icon\u548ctitle"
        },
        {
            "location": "/chapter2/#7",
            "text": "\u5173\u4e8e\u6d82\u9e26\u753b\u677f\u9879\u76ee\u7684Android\u6253\u5305\u8be6\u89c1\u7b2c\u516b\u7ae0\u3002",
            "title": "7.\u9879\u76ee\u603b\u7ed3"
        },
        {
            "location": "/chapter3/",
            "text": "\u7b2c\u4e09\u7ae0 \u6d82\u9e26\u753b\u677f\u9879\u76ee\u57fa\u4e8ekivymd\u5b9e\u73b0\n\n\n\n\n1.\u9879\u76ee\u5c55\u793a\u4e0e\u753b\u677f\u6574\u4f53\u754c\u9762\n\n\n\u6211\u4eec\u8fdb\u4e00\u6b65\u5bf9\u6d82\u9e26\u753b\u677f\u5728\u754c\u9762\u5c42\u9762\u4e0a\u505a\u4f18\u5316\uff0c\u6211\u4eec\u4f7f\u7528kivymd\u5e93\u8fdb\u884c\u754c\u9762\u7684\u4f18\u5316\uff0ckivymd\u662f\u4e0eMaterial Desugn\u517c\u5bb9\u7684\u5c0f\u63a7\u4ef6\u7684\u96c6\u5408\uff0c\u53ef\u4e0ekivy\u4e00\u8d77\u4f7f\u7528\uff0ckivymd\u7684\u76ee\u6807\u662f\u5728\u4e0d\u727a\u7272\u6613\u7528\u6027\u6216\u5e94\u7528\u7a0b\u5e8f\u6027\u80fd\u7684\u524d\u63d0\u4e0b\uff0c\u5c3d\u53ef\u80fd\u63a5\u8fd1Google\u7684Material Design\u89c4\u8303\u3002kivymd\u7684\u539f\u4f5c\u8005\u4e09\u5e74\u524d\u505c\u6b62\u66f4\u65b0\u9879\u76ee\uff0c\nhttps://github.com/HeaTTheatR/KivyMD\n\u5bf9kivymd\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u5f00\u53d1\uff0c\u76ee\u524d\u8be5\u9879\u76ee\u4ecd\u7136\u5904\u4e8e\u6d4b\u8bd5\u7248\u7684\u9636\u6bb5\u3002\n\n\n\u9996\u5148\u6211\u4eec\u4f7f\u7528kivymd\u6784\u5efa\u754c\u9762\uff0c\u521b\u5efa\nmain.py\n\n\n\nfrom kivy.lang import Builder\nfrom kivy.graphics import Line, Color\nfrom kivy.uix.widget import Widget\nfrom kivy.uix.boxlayout import BoxLayout\nfrom kivy.properties import StringProperty\n\nfrom kivymd.app import MDApp\nfrom kivymd.theming import ThemableBehavior\n\n\n\nglobal line_width\nline_width = 2\n\n# \u8fd9\u4e2a\u7c7b\u4e3b\u8981copy\u6211\u4eec\u5728\u4e0a\u4e00\u7ae0\u4e2d\u6784\u5efa\u7684\u7c7b\nclass DrawCanvasWidget(Widget):\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n        # \u9ed8\u8ba4\u5212\u7ebf\u7684\u989c\u8272\n        self.line_color = [0,0,0,1]\n        self.canvas.add(Color(rgba=[0,0,0,1]))\n\n    def on_touch_down(self,touch):\n\n        if Widget.on_touch_down(self,touch):\n            return\n        with self.canvas:\n            touch.ud['current_line'] = Line(points=(touch.x,touch.y),width=line_width)\n\n    def on_touch_move(self,touch):\n        if 'current_line' in touch.ud:\n            touch.ud['current_line'].points += (touch.x,touch.y)\n\n\n\n    def change_color(self,new_color):\n        # global line_color\n        self.line_color = new_color  # \u5728\u6e05\u9664\u753b\u677f\u65f6\u4f7f\u7528\n        self.canvas.add(Color(rgb=self.line_color))\n\n    def change_line_width(self,line_width_ico=\"baby-face\"):\n        global line_width\n        line_width = {\"babel\":1,\"baby-face\":2,\"baguette\":4}[line_width_ico]\n\n    def clean_canvas(self):\n        saved = self.children[:]  # \u4fdd\u7559root\u63a7\u4ef6\u4e0a\u7684\u5b50\u63a7\u4ef6\uff08button)\n        self.clear_widgets()  # \u6e05\u9664\u6240\u6709\u63a7\u4ef6\u95f4\n        self.canvas.clear()   # \u6e05\u9664canvas\n        for widget in saved:  # \u5c06\u6e05\u9664\u7684\u5b50\u63a7\u4ef6\u518d\u753b\u4e0a\n            self.add_widget(widget)\n\n        self.change_color(self.line_color)\n\n\nclass PaintsApp(MDApp):\n\n    def build(self):\n        self.icon = \"./icon.ico\"\n        self.title = \"\u6d82\u9e26\u753b\u677f(kivymd\u7248)\"\n        self.theme_cls.primary_palette = \"Blue\" \n\n        return Builder.load_file(\"./paint.kv\")\n\n\nif __name__ == \"__main__\":\n    PaintsApp().run()\n\n\n\n\n\n\u521b\u5efa\npaint.kv\n\u7684UI\u754c\u9762\n\n\n# paint in kivymd by xu jing.\n# date 2020-07-09\n\nBoxLayout:\n    orientation: 'vertical'\n\n    # toolbar\n    MDToolbar:\n        title: 'Paint'\n        elevation: 10\n        left_action_items: [['menu', lambda x: None]]\n        spacing: 10\n        padding: 10\n\n    # paint canvas\n    DrawCanvasWidget:\n        id: my_paint\n        canvas.before:\n            Color:\n                rgba: [1,1,1,1]\n            Rectangle:\n                pos: self.pos\n                size: self.size\n\n\n\n\n\n\n\n \n\n\n\n\n2.\u6539\u53d8\u7ebf\u5bbdMDFloatingActionButtonSpeedDial\u7684\u5b9e\u73b0\n\n\n\u901a\u8fc7kivymd\u4e2d\u7684MDFloatingActionButtonSpeedDial\u5b9e\u73b0\u7ebf\u5bbd\u7684\u6539\u53d8\uff0c\u4fee\u6539\nmain.py\n\n\n\nfrom kivy.lang import Builder\nfrom kivy.graphics import Line, Color\nfrom kivy.uix.widget import Widget\nfrom kivy.uix.boxlayout import BoxLayout\nfrom kivy.properties import StringProperty\n\nfrom kivymd.app import MDApp\nfrom kivymd.theming import ThemableBehavior\n\n\n\nglobal line_width\nline_width = 2\n\n# \u8fd9\u4e2a\u7c7b\u4e3b\u8981copy\u6211\u4eec\u5728\u4e0a\u4e00\u7ae0\u4e2d\u6784\u5efa\u7684\u7c7b\nclass DrawCanvasWidget(Widget):\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n        # \u9ed8\u8ba4\u5212\u7ebf\u7684\u989c\u8272\n        self.line_color = [0,0,0,1]\n        self.canvas.add(Color(rgba=[0,0,0,1]))\n\n    def on_touch_down(self,touch):\n\n        if Widget.on_touch_down(self,touch):\n            return\n        with self.canvas:\n            touch.ud['current_line'] = Line(points=(touch.x,touch.y),width=line_width)\n\n    def on_touch_move(self,touch):\n        if 'current_line' in touch.ud:\n            touch.ud['current_line'].points += (touch.x,touch.y)\n\n\n\n    def change_color(self,new_color):\n        # global line_color\n        self.line_color = new_color  # \u5728\u6e05\u9664\u753b\u677f\u65f6\u4f7f\u7528\n        self.canvas.add(Color(rgb=self.line_color))\n\n    def change_line_width(self,line_width_ico=\"baby-face\"):\n        global line_width\n        line_width = {\"babel\":1,\"baby-face\":2,\"baguette\":4}[line_width_ico]\n\n    def clean_canvas(self):\n        saved = self.children[:]  # \u4fdd\u7559root\u63a7\u4ef6\u4e0a\u7684\u5b50\u63a7\u4ef6\uff08button)\n        self.clear_widgets()  # \u6e05\u9664\u6240\u6709\u63a7\u4ef6\u95f4\n        self.canvas.clear()   # \u6e05\u9664canvas\n        for widget in saved:  # \u5c06\u6e05\u9664\u7684\u5b50\u63a7\u4ef6\u518d\u753b\u4e0a\n            self.add_widget(widget)\n\n        self.change_color(self.line_color)\n\n\nclass PaintsApp(MDApp):\n    # \u4fee\u6539\u7ebf\u5bbd\u7684\u529f\u80fd\n    data = {\n        \"babel\": \"Thin\",\n        \"baby-face\": \"Normal\",\n        \"baguette\": \"Thick\",\n    }\n\n    def callback(self, instance):\n        # print(instance.icon)\n        if instance.icon in [\"babel\",\"baby-face\",\"baguette\"]:\n            DrawCanvasWidget().change_line_width(line_width_ico=instance.icon)\n            # print(line_width)\n\n\n    def build(self):\n        self.icon = \"./icon.ico\"\n        self.title = \"\u6d82\u9e26\u753b\u677f(kivymd\u7248)\"\n        self.theme_cls.primary_palette = \"Blue\" \n\n        return Builder.load_file(\"./paint.kv\")\n\n\nif __name__ == \"__main__\":\n    PaintsApp().run()\n\n\n\n\npaint.kv\n\u589e\u52a0\u4fee\u6539\u7ebf\u5bbd\u7684\u529f\u80fd\n\n\n# paint in kivymd by xu jing.\n# date 2020-07-09\n\nBoxLayout:\n    orientation: 'vertical'\n\n    # toolbar\n    MDToolbar:\n        title: 'Paint'\n        elevation: 10\n        left_action_items: [['menu', lambda x: None]]\n        spacing: 10\n        padding: 10\n\n    # paint canvas\n    DrawCanvasWidget:\n        id: my_paint\n        canvas.before:\n            Color:\n                rgba: [1,1,1,1]\n            Rectangle:\n                pos: self.pos\n                size: self.size\n\n\n    # line width\n    MDFloatingActionButtonSpeedDial:\n        data: app.data\n        hint_animation: True\n        rotation_root_button: True\n        callback: app.callback\n\n\n\n\n\n\n\n \n\n\n\n\n3.\u6e05\u9664\u529f\u80fdMDFloatingActionButton\u7684\u5b9e\u73b0\n\n\n\u589e\u52a0\u6e05\u9664canvas\u7684\u529f\u80fd\uff0c\u5728\u754c\u9762\u8bbe\u8ba1\u65f6\uff0c\u6211\u4eec\u5df2\u7ecf\u5728\u4e0a\u4e00\u7ae0\u4e2d\u5b9e\u73b0\u4e86\u6e05\u9664\u7684\u4e8b\u4ef6\uff0c\u4ec5\u4ec5\u5728\npaint.kv\n\u4e2d\u5b9e\u73b0\u6e05\u9664\u7684\u63a7\u4ef6\u5373\u53ef\n\n\n# paint in kivymd by xu jing.\n# date 2020-07-09\n\nBoxLayout:\n    orientation: 'vertical'\n\n    # toolbar\n    MDToolbar:\n        title: 'Paint'\n        elevation: 10\n        left_action_items: [['menu', lambda x: None]]\n        spacing: 10\n        padding: 10\n\n        # clean canvas\n        MDFloatingActionButton:\n            icon: \"./icon.ico\"\n            opposite_colors: True\n            elevation_normal: 8\n            md_bg_color: app.theme_cls.primary_color\n            pos_hint: {\"center_x\": .5,\"center_y\": .5}\n            on_release: root.ids.my_paint.clean_canvas()\n\n\n    # paint canvas\n    DrawCanvasWidget:\n        id: my_paint\n        canvas.before:\n            Color:\n                rgba: [1,1,1,1]\n            Rectangle:\n                pos: self.pos\n                size: self.size\n\n    # line width\n    MDFloatingActionButtonSpeedDial:\n        data: app.data\n        hint_animation: True\n        rotation_root_button: True\n        callback: app.callback\n\n\n\n\n\n\n\n\n \n\n\n\n\n4.\u6539\u53d8\u989c\u8272MDRoundFlatButton\u7684\u5b9e\u73b0\n\n\n\u589e\u52a0canvas\u7ebf\u6761\u989c\u8272\u7684\u529f\u80fd\uff0c\u5728\u754c\u9762\u8bbe\u8ba1\u65f6\uff0c\u6211\u4eec\u5df2\u7ecf\u5728\u4e0a\u4e00\u7ae0\u4e2d\u5b9e\u73b0\u4e86\u66f4\u6539\u989c\u8272\u7684\u4e8b\u4ef6\uff0c\u4ec5\u4ec5\u5728\npaint.kv\n\u4e2d\u5b9e\u73b0\u66f4\u6539\u989c\u8272\u7684\u63a7\u4ef6\u5373\u53ef\n\n\n\n# paint in kivymd by xu jing.\n# date 2020-07-09\n\nBoxLayout:\n    orientation: 'vertical'\n\n    # toolbar\n    MDToolbar:\n        title: 'Paint'\n        elevation: 10\n        left_action_items: [['menu', lambda x: None]]\n        spacing: 10\n        padding: 10\n\n        # line color\n        MDRoundFlatButton:\n            text: \"Red\"\n            elevation_normal: 2\n            opposite_colors: True\n            md_bg_color: [1,0,0,1]\n            pos_hint: {\"center_x\": .5,\"center_y\": .5}\n            on_release: root.ids.my_paint.change_color(self.md_bg_color)\n\n        MDRoundFlatButton:\n            text: \"Green\"\n            elevation_normal: 2\n            opposite_colors: True\n            md_bg_color: [0,1,0,1]\n            pos_hint: {\"center_x\": .5,\"center_y\": .5}\n            on_release: root.ids.my_paint.change_color(self.md_bg_color)\n\n        MDRoundFlatButton:\n            text: \"Blue\"\n            elevation_normal: 2\n            opposite_colors: True\n            md_bg_color: [0,0,1,1]\n            pos_hint: {\"center_x\": .5,\"center_y\": .5}\n            on_release: root.ids.my_paint.change_color(self.md_bg_color)\n\n        # clean canvas\n        MDFloatingActionButton:\n            icon: \"./icon.ico\"\n            opposite_colors: True\n            elevation_normal: 8\n            md_bg_color: app.theme_cls.primary_color\n            pos_hint: {\"center_x\": .5,\"center_y\": .5}\n            on_release: root.ids.my_paint.clean_canvas()\n\n\n    # paint canvas\n    DrawCanvasWidget:\n        id: my_paint\n        canvas.before:\n            Color:\n                rgba: [1,1,1,1]\n            Rectangle:\n                pos: self.pos\n                size: self.size\n\n    # line width\n    MDFloatingActionButtonSpeedDial:\n        data: app.data\n        hint_animation: True\n        rotation_root_button: True\n        callback: app.callback\n\n\n\n\n\n\n\n \n\n\n\n\n5.\u9879\u76ee\u603b\u7ed3\n\n\n\u6211\u4eec\u4f7f\u7528kivymd\u4f18\u5316\u4e86kivy\u7684UI\u754c\u9762\uff0c\u4f7f\u5176\u770b\u8d77\u6765\u66f4\u50cf\u662f\u4e00\u4e2a\u5b89\u5353\u6216ios\u7684NUI\u5e94\u7528\uff0c\u5bf9\u4e8eUI\u65b9\u9762\u7684\u8bbe\u8ba1\u7b14\u8005\u5e76\u4e0d\u7cbe\u901a\uff0c\u5728\u771f\u6b63\u7684\u9879\u76ee\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u5bfb\u6c42\u516c\u53f8UI\u8bbe\u8ba1\u5e08\u7684\u5e2e\u52a9\uff0c\u57fa\u4e8eUI\u8bbe\u8ba1\u5e08\u5bf9\u4e8e\u63a7\u4ef6\u7684\u8bbe\u8ba1\uff0c\u6211\u4eec\u4f7f\u7528kivy\u6216kivymd\u53bb\u5b9e\u73b0\u3002\n\n\n\u6211\u4eec\u4f7f\u7528buildozer\u6765\u6253\u5305\u6211\u4eec\u7684\u5b89\u5353\u5e94\u7528\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u53c2\u8003\u7b2c9\u7ae0\u7684\u4ecb\u7ecd\uff0c\u6253\u5305\u540e\u7684apk\u5728\u5b89\u5353\u6a21\u62df\u5668\u4e0a\u7684\u8fd0\u884c\u6548\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n\n\n\u5b89\u5353\u6a21\u62df\u5668\u4e0a\u7684\u6548\u679c\uff1a\n\n\n\n\n \n\n\n\n\n\u5b89\u5353\u624b\u673a\u4e0a\u7684\u6548\u679c\uff1a",
            "title": "\u7b2c\u4e09\u7ae0 \u6d82\u9e26\u753b\u677f\u9879\u76ee\u57fa\u4e8ekivymd\u5b9e\u73b0"
        },
        {
            "location": "/chapter3/#kivymd",
            "text": "",
            "title": "\u7b2c\u4e09\u7ae0 \u6d82\u9e26\u753b\u677f\u9879\u76ee\u57fa\u4e8ekivymd\u5b9e\u73b0"
        },
        {
            "location": "/chapter3/#1",
            "text": "\u6211\u4eec\u8fdb\u4e00\u6b65\u5bf9\u6d82\u9e26\u753b\u677f\u5728\u754c\u9762\u5c42\u9762\u4e0a\u505a\u4f18\u5316\uff0c\u6211\u4eec\u4f7f\u7528kivymd\u5e93\u8fdb\u884c\u754c\u9762\u7684\u4f18\u5316\uff0ckivymd\u662f\u4e0eMaterial Desugn\u517c\u5bb9\u7684\u5c0f\u63a7\u4ef6\u7684\u96c6\u5408\uff0c\u53ef\u4e0ekivy\u4e00\u8d77\u4f7f\u7528\uff0ckivymd\u7684\u76ee\u6807\u662f\u5728\u4e0d\u727a\u7272\u6613\u7528\u6027\u6216\u5e94\u7528\u7a0b\u5e8f\u6027\u80fd\u7684\u524d\u63d0\u4e0b\uff0c\u5c3d\u53ef\u80fd\u63a5\u8fd1Google\u7684Material Design\u89c4\u8303\u3002kivymd\u7684\u539f\u4f5c\u8005\u4e09\u5e74\u524d\u505c\u6b62\u66f4\u65b0\u9879\u76ee\uff0c https://github.com/HeaTTheatR/KivyMD \u5bf9kivymd\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u5f00\u53d1\uff0c\u76ee\u524d\u8be5\u9879\u76ee\u4ecd\u7136\u5904\u4e8e\u6d4b\u8bd5\u7248\u7684\u9636\u6bb5\u3002  \u9996\u5148\u6211\u4eec\u4f7f\u7528kivymd\u6784\u5efa\u754c\u9762\uff0c\u521b\u5efa main.py  \nfrom kivy.lang import Builder\nfrom kivy.graphics import Line, Color\nfrom kivy.uix.widget import Widget\nfrom kivy.uix.boxlayout import BoxLayout\nfrom kivy.properties import StringProperty\n\nfrom kivymd.app import MDApp\nfrom kivymd.theming import ThemableBehavior\n\n\n\nglobal line_width\nline_width = 2\n\n# \u8fd9\u4e2a\u7c7b\u4e3b\u8981copy\u6211\u4eec\u5728\u4e0a\u4e00\u7ae0\u4e2d\u6784\u5efa\u7684\u7c7b\nclass DrawCanvasWidget(Widget):\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n        # \u9ed8\u8ba4\u5212\u7ebf\u7684\u989c\u8272\n        self.line_color = [0,0,0,1]\n        self.canvas.add(Color(rgba=[0,0,0,1]))\n\n    def on_touch_down(self,touch):\n\n        if Widget.on_touch_down(self,touch):\n            return\n        with self.canvas:\n            touch.ud['current_line'] = Line(points=(touch.x,touch.y),width=line_width)\n\n    def on_touch_move(self,touch):\n        if 'current_line' in touch.ud:\n            touch.ud['current_line'].points += (touch.x,touch.y)\n\n\n\n    def change_color(self,new_color):\n        # global line_color\n        self.line_color = new_color  # \u5728\u6e05\u9664\u753b\u677f\u65f6\u4f7f\u7528\n        self.canvas.add(Color(rgb=self.line_color))\n\n    def change_line_width(self,line_width_ico=\"baby-face\"):\n        global line_width\n        line_width = {\"babel\":1,\"baby-face\":2,\"baguette\":4}[line_width_ico]\n\n    def clean_canvas(self):\n        saved = self.children[:]  # \u4fdd\u7559root\u63a7\u4ef6\u4e0a\u7684\u5b50\u63a7\u4ef6\uff08button)\n        self.clear_widgets()  # \u6e05\u9664\u6240\u6709\u63a7\u4ef6\u95f4\n        self.canvas.clear()   # \u6e05\u9664canvas\n        for widget in saved:  # \u5c06\u6e05\u9664\u7684\u5b50\u63a7\u4ef6\u518d\u753b\u4e0a\n            self.add_widget(widget)\n\n        self.change_color(self.line_color)\n\n\nclass PaintsApp(MDApp):\n\n    def build(self):\n        self.icon = \"./icon.ico\"\n        self.title = \"\u6d82\u9e26\u753b\u677f(kivymd\u7248)\"\n        self.theme_cls.primary_palette = \"Blue\" \n\n        return Builder.load_file(\"./paint.kv\")\n\n\nif __name__ == \"__main__\":\n    PaintsApp().run()  \u521b\u5efa paint.kv \u7684UI\u754c\u9762  # paint in kivymd by xu jing.\n# date 2020-07-09\n\nBoxLayout:\n    orientation: 'vertical'\n\n    # toolbar\n    MDToolbar:\n        title: 'Paint'\n        elevation: 10\n        left_action_items: [['menu', lambda x: None]]\n        spacing: 10\n        padding: 10\n\n    # paint canvas\n    DrawCanvasWidget:\n        id: my_paint\n        canvas.before:\n            Color:\n                rgba: [1,1,1,1]\n            Rectangle:\n                pos: self.pos\n                size: self.size",
            "title": "1.\u9879\u76ee\u5c55\u793a\u4e0e\u753b\u677f\u6574\u4f53\u754c\u9762"
        },
        {
            "location": "/chapter3/#2mdfloatingactionbuttonspeeddial",
            "text": "\u901a\u8fc7kivymd\u4e2d\u7684MDFloatingActionButtonSpeedDial\u5b9e\u73b0\u7ebf\u5bbd\u7684\u6539\u53d8\uff0c\u4fee\u6539 main.py  \nfrom kivy.lang import Builder\nfrom kivy.graphics import Line, Color\nfrom kivy.uix.widget import Widget\nfrom kivy.uix.boxlayout import BoxLayout\nfrom kivy.properties import StringProperty\n\nfrom kivymd.app import MDApp\nfrom kivymd.theming import ThemableBehavior\n\n\n\nglobal line_width\nline_width = 2\n\n# \u8fd9\u4e2a\u7c7b\u4e3b\u8981copy\u6211\u4eec\u5728\u4e0a\u4e00\u7ae0\u4e2d\u6784\u5efa\u7684\u7c7b\nclass DrawCanvasWidget(Widget):\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n        # \u9ed8\u8ba4\u5212\u7ebf\u7684\u989c\u8272\n        self.line_color = [0,0,0,1]\n        self.canvas.add(Color(rgba=[0,0,0,1]))\n\n    def on_touch_down(self,touch):\n\n        if Widget.on_touch_down(self,touch):\n            return\n        with self.canvas:\n            touch.ud['current_line'] = Line(points=(touch.x,touch.y),width=line_width)\n\n    def on_touch_move(self,touch):\n        if 'current_line' in touch.ud:\n            touch.ud['current_line'].points += (touch.x,touch.y)\n\n\n\n    def change_color(self,new_color):\n        # global line_color\n        self.line_color = new_color  # \u5728\u6e05\u9664\u753b\u677f\u65f6\u4f7f\u7528\n        self.canvas.add(Color(rgb=self.line_color))\n\n    def change_line_width(self,line_width_ico=\"baby-face\"):\n        global line_width\n        line_width = {\"babel\":1,\"baby-face\":2,\"baguette\":4}[line_width_ico]\n\n    def clean_canvas(self):\n        saved = self.children[:]  # \u4fdd\u7559root\u63a7\u4ef6\u4e0a\u7684\u5b50\u63a7\u4ef6\uff08button)\n        self.clear_widgets()  # \u6e05\u9664\u6240\u6709\u63a7\u4ef6\u95f4\n        self.canvas.clear()   # \u6e05\u9664canvas\n        for widget in saved:  # \u5c06\u6e05\u9664\u7684\u5b50\u63a7\u4ef6\u518d\u753b\u4e0a\n            self.add_widget(widget)\n\n        self.change_color(self.line_color)\n\n\nclass PaintsApp(MDApp):\n    # \u4fee\u6539\u7ebf\u5bbd\u7684\u529f\u80fd\n    data = {\n        \"babel\": \"Thin\",\n        \"baby-face\": \"Normal\",\n        \"baguette\": \"Thick\",\n    }\n\n    def callback(self, instance):\n        # print(instance.icon)\n        if instance.icon in [\"babel\",\"baby-face\",\"baguette\"]:\n            DrawCanvasWidget().change_line_width(line_width_ico=instance.icon)\n            # print(line_width)\n\n\n    def build(self):\n        self.icon = \"./icon.ico\"\n        self.title = \"\u6d82\u9e26\u753b\u677f(kivymd\u7248)\"\n        self.theme_cls.primary_palette = \"Blue\" \n\n        return Builder.load_file(\"./paint.kv\")\n\n\nif __name__ == \"__main__\":\n    PaintsApp().run()  paint.kv \u589e\u52a0\u4fee\u6539\u7ebf\u5bbd\u7684\u529f\u80fd  # paint in kivymd by xu jing.\n# date 2020-07-09\n\nBoxLayout:\n    orientation: 'vertical'\n\n    # toolbar\n    MDToolbar:\n        title: 'Paint'\n        elevation: 10\n        left_action_items: [['menu', lambda x: None]]\n        spacing: 10\n        padding: 10\n\n    # paint canvas\n    DrawCanvasWidget:\n        id: my_paint\n        canvas.before:\n            Color:\n                rgba: [1,1,1,1]\n            Rectangle:\n                pos: self.pos\n                size: self.size\n\n\n    # line width\n    MDFloatingActionButtonSpeedDial:\n        data: app.data\n        hint_animation: True\n        rotation_root_button: True\n        callback: app.callback",
            "title": "2.\u6539\u53d8\u7ebf\u5bbdMDFloatingActionButtonSpeedDial\u7684\u5b9e\u73b0"
        },
        {
            "location": "/chapter3/#3mdfloatingactionbutton",
            "text": "\u589e\u52a0\u6e05\u9664canvas\u7684\u529f\u80fd\uff0c\u5728\u754c\u9762\u8bbe\u8ba1\u65f6\uff0c\u6211\u4eec\u5df2\u7ecf\u5728\u4e0a\u4e00\u7ae0\u4e2d\u5b9e\u73b0\u4e86\u6e05\u9664\u7684\u4e8b\u4ef6\uff0c\u4ec5\u4ec5\u5728 paint.kv \u4e2d\u5b9e\u73b0\u6e05\u9664\u7684\u63a7\u4ef6\u5373\u53ef  # paint in kivymd by xu jing.\n# date 2020-07-09\n\nBoxLayout:\n    orientation: 'vertical'\n\n    # toolbar\n    MDToolbar:\n        title: 'Paint'\n        elevation: 10\n        left_action_items: [['menu', lambda x: None]]\n        spacing: 10\n        padding: 10\n\n        # clean canvas\n        MDFloatingActionButton:\n            icon: \"./icon.ico\"\n            opposite_colors: True\n            elevation_normal: 8\n            md_bg_color: app.theme_cls.primary_color\n            pos_hint: {\"center_x\": .5,\"center_y\": .5}\n            on_release: root.ids.my_paint.clean_canvas()\n\n\n    # paint canvas\n    DrawCanvasWidget:\n        id: my_paint\n        canvas.before:\n            Color:\n                rgba: [1,1,1,1]\n            Rectangle:\n                pos: self.pos\n                size: self.size\n\n    # line width\n    MDFloatingActionButtonSpeedDial:\n        data: app.data\n        hint_animation: True\n        rotation_root_button: True\n        callback: app.callback",
            "title": "3.\u6e05\u9664\u529f\u80fdMDFloatingActionButton\u7684\u5b9e\u73b0"
        },
        {
            "location": "/chapter3/#4mdroundflatbutton",
            "text": "\u589e\u52a0canvas\u7ebf\u6761\u989c\u8272\u7684\u529f\u80fd\uff0c\u5728\u754c\u9762\u8bbe\u8ba1\u65f6\uff0c\u6211\u4eec\u5df2\u7ecf\u5728\u4e0a\u4e00\u7ae0\u4e2d\u5b9e\u73b0\u4e86\u66f4\u6539\u989c\u8272\u7684\u4e8b\u4ef6\uff0c\u4ec5\u4ec5\u5728 paint.kv \u4e2d\u5b9e\u73b0\u66f4\u6539\u989c\u8272\u7684\u63a7\u4ef6\u5373\u53ef  \n# paint in kivymd by xu jing.\n# date 2020-07-09\n\nBoxLayout:\n    orientation: 'vertical'\n\n    # toolbar\n    MDToolbar:\n        title: 'Paint'\n        elevation: 10\n        left_action_items: [['menu', lambda x: None]]\n        spacing: 10\n        padding: 10\n\n        # line color\n        MDRoundFlatButton:\n            text: \"Red\"\n            elevation_normal: 2\n            opposite_colors: True\n            md_bg_color: [1,0,0,1]\n            pos_hint: {\"center_x\": .5,\"center_y\": .5}\n            on_release: root.ids.my_paint.change_color(self.md_bg_color)\n\n        MDRoundFlatButton:\n            text: \"Green\"\n            elevation_normal: 2\n            opposite_colors: True\n            md_bg_color: [0,1,0,1]\n            pos_hint: {\"center_x\": .5,\"center_y\": .5}\n            on_release: root.ids.my_paint.change_color(self.md_bg_color)\n\n        MDRoundFlatButton:\n            text: \"Blue\"\n            elevation_normal: 2\n            opposite_colors: True\n            md_bg_color: [0,0,1,1]\n            pos_hint: {\"center_x\": .5,\"center_y\": .5}\n            on_release: root.ids.my_paint.change_color(self.md_bg_color)\n\n        # clean canvas\n        MDFloatingActionButton:\n            icon: \"./icon.ico\"\n            opposite_colors: True\n            elevation_normal: 8\n            md_bg_color: app.theme_cls.primary_color\n            pos_hint: {\"center_x\": .5,\"center_y\": .5}\n            on_release: root.ids.my_paint.clean_canvas()\n\n\n    # paint canvas\n    DrawCanvasWidget:\n        id: my_paint\n        canvas.before:\n            Color:\n                rgba: [1,1,1,1]\n            Rectangle:\n                pos: self.pos\n                size: self.size\n\n    # line width\n    MDFloatingActionButtonSpeedDial:\n        data: app.data\n        hint_animation: True\n        rotation_root_button: True\n        callback: app.callback",
            "title": "4.\u6539\u53d8\u989c\u8272MDRoundFlatButton\u7684\u5b9e\u73b0"
        },
        {
            "location": "/chapter3/#5",
            "text": "\u6211\u4eec\u4f7f\u7528kivymd\u4f18\u5316\u4e86kivy\u7684UI\u754c\u9762\uff0c\u4f7f\u5176\u770b\u8d77\u6765\u66f4\u50cf\u662f\u4e00\u4e2a\u5b89\u5353\u6216ios\u7684NUI\u5e94\u7528\uff0c\u5bf9\u4e8eUI\u65b9\u9762\u7684\u8bbe\u8ba1\u7b14\u8005\u5e76\u4e0d\u7cbe\u901a\uff0c\u5728\u771f\u6b63\u7684\u9879\u76ee\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u5bfb\u6c42\u516c\u53f8UI\u8bbe\u8ba1\u5e08\u7684\u5e2e\u52a9\uff0c\u57fa\u4e8eUI\u8bbe\u8ba1\u5e08\u5bf9\u4e8e\u63a7\u4ef6\u7684\u8bbe\u8ba1\uff0c\u6211\u4eec\u4f7f\u7528kivy\u6216kivymd\u53bb\u5b9e\u73b0\u3002  \u6211\u4eec\u4f7f\u7528buildozer\u6765\u6253\u5305\u6211\u4eec\u7684\u5b89\u5353\u5e94\u7528\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u53c2\u8003\u7b2c9\u7ae0\u7684\u4ecb\u7ecd\uff0c\u6253\u5305\u540e\u7684apk\u5728\u5b89\u5353\u6a21\u62df\u5668\u4e0a\u7684\u8fd0\u884c\u6548\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff1a  \u5b89\u5353\u6a21\u62df\u5668\u4e0a\u7684\u6548\u679c\uff1a      \u5b89\u5353\u624b\u673a\u4e0a\u7684\u6548\u679c\uff1a",
            "title": "5.\u9879\u76ee\u603b\u7ed3"
        },
        {
            "location": "/chapter4/",
            "text": "\u7b2c\u56db\u7ae0\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b\u9879\u76ee(\u57fa\u4e8eKivy)\n\n\n\n\n1.\u8f66\u9053\u7ebf\u68c0\u6d4b\u7684OpenCV\u5b9e\u73b0\n\n\n\u8be5\u90e8\u5206\u5e76\u4e0d\u662f\u672c\u8bfe\u7a0b\u4ecb\u7ecd\u7684\u91cd\u70b9\uff0c\u5728\u89c6\u9891\u8bfe\u7a0b\u4e2d\u4f1a\u5bf9\u8be5\u90e8\u5206\u8fdb\u884c\u8bb2\u89e3\uff0c\u5176\u4ee3\u7801\u4fdd\u5b58\u5728\nsample_lane_detection.py\n\u4e2d\n\n\n\n'''\nxujing\n2020-06-20\n\n\u8f66\u9053\u7ebf\u68c0\u6d4b opencv\n\n1\u3001CCD\u89c6\u9891\u6444\u50cf\u673a\u6821\u51c6\n2\u3001\u8bfb\u89c6\u9891\uff0c\u8f6c\u6210\u6309\u6bcf\u4e00\u5e27\u8bfb\u53d6\uff0c\u56fe\u50cf\u9884\u5904\u7406\n3\u3001\u56fe\u50cf\u7070\u5ea6\u5316\n4\u3001\u9ad8\u65af\u5e73\u6ed1\uff0c\u51cf\u5c11\u8fb9\u7f18\u5e72\u6270\n5\u3001\u5229\u7528canny\u7b97\u5b50\uff0c\u8fdb\u884c\u8fb9\u7f18\u68c0\u6d4b\n6\u3001\u8bbe\u5b9a\u611f\u5174\u8da3\u533a\u57df\uff0c\u51cf\u5c11\u8fd0\u7b97\u91cf\n7\u3001\u5229\u7528hough\u53d8\u6362\uff0c\u8fdb\u884c\u76f4\u7ebf\u68c0\u6d4b\n8\u3001\u5c06\u68c0\u6d4b\u6210\u529f\u7684\u76f4\u7ebf\u548c\u539f\u56fe\u50cf\u878d\u5408\n\n\n'''\n\nimport cv2\nimport numpy as np\nimport time\nimport logging\n\n#Canny\u7b97\u5b50\u6216Sobel\u7b97\u5b50\u8fdb\u884c\u8fb9\u7f18\u68c0\u6d4b\ndef canny_func(blur_gray,canny_lthreshold=150,canny_hthreshold=250):\n    canny_lthreshold = canny_lthreshold\n    canny_hthreshold = canny_hthreshold\n    edges = cv2.Canny(blur_gray,canny_lthreshold,canny_hthreshold)\n\n    return edges\n\n\n#\u8bbe\u7f6eROI\u533a\u57df,\u5b9a\u4e49\u4e00\u4e2a\u548c\u8f93\u5165\u56fe\u50cf\u540c\u6837\u5927\u5c0f\u7684\u5168\u9ed1\u56fe\u50cfmask\ndef roi_mask(img,vertics):\n    mask = np.zeros_like(img)\n    #\u6839\u636e\u8f93\u5165\u56fe\u50cf\u7684\u901a\u9053\u6570\uff0c\u5ffd\u7565\u7684\u50cf\u7d20\u70b9\u662f\u591a\u901a\u9053\u7684\u767d\u8272\uff0c\u8fd8\u662f\u5355\u901a\u9053\u7684\u767d\u8272\n    if len(img.shape) > 2:\n        channel_count = img.shape[2]\n        mask_color = (255,)*channel_count\n    else:\n        mask_color = 255\n    cv2.fillPoly(mask,[vertics],mask_color)\n    masked_img = cv2.bitwise_and(img,mask)\n    return masked_img\n\n# Hough\u53d8\u6362\n# https://blog.csdn.net/yuyuntan/article/details/80141392\n\ndef hough_func(roi_image,rho=1,theta=np.pi/180,threshold=15,min_line_lenght=40,max_line_gap=20):\n    rho = rho\n    theta = theta\n    threshold = threshold\n    min_line_lenght = min_line_lenght\n    max_line_gap = max_line_gap\n    # line_img = hough_lines(roi_image,rho,theta,threshold,min_line_lenght,max_line_gap)\n    line_img = cv2.HoughLinesP(roi_image,rho,theta,threshold,min_line_lenght,max_line_gap)\n\n    return line_img\n\n\n# def draw_lines(img,lines,color = [0,0,255],thickness = 2):\n#     for line in lines:\n#         for x1,y1,x2,y2 in line:\n#             cv2.line(img,(x1,y1),(x2,y2),color,thickness)\n\n\n# line_image = np.copy(img) # \u590d\u5236\u4e00\u4efd\u539f\u56fe\uff0c\u5c06\u7ebf\u6bb5\u7ed8\u5236\u5728\u8fd9\u5e45\u56fe\u4e0a\n# draw_lines(line_image, lines, [255, 0, 0], 6)\n\n\n\n# \u8ba1\u7b97\u5de6\u53f3\u8f66\u9053\u7ebf\u7684\u76f4\u7ebf\u65b9\u7a0b\n# \u6839\u636e\u6bcf\u4e2a\u7ebf\u6bb5\u5728\u56fe\u50cf\u5750\u6807\u7cfb\u4e0b\u7684\u659c\u7387\uff0c\u5224\u65ad\u7ebf\u6bb5\u4e3a\u5de6\u8f66\u9053\u7ebf\u8fd8\u662f\u53f3\u8f66\u9053\u7ebf\uff0c\n# \u5e76\u5b58\u4e8e\u4e0d\u540c\u7684\u53d8\u91cf\u4e2d\u3002\u968f\u540e\u5bf9\u6240\u6709\u5de6\u8f66\u9053\u7ebf\u4e0a\u7684\u70b9\u3001\u6240\u6709\u53f3\u8f66\u9053\u7ebf\u4e0a\u7684\u70b9\u505a\u4e00\u6b21\u6700\u5c0f\u4e8c\u4e58\u76f4\u7ebf\u62df\u5408\uff0c\n# \u5f97\u5230\u7684\u5373\u4e3a\u6700\u7ec8\u7684\u5de6\u3001\u53f3\u8f66\u9053\u7ebf\u7684\u76f4\u7ebf\u65b9\u7a0b\u3002\n# \u6700\u5c0f\u4e8c\u4e58\u62df\u5408\u8bb2\u89e3\u53ef\u53c2\u8003\uff1ahttps://blog.csdn.net/nienelong3319/article/details/80894621\n# np.polyfit(X, Y, 1) #\u4e00\u6b21\u591a\u9879\u5f0f\u62df\u5408\uff0c\u76f8\u5f53\u4e8e\u7ebf\u6027\u62df\u5408\n\n# \u8ba1\u7b97\u5de6\u53f3\u8f66\u9053\u7ebf\u7684\u4e0a\u4e0b\u8fb9\u754c\n# \u8003\u8651\u5230\u73b0\u5b9e\u4e16\u754c\u4e2d\u5de6\u53f3\u8f66\u9053\u7ebf\u4e00\u822c\u90fd\u662f\u5e73\u884c\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u8ba4\u4e3a\u5de6\u53f3\u8f66\u9053\u7ebf\u4e0a\u6700\u4e0a\u548c\u6700\u4e0b\u7684\u70b9\u5bf9\u5e94\u7684y\u503c\uff0c\n# \u5c31\u662f\u5de6\u53f3\u8f66\u9053\u7ebf\u7684\u8fb9\u754c\u3002\ndef draw_lines(img, lines, color=[0, 0, 255], thickness=2):\n    left_lines_x = []\n    left_lines_y = []\n    right_lines_x = []\n    right_lines_y = []\n    line_y_max = 0\n    line_y_min = 999\n\n    try:\n        for line in lines:\n            for x1,y1,x2,y2 in line:\n                if y1 > line_y_max:\n                    line_y_max = y1\n                if y2 > line_y_max:\n                    line_y_max = y2\n                if y1 < line_y_min:\n                    line_y_min = y1\n                if y2 < line_y_min:\n                    line_y_min = y2\n\n                k = (y2 - y1)/(x2 - x1)\n\n                if k < -0.3:\n                    left_lines_x.append(x1)\n                    left_lines_y.append(y1)\n                    left_lines_x.append(x2)\n                    left_lines_y.append(y2)\n                elif k > 0.3:\n                    right_lines_x.append(x1)\n                    right_lines_y.append(y1)\n                    right_lines_x.append(x2)\n                    right_lines_y.append(y2)\n        #\u6700\u5c0f\u4e8c\u4e58\u76f4\u7ebf\u62df\u5408\n        left_line_k, left_line_b = np.polyfit(left_lines_x, left_lines_y, 1)\n        right_line_k, right_line_b = np.polyfit(right_lines_x, right_lines_y, 1)\n\n        #\u6839\u636e\u76f4\u7ebf\u65b9\u7a0b\u548c\u6700\u5927\u3001\u6700\u5c0f\u7684y\u503c\u53cd\u7b97\u5bf9\u5e94\u7684x\n        cv2.line(img,\n                 (int((line_y_max - left_line_b)/left_line_k), line_y_max),\n                 (int((line_y_min - left_line_b)/left_line_k), line_y_min),\n                 color, thickness)\n        cv2.line(img,\n                 (int((line_y_max - right_line_b)/right_line_k), line_y_max),\n                 (int((line_y_min - right_line_b)/right_line_k), line_y_min),\n                 color, thickness)\n        # plot polygon\n        zero_img = np.zeros((img.shape), dtype=np.uint8)\n        polygon = np.array([\n            [int((line_y_max - left_line_b)/left_line_k), line_y_max], \n            [int((line_y_max - right_line_b)/right_line_k), line_y_max], \n            [int((line_y_min - right_line_b)/right_line_k), line_y_min], \n            [int((line_y_min - left_line_b)/left_line_k), line_y_min]\n            ])\n        # \u75281\u586b\u5145\u591a\u8fb9\u5f62\n        cv2.fillConvexPoly(zero_img, polygon, color=(0, 255, 0))\n        # zero_mask = cv2.rectangle(zero_img, (int((line_y_max - left_line_b)/left_line_k), line_y_max), \n        #     (int((line_y_min - right_line_b)/right_line_k), line_y_min),\n        #     color=(0, 255, 0), thickness=-1)\n\n        alpha = 1\n        # beta \u4e3a\u7b2c\u4e8c\u5f20\u56fe\u7247\u7684\u900f\u660e\u5ea6\n        beta = 0.2\n        gamma = 0\n        # cv2.addWeighted \u5c06\u539f\u59cb\u56fe\u7247\u4e0e mask \u878d\u5408\n        img = cv2.addWeighted(img, alpha, zero_img, beta, gamma)\n\n    except Exception as e:\n        # print(str(e))\n        # logging.info(\"[lane detect   ] NO detection\")\n        pass\n\n    return img\n\n\n\ndef detect_img(img):\n    start = time.time()\n    #\u53d6\u56fe\u7070\u5ea6\u5316\n    grap = cv2.cvtColor(img,cv2.COLOR_RGB2GRAY)\n    blur_grap = cv2.GaussianBlur(grap,(3,3),0)\n    canny_image = canny_func(blur_grap,canny_lthreshold=150,canny_hthreshold=250)\n\n    #\u56fe\u50cf\u50cf\u7d20\u884c\u6570 rows = canny_image.shape[0]  720\u884c\n    #\u56fe\u50cf\u50cf\u7d20\u5217\u6570 cols = canny_image.shape[1]  1280\u5217\n    left_bottom = [0, canny_image.shape[0]]\n    right_bottom = [canny_image.shape[1], canny_image.shape[0]]\n    left_top = [canny_image.shape[1]/3,canny_image.shape[0]/1.5]\n    right_top = [canny_image.shape[1]/3*2,canny_image.shape[0]/1.5]\n    # apex = [canny_image.shape[1]/2, 290]\n    # vertices = np.array([ left_bottom, right_bottom, apex ], np.int32)\n    vertices = np.array([ left_top,right_top, right_bottom, left_bottom], np.int32)\n    roi_image = roi_mask(canny_image, vertices)\n    # roi_image = roi_mask(img, vertices)\n\n\n    line_img = hough_func(roi_image,rho=1,theta=np.pi/180,threshold=15,min_line_lenght=40,max_line_gap=20)\n    img = draw_lines(img,line_img)\n    end = time.time()\n\n    detect_fps = round(1.0/(end-start+0.00001),2)\n\n    font = cv2.FONT_HERSHEY_SIMPLEX\n    img = cv2.putText(img, 'Lane detect v1.0.0 | Xu Jing | FPS: {}'.format(detect_fps), \n        (10, 40), font, 0.7, (0,255,0), 2)\n\n    return img\n\nif __name__ == \"__main__\":\n\n    img = cv2.imread(\"./static/test.jpg\")\n    img = detect_img(img)\n    cv2.imwrite(\"output.jpg\",img)\n\n\n\n\n\n\n\n\n \n\n\n\n\n2.\u9879\u76ee\u5c55\u793a\u53caIndex\u9875\u9762\u5f00\u53d1\n\n\n\u9996\u5148\u6211\u4eec\u521b\u5efaIndex\u9875\u9762\uff0c\u6784\u5efa\u4e00\u4e2a\nmain.py\n\u6587\u4ef6\uff0c\u8be5py\u6587\u4ef6\u662fkivy\u5e94\u7528\u7a0b\u5e8f\u7684\u5165\u53e3\u51fd\u6570\n\n\nimport kivy\nfrom kivy.app import App\nfrom kivy.uix.floatlayout import FloatLayout\nfrom kivy.uix.boxlayout import BoxLayout\nfrom kivy.uix.label import Label\nfrom kivy.uix.button import Button\nfrom kivy.uix.filechooser import FileChooserIconView\n\nfrom kivy.properties import ObjectProperty\nfrom kivy.uix.popup import Popup\nfrom kivy.factory import Factory\n\nfrom kivy.uix.screenmanager import Screen, ScreenManager\n\n# from kivy.clock import Clock\nfrom kivy.graphics.texture import Texture\n\nfrom kivy.uix.camera import Camera\nfrom kivy.properties import BooleanProperty, NumericProperty\n\nimport os\nimport cv2\nimport numpy as np\nimport logging\nfrom sample_lane_detection import *\n# import win32timezone\n\n# Index page \nclass IndexPage(FloatLayout):\n    '''\n    \u6b22\u8fce\u9875\u9762\n    '''\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n\n\n    @staticmethod\n    def page_go(*args):\n        App.get_running_app().screen_manager.current=\"Image_page\"\n        App.get_running_app().screen_manager.transition.direction = 'left'\n\n\n\nclass LaneDetectApp(App):\n    def build(self):\n        self.icon = \"./static/icon.ico\"\n        self.title = \"\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4bApp\"\n\n        self.load_kv(\"./index.kv\")  # \u9700\u8981\u521b\u5efa\u4e00\u4e2aindex.kv\n\n        self.screen_manager = ScreenManager()\n        pages = {\"Index_page\":IndexPage()}\n\n        for item,page in pages.items():\n            self.default_page = page\n            # \u6dfb\u52a0\u9875\u9762\n            screen = Screen(name=item)\n            screen.add_widget(self.default_page)\n            # \u5411\u5c4f\u5e55\u7ba1\u7406\u5668\u6dfb\u52a0\u9875\u9762\n            self.screen_manager.add_widget(screen)\n        return self.screen_manager\n\n\n\nif __name__ == \"__main__\":\n    LaneDetectApp().run()\n\n\n\n\n\n\u6211\u4eec\u5c06UI\u63a7\u4ef6\u901a\u8fc7kvlang\u5b9e\u73b0\uff0c\u521b\u5efa\nindex.kv\n\u6587\u4ef6\n\n\n# xujing\n# index page\n\n#: import C kivy.utils.get_color_from_hex\n<IndexPage>:\n\n    canvas.before:\n        Color: \n            rgba: [1,1,1,1]\n        Rectangle:\n            pos: self.pos\n            size: self.size\n            source: './static/index.jpg'\n\n    Label:\n        id: 'title_label'\n        text: '[ref=\"click\"][b]\\u6b22\\u8fce\\u4f7f\\u7528\\u8f66\\u9053\\u7ebf\\u68c0\\u6d4b\\u0041\\u0070\\u0070[/b][/ref]'\n        color: C('#FFFF00')\n        font_name: './static/DroidSansFallback.ttf'\n        font_size: 72  # 24\n        pos_hint: {\"center_x\":0.5,\"y\":0.2}\n        markup: True\n        on_ref_press: root.page_go()\n\n    Label: \n        text: '[b]v1.0.0[/b]'\n        color: C('#FFFF00')\n        font_name: './static/DroidSansFallback.ttf'\n        font_size: 54  #18\n        pos_hint: {\"center_x\":0.5,\"y\":0.1}\n        markup: True\n\n    Label: \n        text: '[b]\\u5f00\\u53d1\\u8005\\uff1a\\u0020\\u5f90\\u9759[/b]'\n        color: C('#FFFF00')\n        font_name: './static/DroidSansFallback.ttf'\n        font_size: 54  #18\n        pos_hint: {\"center_x\":0.5,\"y\":0.05}\n        markup: True\n\n\n\n\n\n\n\n \n\n\n\n\n3.\u56fe\u50cf\u8f66\u9053\u7ebf\u68c0\u6d4b\u9875\u9762\u5f00\u53d1\n\n\n\u7ee7\u7eed\u5b8c\u5584\u8f66\u9053\u7ebf\u68c0\u6d4b\u4e2d\u57fa\u4e8e\u56fe\u50cf\u7684\u8f66\u9053\u7ebf\u68c0\u6d4b\u9875\u9762\u7684\u5f00\u53d1\uff0c\u5728\u539f\u6709\u7684index\u9875\u9762\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u9875\u9762\n\n\n\n'''\nxujing\n2020-06-26 \n\n\u8f66\u9053\u7ebf\u52a0\u6d4b\u7684\u8de8\u5e73\u53f0GUI\u5b9e\u73b0(\u57fa\u4e8ekivy)\n\n\u652f\u6301Windows, Linux, MacOS, ios, Andriod\u6253\u5305\n\n'''\nimport kivy\nfrom kivy.app import App\nfrom kivy.uix.floatlayout import FloatLayout\nfrom kivy.uix.boxlayout import BoxLayout\nfrom kivy.uix.label import Label\nfrom kivy.uix.button import Button\nfrom kivy.uix.filechooser import FileChooserIconView\n\nfrom kivy.properties import ObjectProperty\nfrom kivy.uix.popup import Popup\nfrom kivy.factory import Factory\n\nfrom kivy.uix.screenmanager import Screen, ScreenManager\n\n# from kivy.clock import Clock\nfrom kivy.graphics.texture import Texture\n\nfrom kivy.uix.camera import Camera\nfrom kivy.properties import BooleanProperty, NumericProperty\n\nimport os\nimport cv2\nimport numpy as np\nimport logging\nfrom sample_lane_detection import *\n# import win32timezone\n\n\ndef cv_imread(filePath):\n    '''\n    opencv\u8bfb\u53d6\u5e26\u4e2d\u6587\u8def\u5f84\u7684\u56fe\u7247\n    '''\n    with open(filePath,mode=\"rb\") as f: \n        img_buff = np.frombuffer(f.read(),dtype=np.uint8)\n    cv_img = cv2.imdecode(img_buff,-1)\n    #cv_img = cv2.imdecode(np.fromfile(filePath,dtype=np.uint8),-1) # Android error: stderr: OSError: could not seek in file\n    return cv_img\n\n\n# Index page \nclass IndexPage(FloatLayout):\n    '''\n    \u6b22\u8fce\u9875\u9762\n    '''\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n\n\n    @staticmethod\n    def page_go(*args):\n        App.get_running_app().screen_manager.current=\"Image_page\"\n        App.get_running_app().screen_manager.transition.direction = 'left'\n\n\n# Image page\nclass LoadDialog(FloatLayout):\n    '''\n    \u5f39\u7a97\u7684\u52a0\u8f7d\u548c\u53d6\u6d88\u5c5e\u6027\u5b9a\u4e49\n    '''\n    load = ObjectProperty(None)\n    cancel = ObjectProperty(None)\n    cwdir = ObjectProperty(None)\n\n\nFactory.register(\"LoadDialog\",cls=LoadDialog)\n\n\nclass ImagePage(BoxLayout):\n    '''\n    \u5355\u5e27\u56fe\u50cf\u7684\u8f66\u9053\u7ebf\u76d1\u6d4b\n    '''\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n\n\n    @staticmethod\n    def back_index(*args):\n        App.get_running_app().screen_manager.current=\"Index_page\"\n        App.get_running_app().screen_manager.transition.direction = 'right'\n\n\n    def back_video(self,*args):\n        App.get_running_app().screen_manager.current=\"Video_page\"\n        App.get_running_app().screen_manager.transition.direction = 'left'\n\n\n    def dismiss_popup(self):\n        '''\n        \u5173\u95ed\u5f39\u7a97\n        '''\n        self._popup.dismiss()\n\n\n\n    def show_load(self):\n        # \u7ed1\u5b9a\u52a0\u8f7d\u548c\u53d6\u6d88\u7684\u65b9\u6cd5\n        content = LoadDialog(load=self._load,cancel=self.dismiss_popup,cwdir=os.getcwd())\n        # content = LoadDialog(load=self._load,cancel=self.dismiss_popup,cwdir=\"/storage/emulated/0/kivy\")\n        self._popup = Popup(title=\"Load Image\",content=content,size_hint=(.9,.9))\n        # open\n        self._popup.open()\n\n    def _load(self,path,filename):\n        print(path,filename)\n        self.dismiss_popup()\n        logging.info(\"path:{},filename:{}\".format(path,filename))\n\n        # img = cv2.imread(filename)\n        img= cv_imread(filename)\n        img = detect_img(img)\n\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGBA)\n        img = cv2.flip(img, 0) # \u65cb\u8f6c\n        img_buff = img.tostring()\n        img_texture = Texture.create(size=(img.shape[1], img.shape[0]), colorfmt='rgba')\n        img_texture.blit_buffer(img_buff, colorfmt='rgba', bufferfmt='ubyte')\n        self.ids.img_det.texture = img_texture\n\n\n\nclass LaneDetectApp(App):\n    def build(self):\n        self.icon = \"./static/icon.ico\"\n        self.title = \"\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4bApp\"\n\n        self.load_kv(\"./index.kv\")\n        self.load_kv(\"./image.kv\")\n\n\n\n\n        self.screen_manager = ScreenManager()\n        pages = {\"Index_page\":IndexPage(),\"Image_page\":ImagePage(),}\n\n\n        for item,page in pages.items():\n            self.default_page = page\n            # \u6dfb\u52a0\u9875\u9762\n            screen = Screen(name=item)\n            screen.add_widget(self.default_page)\n            # \u5411\u5c4f\u5e55\u7ba1\u7406\u5668\u6dfb\u52a0\u9875\u9762\n            self.screen_manager.add_widget(screen)\n        return self.screen_manager\n\n\n\nif __name__ == \"__main__\":\n    LaneDetectApp().run()\n\n\n\n\n\n\n\u589e\u52a0\nimage.kv\n\n\n<ImagePage>:\n\n    orientation: 'vertical'\n\n    Image:\n        id: img_det\n        source: \"./static/example.jpg\"\n        size_hint: (1.0,.9)\n        size_height_y: None\n        width: 100\n        allow_stretch: True\n\n    BoxLayout:\n        orientation: 'horizontal'\n        size_hint: (1,.1)\n        spacing: 25\n        padding: 10\n\n        Button:\n            text: \"[b]\\u8fd4\\u56de\\u4e3b\\u9875[/b]\"\n            font_name: './static/DroidSansFallback.ttf'\n            markup: True\n            on_press:root.back_index()\n\n        Button:\n            text: \"[b]\\u52a0\\u8f7d\\u56fe\\u50cf[/b]\"\n            font_name: './static/DroidSansFallback.ttf'\n            markup: True\n            on_release: root.show_load()\n\n\n\n        Button:\n            text: \"[b]\\u63a5\\u5165\\u89c6\\u9891[/b]\"\n            font_name: './static/DroidSansFallback.ttf'\n            markup: True\n            on_press:root.back_video()\n\n\n\n<LoadDialog>:\n    BoxLayout:\n        size: root.size\n        pos: root.pos\n        orientation: \"vertical\"\n        FileChooserIconView:\n            id: filechooser\n            rootpath: root.cwdir\n            filters: ['*.jpg',\"*.png\",\"*.bmp\",\"*.jpeg\"]\n            on_selection: text_input.text = self.selection and self.selection[0] or ''\n\n        TextInput:\n            id: text_input\n            size_hint_y: .1\n            multiline: False\n\n\n        BoxLayout:\n            size_hint_y: .1\n            spacing: 30\n            Button:\n                text: \"[b]\\u52a0\\u8f7d[/b]\"\n                on_release: root.load(filechooser.path,text_input.text)\n                markup: True\n                font_name: './static/DroidSansFallback.ttf'\n\n            Button:\n                text: \"[b]\\u53d6\\u6d88[/b]\"\n                on_release: root.cancel()\n                markup: True\n                font_name: './static/DroidSansFallback.ttf'\n\n\n\n\n\n\n\n\n \n\n\n\n\n4.\u624b\u673a\u6444\u50cf\u5934\u89c6\u9891\u6d41\u8f66\u9053\u68c0\u6d4b\u5f00\u53d1\n\n\n\u7ee7\u7eed\u589e\u52a0\u5bf9\u4e8e\u624b\u673a\u6444\u50cf\u5934\u7684\u652f\u6301\n\n\n'''\nxujing\n2020-06-26 \n\n\u8f66\u9053\u7ebf\u52a0\u6d4b\u7684\u8de8\u5e73\u53f0GUI\u5b9e\u73b0(\u57fa\u4e8ekivy)\n\n\u652f\u6301Windows, Linux, MacOS, ios, Andriod\u6253\u5305\n\n'''\nimport kivy\nfrom kivy.app import App\nfrom kivy.uix.floatlayout import FloatLayout\nfrom kivy.uix.boxlayout import BoxLayout\nfrom kivy.uix.label import Label\nfrom kivy.uix.button import Button\nfrom kivy.uix.filechooser import FileChooserIconView\n\nfrom kivy.properties import ObjectProperty\nfrom kivy.uix.popup import Popup\nfrom kivy.factory import Factory\n\nfrom kivy.uix.screenmanager import Screen, ScreenManager\n\n# from kivy.clock import Clock\nfrom kivy.graphics.texture import Texture\n\nfrom kivy.uix.camera import Camera\nfrom kivy.properties import BooleanProperty, NumericProperty\n\nimport os\nimport cv2\nimport numpy as np\nimport logging\nfrom sample_lane_detection import *\n# import win32timezone\n\n\ndef cv_imread(filePath):\n    '''\n    opencv\u8bfb\u53d6\u5e26\u4e2d\u6587\u8def\u5f84\u7684\u56fe\u7247\n    '''\n    with open(filePath,mode=\"rb\") as f: \n        img_buff = np.frombuffer(f.read(),dtype=np.uint8)\n    cv_img = cv2.imdecode(img_buff,-1)\n    #cv_img = cv2.imdecode(np.fromfile(filePath,dtype=np.uint8),-1) # Android error: stderr: OSError: could not seek in file\n    return cv_img\n\n\n# Index page \nclass IndexPage(FloatLayout):\n    '''\n    \u6b22\u8fce\u9875\u9762\n    '''\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n\n\n    @staticmethod\n    def page_go(*args):\n        App.get_running_app().screen_manager.current=\"Image_page\"\n        App.get_running_app().screen_manager.transition.direction = 'left'\n\n\n# Image page\nclass LoadDialog(FloatLayout):\n    '''\n    \u5f39\u7a97\u7684\u52a0\u8f7d\u548c\u53d6\u6d88\u5c5e\u6027\u5b9a\u4e49\n    '''\n    load = ObjectProperty(None)\n    cancel = ObjectProperty(None)\n    cwdir = ObjectProperty(None)\n\n\nFactory.register(\"LoadDialog\",cls=LoadDialog)\n\n\nclass ImagePage(BoxLayout):\n    '''\n    \u5355\u5e27\u56fe\u50cf\u7684\u8f66\u9053\u7ebf\u76d1\u6d4b\n    '''\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n\n\n    @staticmethod\n    def back_index(*args):\n        App.get_running_app().screen_manager.current=\"Index_page\"\n        App.get_running_app().screen_manager.transition.direction = 'right'\n\n\n    def back_video(self,*args):\n        App.get_running_app().screen_manager.current=\"Video_page\"\n        App.get_running_app().screen_manager.transition.direction = 'left'\n\n\n    def dismiss_popup(self):\n        '''\n        \u5173\u95ed\u5f39\u7a97\n        '''\n        self._popup.dismiss()\n\n\n\n    def show_load(self):\n        # \u7ed1\u5b9a\u52a0\u8f7d\u548c\u53d6\u6d88\u7684\u65b9\u6cd5\n        #content = LoadDialog(load=self._load,cancel=self.dismiss_popup,cwdir=os.getcwd())\n        content = LoadDialog(load=self._load,cancel=self.dismiss_popup,cwdir=\"/storage/emulated/0/kivy\")\n        self._popup = Popup(title=\"Load Image\",content=content,size_hint=(.9,.9))\n        # open\n        self._popup.open()\n\n    def _load(self,path,filename):\n        print(path,filename)\n        self.dismiss_popup()\n        logging.info(\"path:{},filename:{}\".format(path,filename))\n\n        # img = cv2.imread(filename)\n        img= cv_imread(filename)\n        img = detect_img(img)\n\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGBA)\n        img = cv2.flip(img, 0) # \u65cb\u8f6c\n        img_buff = img.tostring()\n        img_texture = Texture.create(size=(img.shape[1], img.shape[0]), colorfmt='rgba')\n        img_texture.blit_buffer(img_buff, colorfmt='rgba', bufferfmt='ubyte')\n        self.ids.img_det.texture = img_texture\n\n\n# video page\nclass CameraWidget(Camera):\n    '''\n    \u591a\u8def\u89c6\u9891\u7684\u8f66\u9053\u7ebf\u76d1\u6d4b\n    '''\n    detectFaces = BooleanProperty(False)\n    angle = NumericProperty(0)\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n        self.isAndroid = kivy.platform == \"android\"\n        #if self.isAndroid:\n        #    self.angle = -90\n\n\n\n    def on_tex(self, *l):\n        image = np.frombuffer(self.texture.pixels, dtype='uint8')\n        image = image.reshape(self.texture.height, self.texture.width, -1)\n        #logging.info(\"height:{},width:{}\".format(self.texture.height,self.texture.width))\n        image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)\n\n        #if self.angle  == 90:\n        #    image = cv2.rotate(image, cv2.ROTATE_90_COUNTERCLOCKWISE)\n        #if self.angle  == -90:\n            #image = cv2.rotate(image, cv2.ROTATE_90_CLOCKWISE)\n        image = cv2.rotate(image, cv2.ROTATE_90_CLOCKWISE)\n        # \u8f66\u9053\u7ebf\u68c0\u6d4b\u5f00\u59cb\n        image = detect_img(image)\n\n        image = cv2.resize(image,(640,480))\n        image = cv2.flip(image, 0) # \u65cb\u8f6c\n\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGBA)\n        numpy_data = image.tostring()\n        #self.texture = Texture.create(size=(image.shape[1], image.shape[0]), colorfmt='rgba', bufferfmt='ubyte')\n        self.texture.blit_buffer(numpy_data, bufferfmt=\"ubyte\", colorfmt='rgba')\n        super().on_tex(self.texture)\n\n\n\n\n\nclass VideoPage(BoxLayout):\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n\n\n    @staticmethod\n    def back_image(*args):\n        App.get_running_app().screen_manager.current=\"Image_page\"\n        App.get_running_app().screen_manager.transition.direction = 'right'\n\n    @staticmethod\n    def back_index_1(*args):\n        App.get_running_app().screen_manager.current=\"Index_page\"\n        App.get_running_app().screen_manager.transition.direction = 'left'\n\n\n\nclass LaneDetectApp(App):\n    def build(self):\n        self.icon = \"./static/icon.ico\"\n        self.title = \"\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4bApp\"\n\n        self.load_kv(\"./index.kv\")\n        self.load_kv(\"./image.kv\")\n        self.load_kv(\"./video.kv\")\n\n\n\n        self.screen_manager = ScreenManager()\n        pages = {\"Index_page\":IndexPage(),\"Image_page\":ImagePage(),\"Video_page\":VideoPage()}\n\n\n\n        for item,page in pages.items():\n            self.default_page = page\n            # \u6dfb\u52a0\u9875\u9762\n            screen = Screen(name=item)\n            screen.add_widget(self.default_page)\n            # \u5411\u5c4f\u5e55\u7ba1\u7406\u5668\u6dfb\u52a0\u9875\u9762\n            self.screen_manager.add_widget(screen)\n        return self.screen_manager\n\n\n\nif __name__ == \"__main__\":\n    LaneDetectApp().run()\n\n\n\n\n\n\u589e\u52a0\nvideo.kv\n\n\n<CameraWidget>\n    resolution: (640,480)\n    play: True\n    keep_ratio: True\n    allow_stretch: True\n    canvas.before:\n        PushMatrix\n        Rotate:\n            angle: root.angle\n            axis: 0, 0, 1\n            origin: root.center\n    canvas.after:\n        PopMatrix\n\n    orientation: 'vertical'\n\n\n<VideoPage>:\n    orientation: 'vertical'\n\n    CameraWidget:\n        id: camera\n\n    BoxLayout:\n        orientation: 'horizontal'\n        size_hint: (1,.1)\n        spacing: 25\n        padding: 10\n\n        Button:\n            text: \"[b]\\u52a0\\u8f7d\\u56fe\\u50cf\"\n            font_name: './static/DroidSansFallback.ttf'\n            markup: True\n            on_press:root.back_image()\n\n        Button:\n            text: \"[b]\\u8fd4\\u56de\\u4e3b\\u9875[/b]\"\n            font_name: './static/DroidSansFallback.ttf'\n            markup: True\n            on_release: root.back_index_1()\n\n\n\n\n\n\n\n \n\n\n\n\n5.\u9879\u76ee\u603b\u7ed3\n\n\n\u5173\u4e8e\u8be5\u9879\u76ee\u5728windows\u5e73\u53f0\u4e0b\u7684\u6253\u5305\uff0c\u53ef\u4ee5\u53c2\u8003\u672c\u8bfe\u7a0b\u7684\u7b2c6\u7ae0\u548c\u7b2c7\u7ae0\uff0c\u6211\u4eec\u5c06\u4f7f\u7528pyinstaller\u548csetupfactory\u5bf9kivy\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884cPC\u7aef\u7684\u5e94\u7528\u7a0b\u5e8f\u6253\u5305\u3002\n\u672c\u6b21\u8bfe\u4ec5\u5c55\u793a\u6253\u5305\u540e\u7684\u4e00\u4e9b\u6548\u679c\u3002\n\n\nwindows\u4e0b\u7684\u5e94\u7528\uff1a\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\u5173\u4e8e\u8be5\u9879\u76ee\u7684Android\u6253\u5305\uff0c\u53ef\u4ee5\u53c2\u8003\u672c\u8bfe\u7a0b\u7684\u7b2c9\u7ae0\uff0c\u672c\u6b21\u8bfe\u4ec5\u5c55\u793a\u5728\u5b89\u5353\u4e0a\u7684\u6253\u5305\u8fd0\u884c\u6548\u679c\u3002\n\n\nandroid\u4e0b\u7684\u5e94\u7528",
            "title": "\u7b2c\u56db\u7ae0 \u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b\u9879\u76ee(\u57fa\u4e8eKivy)"
        },
        {
            "location": "/chapter4/#kivy",
            "text": "",
            "title": "\u7b2c\u56db\u7ae0\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b\u9879\u76ee(\u57fa\u4e8eKivy)"
        },
        {
            "location": "/chapter4/#1opencv",
            "text": "\u8be5\u90e8\u5206\u5e76\u4e0d\u662f\u672c\u8bfe\u7a0b\u4ecb\u7ecd\u7684\u91cd\u70b9\uff0c\u5728\u89c6\u9891\u8bfe\u7a0b\u4e2d\u4f1a\u5bf9\u8be5\u90e8\u5206\u8fdb\u884c\u8bb2\u89e3\uff0c\u5176\u4ee3\u7801\u4fdd\u5b58\u5728 sample_lane_detection.py \u4e2d  \n'''\nxujing\n2020-06-20\n\n\u8f66\u9053\u7ebf\u68c0\u6d4b opencv\n\n1\u3001CCD\u89c6\u9891\u6444\u50cf\u673a\u6821\u51c6\n2\u3001\u8bfb\u89c6\u9891\uff0c\u8f6c\u6210\u6309\u6bcf\u4e00\u5e27\u8bfb\u53d6\uff0c\u56fe\u50cf\u9884\u5904\u7406\n3\u3001\u56fe\u50cf\u7070\u5ea6\u5316\n4\u3001\u9ad8\u65af\u5e73\u6ed1\uff0c\u51cf\u5c11\u8fb9\u7f18\u5e72\u6270\n5\u3001\u5229\u7528canny\u7b97\u5b50\uff0c\u8fdb\u884c\u8fb9\u7f18\u68c0\u6d4b\n6\u3001\u8bbe\u5b9a\u611f\u5174\u8da3\u533a\u57df\uff0c\u51cf\u5c11\u8fd0\u7b97\u91cf\n7\u3001\u5229\u7528hough\u53d8\u6362\uff0c\u8fdb\u884c\u76f4\u7ebf\u68c0\u6d4b\n8\u3001\u5c06\u68c0\u6d4b\u6210\u529f\u7684\u76f4\u7ebf\u548c\u539f\u56fe\u50cf\u878d\u5408\n\n\n'''\n\nimport cv2\nimport numpy as np\nimport time\nimport logging\n\n#Canny\u7b97\u5b50\u6216Sobel\u7b97\u5b50\u8fdb\u884c\u8fb9\u7f18\u68c0\u6d4b\ndef canny_func(blur_gray,canny_lthreshold=150,canny_hthreshold=250):\n    canny_lthreshold = canny_lthreshold\n    canny_hthreshold = canny_hthreshold\n    edges = cv2.Canny(blur_gray,canny_lthreshold,canny_hthreshold)\n\n    return edges\n\n\n#\u8bbe\u7f6eROI\u533a\u57df,\u5b9a\u4e49\u4e00\u4e2a\u548c\u8f93\u5165\u56fe\u50cf\u540c\u6837\u5927\u5c0f\u7684\u5168\u9ed1\u56fe\u50cfmask\ndef roi_mask(img,vertics):\n    mask = np.zeros_like(img)\n    #\u6839\u636e\u8f93\u5165\u56fe\u50cf\u7684\u901a\u9053\u6570\uff0c\u5ffd\u7565\u7684\u50cf\u7d20\u70b9\u662f\u591a\u901a\u9053\u7684\u767d\u8272\uff0c\u8fd8\u662f\u5355\u901a\u9053\u7684\u767d\u8272\n    if len(img.shape) > 2:\n        channel_count = img.shape[2]\n        mask_color = (255,)*channel_count\n    else:\n        mask_color = 255\n    cv2.fillPoly(mask,[vertics],mask_color)\n    masked_img = cv2.bitwise_and(img,mask)\n    return masked_img\n\n# Hough\u53d8\u6362\n# https://blog.csdn.net/yuyuntan/article/details/80141392\n\ndef hough_func(roi_image,rho=1,theta=np.pi/180,threshold=15,min_line_lenght=40,max_line_gap=20):\n    rho = rho\n    theta = theta\n    threshold = threshold\n    min_line_lenght = min_line_lenght\n    max_line_gap = max_line_gap\n    # line_img = hough_lines(roi_image,rho,theta,threshold,min_line_lenght,max_line_gap)\n    line_img = cv2.HoughLinesP(roi_image,rho,theta,threshold,min_line_lenght,max_line_gap)\n\n    return line_img\n\n\n# def draw_lines(img,lines,color = [0,0,255],thickness = 2):\n#     for line in lines:\n#         for x1,y1,x2,y2 in line:\n#             cv2.line(img,(x1,y1),(x2,y2),color,thickness)\n\n\n# line_image = np.copy(img) # \u590d\u5236\u4e00\u4efd\u539f\u56fe\uff0c\u5c06\u7ebf\u6bb5\u7ed8\u5236\u5728\u8fd9\u5e45\u56fe\u4e0a\n# draw_lines(line_image, lines, [255, 0, 0], 6)\n\n\n\n# \u8ba1\u7b97\u5de6\u53f3\u8f66\u9053\u7ebf\u7684\u76f4\u7ebf\u65b9\u7a0b\n# \u6839\u636e\u6bcf\u4e2a\u7ebf\u6bb5\u5728\u56fe\u50cf\u5750\u6807\u7cfb\u4e0b\u7684\u659c\u7387\uff0c\u5224\u65ad\u7ebf\u6bb5\u4e3a\u5de6\u8f66\u9053\u7ebf\u8fd8\u662f\u53f3\u8f66\u9053\u7ebf\uff0c\n# \u5e76\u5b58\u4e8e\u4e0d\u540c\u7684\u53d8\u91cf\u4e2d\u3002\u968f\u540e\u5bf9\u6240\u6709\u5de6\u8f66\u9053\u7ebf\u4e0a\u7684\u70b9\u3001\u6240\u6709\u53f3\u8f66\u9053\u7ebf\u4e0a\u7684\u70b9\u505a\u4e00\u6b21\u6700\u5c0f\u4e8c\u4e58\u76f4\u7ebf\u62df\u5408\uff0c\n# \u5f97\u5230\u7684\u5373\u4e3a\u6700\u7ec8\u7684\u5de6\u3001\u53f3\u8f66\u9053\u7ebf\u7684\u76f4\u7ebf\u65b9\u7a0b\u3002\n# \u6700\u5c0f\u4e8c\u4e58\u62df\u5408\u8bb2\u89e3\u53ef\u53c2\u8003\uff1ahttps://blog.csdn.net/nienelong3319/article/details/80894621\n# np.polyfit(X, Y, 1) #\u4e00\u6b21\u591a\u9879\u5f0f\u62df\u5408\uff0c\u76f8\u5f53\u4e8e\u7ebf\u6027\u62df\u5408\n\n# \u8ba1\u7b97\u5de6\u53f3\u8f66\u9053\u7ebf\u7684\u4e0a\u4e0b\u8fb9\u754c\n# \u8003\u8651\u5230\u73b0\u5b9e\u4e16\u754c\u4e2d\u5de6\u53f3\u8f66\u9053\u7ebf\u4e00\u822c\u90fd\u662f\u5e73\u884c\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u8ba4\u4e3a\u5de6\u53f3\u8f66\u9053\u7ebf\u4e0a\u6700\u4e0a\u548c\u6700\u4e0b\u7684\u70b9\u5bf9\u5e94\u7684y\u503c\uff0c\n# \u5c31\u662f\u5de6\u53f3\u8f66\u9053\u7ebf\u7684\u8fb9\u754c\u3002\ndef draw_lines(img, lines, color=[0, 0, 255], thickness=2):\n    left_lines_x = []\n    left_lines_y = []\n    right_lines_x = []\n    right_lines_y = []\n    line_y_max = 0\n    line_y_min = 999\n\n    try:\n        for line in lines:\n            for x1,y1,x2,y2 in line:\n                if y1 > line_y_max:\n                    line_y_max = y1\n                if y2 > line_y_max:\n                    line_y_max = y2\n                if y1 < line_y_min:\n                    line_y_min = y1\n                if y2 < line_y_min:\n                    line_y_min = y2\n\n                k = (y2 - y1)/(x2 - x1)\n\n                if k < -0.3:\n                    left_lines_x.append(x1)\n                    left_lines_y.append(y1)\n                    left_lines_x.append(x2)\n                    left_lines_y.append(y2)\n                elif k > 0.3:\n                    right_lines_x.append(x1)\n                    right_lines_y.append(y1)\n                    right_lines_x.append(x2)\n                    right_lines_y.append(y2)\n        #\u6700\u5c0f\u4e8c\u4e58\u76f4\u7ebf\u62df\u5408\n        left_line_k, left_line_b = np.polyfit(left_lines_x, left_lines_y, 1)\n        right_line_k, right_line_b = np.polyfit(right_lines_x, right_lines_y, 1)\n\n        #\u6839\u636e\u76f4\u7ebf\u65b9\u7a0b\u548c\u6700\u5927\u3001\u6700\u5c0f\u7684y\u503c\u53cd\u7b97\u5bf9\u5e94\u7684x\n        cv2.line(img,\n                 (int((line_y_max - left_line_b)/left_line_k), line_y_max),\n                 (int((line_y_min - left_line_b)/left_line_k), line_y_min),\n                 color, thickness)\n        cv2.line(img,\n                 (int((line_y_max - right_line_b)/right_line_k), line_y_max),\n                 (int((line_y_min - right_line_b)/right_line_k), line_y_min),\n                 color, thickness)\n        # plot polygon\n        zero_img = np.zeros((img.shape), dtype=np.uint8)\n        polygon = np.array([\n            [int((line_y_max - left_line_b)/left_line_k), line_y_max], \n            [int((line_y_max - right_line_b)/right_line_k), line_y_max], \n            [int((line_y_min - right_line_b)/right_line_k), line_y_min], \n            [int((line_y_min - left_line_b)/left_line_k), line_y_min]\n            ])\n        # \u75281\u586b\u5145\u591a\u8fb9\u5f62\n        cv2.fillConvexPoly(zero_img, polygon, color=(0, 255, 0))\n        # zero_mask = cv2.rectangle(zero_img, (int((line_y_max - left_line_b)/left_line_k), line_y_max), \n        #     (int((line_y_min - right_line_b)/right_line_k), line_y_min),\n        #     color=(0, 255, 0), thickness=-1)\n\n        alpha = 1\n        # beta \u4e3a\u7b2c\u4e8c\u5f20\u56fe\u7247\u7684\u900f\u660e\u5ea6\n        beta = 0.2\n        gamma = 0\n        # cv2.addWeighted \u5c06\u539f\u59cb\u56fe\u7247\u4e0e mask \u878d\u5408\n        img = cv2.addWeighted(img, alpha, zero_img, beta, gamma)\n\n    except Exception as e:\n        # print(str(e))\n        # logging.info(\"[lane detect   ] NO detection\")\n        pass\n\n    return img\n\n\n\ndef detect_img(img):\n    start = time.time()\n    #\u53d6\u56fe\u7070\u5ea6\u5316\n    grap = cv2.cvtColor(img,cv2.COLOR_RGB2GRAY)\n    blur_grap = cv2.GaussianBlur(grap,(3,3),0)\n    canny_image = canny_func(blur_grap,canny_lthreshold=150,canny_hthreshold=250)\n\n    #\u56fe\u50cf\u50cf\u7d20\u884c\u6570 rows = canny_image.shape[0]  720\u884c\n    #\u56fe\u50cf\u50cf\u7d20\u5217\u6570 cols = canny_image.shape[1]  1280\u5217\n    left_bottom = [0, canny_image.shape[0]]\n    right_bottom = [canny_image.shape[1], canny_image.shape[0]]\n    left_top = [canny_image.shape[1]/3,canny_image.shape[0]/1.5]\n    right_top = [canny_image.shape[1]/3*2,canny_image.shape[0]/1.5]\n    # apex = [canny_image.shape[1]/2, 290]\n    # vertices = np.array([ left_bottom, right_bottom, apex ], np.int32)\n    vertices = np.array([ left_top,right_top, right_bottom, left_bottom], np.int32)\n    roi_image = roi_mask(canny_image, vertices)\n    # roi_image = roi_mask(img, vertices)\n\n\n    line_img = hough_func(roi_image,rho=1,theta=np.pi/180,threshold=15,min_line_lenght=40,max_line_gap=20)\n    img = draw_lines(img,line_img)\n    end = time.time()\n\n    detect_fps = round(1.0/(end-start+0.00001),2)\n\n    font = cv2.FONT_HERSHEY_SIMPLEX\n    img = cv2.putText(img, 'Lane detect v1.0.0 | Xu Jing | FPS: {}'.format(detect_fps), \n        (10, 40), font, 0.7, (0,255,0), 2)\n\n    return img\n\nif __name__ == \"__main__\":\n\n    img = cv2.imread(\"./static/test.jpg\")\n    img = detect_img(img)\n    cv2.imwrite(\"output.jpg\",img)",
            "title": "1.\u8f66\u9053\u7ebf\u68c0\u6d4b\u7684OpenCV\u5b9e\u73b0"
        },
        {
            "location": "/chapter4/#2index",
            "text": "\u9996\u5148\u6211\u4eec\u521b\u5efaIndex\u9875\u9762\uff0c\u6784\u5efa\u4e00\u4e2a main.py \u6587\u4ef6\uff0c\u8be5py\u6587\u4ef6\u662fkivy\u5e94\u7528\u7a0b\u5e8f\u7684\u5165\u53e3\u51fd\u6570  import kivy\nfrom kivy.app import App\nfrom kivy.uix.floatlayout import FloatLayout\nfrom kivy.uix.boxlayout import BoxLayout\nfrom kivy.uix.label import Label\nfrom kivy.uix.button import Button\nfrom kivy.uix.filechooser import FileChooserIconView\n\nfrom kivy.properties import ObjectProperty\nfrom kivy.uix.popup import Popup\nfrom kivy.factory import Factory\n\nfrom kivy.uix.screenmanager import Screen, ScreenManager\n\n# from kivy.clock import Clock\nfrom kivy.graphics.texture import Texture\n\nfrom kivy.uix.camera import Camera\nfrom kivy.properties import BooleanProperty, NumericProperty\n\nimport os\nimport cv2\nimport numpy as np\nimport logging\nfrom sample_lane_detection import *\n# import win32timezone\n\n# Index page \nclass IndexPage(FloatLayout):\n    '''\n    \u6b22\u8fce\u9875\u9762\n    '''\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n\n\n    @staticmethod\n    def page_go(*args):\n        App.get_running_app().screen_manager.current=\"Image_page\"\n        App.get_running_app().screen_manager.transition.direction = 'left'\n\n\n\nclass LaneDetectApp(App):\n    def build(self):\n        self.icon = \"./static/icon.ico\"\n        self.title = \"\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4bApp\"\n\n        self.load_kv(\"./index.kv\")  # \u9700\u8981\u521b\u5efa\u4e00\u4e2aindex.kv\n\n        self.screen_manager = ScreenManager()\n        pages = {\"Index_page\":IndexPage()}\n\n        for item,page in pages.items():\n            self.default_page = page\n            # \u6dfb\u52a0\u9875\u9762\n            screen = Screen(name=item)\n            screen.add_widget(self.default_page)\n            # \u5411\u5c4f\u5e55\u7ba1\u7406\u5668\u6dfb\u52a0\u9875\u9762\n            self.screen_manager.add_widget(screen)\n        return self.screen_manager\n\n\n\nif __name__ == \"__main__\":\n    LaneDetectApp().run()  \u6211\u4eec\u5c06UI\u63a7\u4ef6\u901a\u8fc7kvlang\u5b9e\u73b0\uff0c\u521b\u5efa index.kv \u6587\u4ef6  # xujing\n# index page\n\n#: import C kivy.utils.get_color_from_hex\n<IndexPage>:\n\n    canvas.before:\n        Color: \n            rgba: [1,1,1,1]\n        Rectangle:\n            pos: self.pos\n            size: self.size\n            source: './static/index.jpg'\n\n    Label:\n        id: 'title_label'\n        text: '[ref=\"click\"][b]\\u6b22\\u8fce\\u4f7f\\u7528\\u8f66\\u9053\\u7ebf\\u68c0\\u6d4b\\u0041\\u0070\\u0070[/b][/ref]'\n        color: C('#FFFF00')\n        font_name: './static/DroidSansFallback.ttf'\n        font_size: 72  # 24\n        pos_hint: {\"center_x\":0.5,\"y\":0.2}\n        markup: True\n        on_ref_press: root.page_go()\n\n    Label: \n        text: '[b]v1.0.0[/b]'\n        color: C('#FFFF00')\n        font_name: './static/DroidSansFallback.ttf'\n        font_size: 54  #18\n        pos_hint: {\"center_x\":0.5,\"y\":0.1}\n        markup: True\n\n    Label: \n        text: '[b]\\u5f00\\u53d1\\u8005\\uff1a\\u0020\\u5f90\\u9759[/b]'\n        color: C('#FFFF00')\n        font_name: './static/DroidSansFallback.ttf'\n        font_size: 54  #18\n        pos_hint: {\"center_x\":0.5,\"y\":0.05}\n        markup: True",
            "title": "2.\u9879\u76ee\u5c55\u793a\u53caIndex\u9875\u9762\u5f00\u53d1"
        },
        {
            "location": "/chapter4/#3",
            "text": "\u7ee7\u7eed\u5b8c\u5584\u8f66\u9053\u7ebf\u68c0\u6d4b\u4e2d\u57fa\u4e8e\u56fe\u50cf\u7684\u8f66\u9053\u7ebf\u68c0\u6d4b\u9875\u9762\u7684\u5f00\u53d1\uff0c\u5728\u539f\u6709\u7684index\u9875\u9762\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u9875\u9762  \n'''\nxujing\n2020-06-26 \n\n\u8f66\u9053\u7ebf\u52a0\u6d4b\u7684\u8de8\u5e73\u53f0GUI\u5b9e\u73b0(\u57fa\u4e8ekivy)\n\n\u652f\u6301Windows, Linux, MacOS, ios, Andriod\u6253\u5305\n\n'''\nimport kivy\nfrom kivy.app import App\nfrom kivy.uix.floatlayout import FloatLayout\nfrom kivy.uix.boxlayout import BoxLayout\nfrom kivy.uix.label import Label\nfrom kivy.uix.button import Button\nfrom kivy.uix.filechooser import FileChooserIconView\n\nfrom kivy.properties import ObjectProperty\nfrom kivy.uix.popup import Popup\nfrom kivy.factory import Factory\n\nfrom kivy.uix.screenmanager import Screen, ScreenManager\n\n# from kivy.clock import Clock\nfrom kivy.graphics.texture import Texture\n\nfrom kivy.uix.camera import Camera\nfrom kivy.properties import BooleanProperty, NumericProperty\n\nimport os\nimport cv2\nimport numpy as np\nimport logging\nfrom sample_lane_detection import *\n# import win32timezone\n\n\ndef cv_imread(filePath):\n    '''\n    opencv\u8bfb\u53d6\u5e26\u4e2d\u6587\u8def\u5f84\u7684\u56fe\u7247\n    '''\n    with open(filePath,mode=\"rb\") as f: \n        img_buff = np.frombuffer(f.read(),dtype=np.uint8)\n    cv_img = cv2.imdecode(img_buff,-1)\n    #cv_img = cv2.imdecode(np.fromfile(filePath,dtype=np.uint8),-1) # Android error: stderr: OSError: could not seek in file\n    return cv_img\n\n\n# Index page \nclass IndexPage(FloatLayout):\n    '''\n    \u6b22\u8fce\u9875\u9762\n    '''\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n\n\n    @staticmethod\n    def page_go(*args):\n        App.get_running_app().screen_manager.current=\"Image_page\"\n        App.get_running_app().screen_manager.transition.direction = 'left'\n\n\n# Image page\nclass LoadDialog(FloatLayout):\n    '''\n    \u5f39\u7a97\u7684\u52a0\u8f7d\u548c\u53d6\u6d88\u5c5e\u6027\u5b9a\u4e49\n    '''\n    load = ObjectProperty(None)\n    cancel = ObjectProperty(None)\n    cwdir = ObjectProperty(None)\n\n\nFactory.register(\"LoadDialog\",cls=LoadDialog)\n\n\nclass ImagePage(BoxLayout):\n    '''\n    \u5355\u5e27\u56fe\u50cf\u7684\u8f66\u9053\u7ebf\u76d1\u6d4b\n    '''\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n\n\n    @staticmethod\n    def back_index(*args):\n        App.get_running_app().screen_manager.current=\"Index_page\"\n        App.get_running_app().screen_manager.transition.direction = 'right'\n\n\n    def back_video(self,*args):\n        App.get_running_app().screen_manager.current=\"Video_page\"\n        App.get_running_app().screen_manager.transition.direction = 'left'\n\n\n    def dismiss_popup(self):\n        '''\n        \u5173\u95ed\u5f39\u7a97\n        '''\n        self._popup.dismiss()\n\n\n\n    def show_load(self):\n        # \u7ed1\u5b9a\u52a0\u8f7d\u548c\u53d6\u6d88\u7684\u65b9\u6cd5\n        content = LoadDialog(load=self._load,cancel=self.dismiss_popup,cwdir=os.getcwd())\n        # content = LoadDialog(load=self._load,cancel=self.dismiss_popup,cwdir=\"/storage/emulated/0/kivy\")\n        self._popup = Popup(title=\"Load Image\",content=content,size_hint=(.9,.9))\n        # open\n        self._popup.open()\n\n    def _load(self,path,filename):\n        print(path,filename)\n        self.dismiss_popup()\n        logging.info(\"path:{},filename:{}\".format(path,filename))\n\n        # img = cv2.imread(filename)\n        img= cv_imread(filename)\n        img = detect_img(img)\n\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGBA)\n        img = cv2.flip(img, 0) # \u65cb\u8f6c\n        img_buff = img.tostring()\n        img_texture = Texture.create(size=(img.shape[1], img.shape[0]), colorfmt='rgba')\n        img_texture.blit_buffer(img_buff, colorfmt='rgba', bufferfmt='ubyte')\n        self.ids.img_det.texture = img_texture\n\n\n\nclass LaneDetectApp(App):\n    def build(self):\n        self.icon = \"./static/icon.ico\"\n        self.title = \"\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4bApp\"\n\n        self.load_kv(\"./index.kv\")\n        self.load_kv(\"./image.kv\")\n\n\n\n\n        self.screen_manager = ScreenManager()\n        pages = {\"Index_page\":IndexPage(),\"Image_page\":ImagePage(),}\n\n\n        for item,page in pages.items():\n            self.default_page = page\n            # \u6dfb\u52a0\u9875\u9762\n            screen = Screen(name=item)\n            screen.add_widget(self.default_page)\n            # \u5411\u5c4f\u5e55\u7ba1\u7406\u5668\u6dfb\u52a0\u9875\u9762\n            self.screen_manager.add_widget(screen)\n        return self.screen_manager\n\n\n\nif __name__ == \"__main__\":\n    LaneDetectApp().run()  \u589e\u52a0 image.kv  <ImagePage>:\n\n    orientation: 'vertical'\n\n    Image:\n        id: img_det\n        source: \"./static/example.jpg\"\n        size_hint: (1.0,.9)\n        size_height_y: None\n        width: 100\n        allow_stretch: True\n\n    BoxLayout:\n        orientation: 'horizontal'\n        size_hint: (1,.1)\n        spacing: 25\n        padding: 10\n\n        Button:\n            text: \"[b]\\u8fd4\\u56de\\u4e3b\\u9875[/b]\"\n            font_name: './static/DroidSansFallback.ttf'\n            markup: True\n            on_press:root.back_index()\n\n        Button:\n            text: \"[b]\\u52a0\\u8f7d\\u56fe\\u50cf[/b]\"\n            font_name: './static/DroidSansFallback.ttf'\n            markup: True\n            on_release: root.show_load()\n\n\n\n        Button:\n            text: \"[b]\\u63a5\\u5165\\u89c6\\u9891[/b]\"\n            font_name: './static/DroidSansFallback.ttf'\n            markup: True\n            on_press:root.back_video()\n\n\n\n<LoadDialog>:\n    BoxLayout:\n        size: root.size\n        pos: root.pos\n        orientation: \"vertical\"\n        FileChooserIconView:\n            id: filechooser\n            rootpath: root.cwdir\n            filters: ['*.jpg',\"*.png\",\"*.bmp\",\"*.jpeg\"]\n            on_selection: text_input.text = self.selection and self.selection[0] or ''\n\n        TextInput:\n            id: text_input\n            size_hint_y: .1\n            multiline: False\n\n\n        BoxLayout:\n            size_hint_y: .1\n            spacing: 30\n            Button:\n                text: \"[b]\\u52a0\\u8f7d[/b]\"\n                on_release: root.load(filechooser.path,text_input.text)\n                markup: True\n                font_name: './static/DroidSansFallback.ttf'\n\n            Button:\n                text: \"[b]\\u53d6\\u6d88[/b]\"\n                on_release: root.cancel()\n                markup: True\n                font_name: './static/DroidSansFallback.ttf'",
            "title": "3.\u56fe\u50cf\u8f66\u9053\u7ebf\u68c0\u6d4b\u9875\u9762\u5f00\u53d1"
        },
        {
            "location": "/chapter4/#4",
            "text": "\u7ee7\u7eed\u589e\u52a0\u5bf9\u4e8e\u624b\u673a\u6444\u50cf\u5934\u7684\u652f\u6301  '''\nxujing\n2020-06-26 \n\n\u8f66\u9053\u7ebf\u52a0\u6d4b\u7684\u8de8\u5e73\u53f0GUI\u5b9e\u73b0(\u57fa\u4e8ekivy)\n\n\u652f\u6301Windows, Linux, MacOS, ios, Andriod\u6253\u5305\n\n'''\nimport kivy\nfrom kivy.app import App\nfrom kivy.uix.floatlayout import FloatLayout\nfrom kivy.uix.boxlayout import BoxLayout\nfrom kivy.uix.label import Label\nfrom kivy.uix.button import Button\nfrom kivy.uix.filechooser import FileChooserIconView\n\nfrom kivy.properties import ObjectProperty\nfrom kivy.uix.popup import Popup\nfrom kivy.factory import Factory\n\nfrom kivy.uix.screenmanager import Screen, ScreenManager\n\n# from kivy.clock import Clock\nfrom kivy.graphics.texture import Texture\n\nfrom kivy.uix.camera import Camera\nfrom kivy.properties import BooleanProperty, NumericProperty\n\nimport os\nimport cv2\nimport numpy as np\nimport logging\nfrom sample_lane_detection import *\n# import win32timezone\n\n\ndef cv_imread(filePath):\n    '''\n    opencv\u8bfb\u53d6\u5e26\u4e2d\u6587\u8def\u5f84\u7684\u56fe\u7247\n    '''\n    with open(filePath,mode=\"rb\") as f: \n        img_buff = np.frombuffer(f.read(),dtype=np.uint8)\n    cv_img = cv2.imdecode(img_buff,-1)\n    #cv_img = cv2.imdecode(np.fromfile(filePath,dtype=np.uint8),-1) # Android error: stderr: OSError: could not seek in file\n    return cv_img\n\n\n# Index page \nclass IndexPage(FloatLayout):\n    '''\n    \u6b22\u8fce\u9875\u9762\n    '''\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n\n\n    @staticmethod\n    def page_go(*args):\n        App.get_running_app().screen_manager.current=\"Image_page\"\n        App.get_running_app().screen_manager.transition.direction = 'left'\n\n\n# Image page\nclass LoadDialog(FloatLayout):\n    '''\n    \u5f39\u7a97\u7684\u52a0\u8f7d\u548c\u53d6\u6d88\u5c5e\u6027\u5b9a\u4e49\n    '''\n    load = ObjectProperty(None)\n    cancel = ObjectProperty(None)\n    cwdir = ObjectProperty(None)\n\n\nFactory.register(\"LoadDialog\",cls=LoadDialog)\n\n\nclass ImagePage(BoxLayout):\n    '''\n    \u5355\u5e27\u56fe\u50cf\u7684\u8f66\u9053\u7ebf\u76d1\u6d4b\n    '''\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n\n\n    @staticmethod\n    def back_index(*args):\n        App.get_running_app().screen_manager.current=\"Index_page\"\n        App.get_running_app().screen_manager.transition.direction = 'right'\n\n\n    def back_video(self,*args):\n        App.get_running_app().screen_manager.current=\"Video_page\"\n        App.get_running_app().screen_manager.transition.direction = 'left'\n\n\n    def dismiss_popup(self):\n        '''\n        \u5173\u95ed\u5f39\u7a97\n        '''\n        self._popup.dismiss()\n\n\n\n    def show_load(self):\n        # \u7ed1\u5b9a\u52a0\u8f7d\u548c\u53d6\u6d88\u7684\u65b9\u6cd5\n        #content = LoadDialog(load=self._load,cancel=self.dismiss_popup,cwdir=os.getcwd())\n        content = LoadDialog(load=self._load,cancel=self.dismiss_popup,cwdir=\"/storage/emulated/0/kivy\")\n        self._popup = Popup(title=\"Load Image\",content=content,size_hint=(.9,.9))\n        # open\n        self._popup.open()\n\n    def _load(self,path,filename):\n        print(path,filename)\n        self.dismiss_popup()\n        logging.info(\"path:{},filename:{}\".format(path,filename))\n\n        # img = cv2.imread(filename)\n        img= cv_imread(filename)\n        img = detect_img(img)\n\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGBA)\n        img = cv2.flip(img, 0) # \u65cb\u8f6c\n        img_buff = img.tostring()\n        img_texture = Texture.create(size=(img.shape[1], img.shape[0]), colorfmt='rgba')\n        img_texture.blit_buffer(img_buff, colorfmt='rgba', bufferfmt='ubyte')\n        self.ids.img_det.texture = img_texture\n\n\n# video page\nclass CameraWidget(Camera):\n    '''\n    \u591a\u8def\u89c6\u9891\u7684\u8f66\u9053\u7ebf\u76d1\u6d4b\n    '''\n    detectFaces = BooleanProperty(False)\n    angle = NumericProperty(0)\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n        self.isAndroid = kivy.platform == \"android\"\n        #if self.isAndroid:\n        #    self.angle = -90\n\n\n\n    def on_tex(self, *l):\n        image = np.frombuffer(self.texture.pixels, dtype='uint8')\n        image = image.reshape(self.texture.height, self.texture.width, -1)\n        #logging.info(\"height:{},width:{}\".format(self.texture.height,self.texture.width))\n        image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)\n\n        #if self.angle  == 90:\n        #    image = cv2.rotate(image, cv2.ROTATE_90_COUNTERCLOCKWISE)\n        #if self.angle  == -90:\n            #image = cv2.rotate(image, cv2.ROTATE_90_CLOCKWISE)\n        image = cv2.rotate(image, cv2.ROTATE_90_CLOCKWISE)\n        # \u8f66\u9053\u7ebf\u68c0\u6d4b\u5f00\u59cb\n        image = detect_img(image)\n\n        image = cv2.resize(image,(640,480))\n        image = cv2.flip(image, 0) # \u65cb\u8f6c\n\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGBA)\n        numpy_data = image.tostring()\n        #self.texture = Texture.create(size=(image.shape[1], image.shape[0]), colorfmt='rgba', bufferfmt='ubyte')\n        self.texture.blit_buffer(numpy_data, bufferfmt=\"ubyte\", colorfmt='rgba')\n        super().on_tex(self.texture)\n\n\n\n\n\nclass VideoPage(BoxLayout):\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n\n\n    @staticmethod\n    def back_image(*args):\n        App.get_running_app().screen_manager.current=\"Image_page\"\n        App.get_running_app().screen_manager.transition.direction = 'right'\n\n    @staticmethod\n    def back_index_1(*args):\n        App.get_running_app().screen_manager.current=\"Index_page\"\n        App.get_running_app().screen_manager.transition.direction = 'left'\n\n\n\nclass LaneDetectApp(App):\n    def build(self):\n        self.icon = \"./static/icon.ico\"\n        self.title = \"\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4bApp\"\n\n        self.load_kv(\"./index.kv\")\n        self.load_kv(\"./image.kv\")\n        self.load_kv(\"./video.kv\")\n\n\n\n        self.screen_manager = ScreenManager()\n        pages = {\"Index_page\":IndexPage(),\"Image_page\":ImagePage(),\"Video_page\":VideoPage()}\n\n\n\n        for item,page in pages.items():\n            self.default_page = page\n            # \u6dfb\u52a0\u9875\u9762\n            screen = Screen(name=item)\n            screen.add_widget(self.default_page)\n            # \u5411\u5c4f\u5e55\u7ba1\u7406\u5668\u6dfb\u52a0\u9875\u9762\n            self.screen_manager.add_widget(screen)\n        return self.screen_manager\n\n\n\nif __name__ == \"__main__\":\n    LaneDetectApp().run()  \u589e\u52a0 video.kv  <CameraWidget>\n    resolution: (640,480)\n    play: True\n    keep_ratio: True\n    allow_stretch: True\n    canvas.before:\n        PushMatrix\n        Rotate:\n            angle: root.angle\n            axis: 0, 0, 1\n            origin: root.center\n    canvas.after:\n        PopMatrix\n\n    orientation: 'vertical'\n\n\n<VideoPage>:\n    orientation: 'vertical'\n\n    CameraWidget:\n        id: camera\n\n    BoxLayout:\n        orientation: 'horizontal'\n        size_hint: (1,.1)\n        spacing: 25\n        padding: 10\n\n        Button:\n            text: \"[b]\\u52a0\\u8f7d\\u56fe\\u50cf\"\n            font_name: './static/DroidSansFallback.ttf'\n            markup: True\n            on_press:root.back_image()\n\n        Button:\n            text: \"[b]\\u8fd4\\u56de\\u4e3b\\u9875[/b]\"\n            font_name: './static/DroidSansFallback.ttf'\n            markup: True\n            on_release: root.back_index_1()",
            "title": "4.\u624b\u673a\u6444\u50cf\u5934\u89c6\u9891\u6d41\u8f66\u9053\u68c0\u6d4b\u5f00\u53d1"
        },
        {
            "location": "/chapter4/#5",
            "text": "\u5173\u4e8e\u8be5\u9879\u76ee\u5728windows\u5e73\u53f0\u4e0b\u7684\u6253\u5305\uff0c\u53ef\u4ee5\u53c2\u8003\u672c\u8bfe\u7a0b\u7684\u7b2c6\u7ae0\u548c\u7b2c7\u7ae0\uff0c\u6211\u4eec\u5c06\u4f7f\u7528pyinstaller\u548csetupfactory\u5bf9kivy\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884cPC\u7aef\u7684\u5e94\u7528\u7a0b\u5e8f\u6253\u5305\u3002\n\u672c\u6b21\u8bfe\u4ec5\u5c55\u793a\u6253\u5305\u540e\u7684\u4e00\u4e9b\u6548\u679c\u3002  windows\u4e0b\u7684\u5e94\u7528\uff1a                     \u5173\u4e8e\u8be5\u9879\u76ee\u7684Android\u6253\u5305\uff0c\u53ef\u4ee5\u53c2\u8003\u672c\u8bfe\u7a0b\u7684\u7b2c9\u7ae0\uff0c\u672c\u6b21\u8bfe\u4ec5\u5c55\u793a\u5728\u5b89\u5353\u4e0a\u7684\u6253\u5305\u8fd0\u884c\u6548\u679c\u3002  android\u4e0b\u7684\u5e94\u7528",
            "title": "5.\u9879\u76ee\u603b\u7ed3"
        },
        {
            "location": "/chapter5/",
            "text": "\u7b2c\u4e94\u7ae0 \u57fa\u4e8e\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\u7684\u4e00\u952e\u73b0\u5b9e\u8f6c\u6362\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fb\u9879\u76ee(\u57fa\u4e8eKivymd)\n\n\n\n\n1.CartoonGAN\u7684Flask\u90e8\u7f72\u4e0e\u6d4b\u8bd5\n\n\n\u4e3a\u4e86\u540e\u671f\u5b89\u5353\u6253\u5305\u7684\u65b9\u4fbf\uff0c\u6211\u4eec\u5c06CartoonGAN\u7f51\u7edc\u901a\u8fc7WebAPI\u7684\u65b9\u5f0f\u90e8\u7f72\uff0c\u8fd9\u91cc\u6211\u4eec\u91c7\u7528Flask\u53bb\u90e8\u7f72\u6211\u4eec\u7684CartoonGAN,\u521b\u5efa\nflask_app.py\n\u5176\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\n# encoding: utf-8\n\n'''\ndataxujing\n2020-07-04\n\n\u57fa\u4e8eCartoonGAN\u7684\u73b0\u5b9e\u8fc1\u79fb\u4e8c\u6b21\u5143\u52a8\u753b\u98ce\u683c\u7684\u98ce\u683c\u8fc1\u79fb\u670d\u52a1\n\n\u57fa\u4e8eFlask,Pytorch\n\n\n'''\n\nimport os\nfrom io import BytesIO\nimport numpy as np\nimport time\nimport cv2\nfrom PIL import Image\n\nimport base64\nimport json\nimport flask\nfrom flask import request, Flask\n\nimport torch\nimport torchvision.transforms as transforms\nfrom torch.autograd import Variable\nimport torchvision.utils as vutils\nfrom network.Transformer import Transformer\n\napp = Flask(__name__)\n\n# load pretrained model\nmodel = Transformer()\n\nmodel_dict = {}\n# [\u5bab\u5d0e\u9a8f, \u7ec6\u7530\u5b88, \u76d7\u68a6\u4fa6\u63a2\uff08\u65e5\u672c\u52a8\u753b\u540d\uff09, \u65b0\u6d77\u8bda]\nfor model_name in [\"Hayao\",\"Hosoda\",\"Paprika\",\"Shinkai\"]:\n    # globals()['model_'+model_name] = Transformer().load_state_dict(torch.load(os.path.join(\"./static/model\", model_name + '_net_G_float.pth'))).eval()\n\n    globals()['model_'+model_name] = Transformer()\n    globals()['model_'+model_name].load_state_dict(torch.load(os.path.join(\"./static/model\", model_name + '_net_G_float.pth')))\n\n# \u6d4b\u8bd5\u63a5\u53e3\n@app.route(\"/test/<name>\",methods=[\"GET\",\"POST\"])\ndef test(name):\n    return \"Test Get: {}\".format(name)\n\n\n# model_name example: model_Hayao\n@app.route(\"/predict/<model_name>\", methods=[\"GET\",\"POST\"])\ndef transfor_cartoon(model_name):\n\n    try:\n        #\u89e3\u6790\u56fe\u7247\u6570\u636e\n        image_b64 = base64.b64decode(str(request.form['image']))\n        image_data = np.fromstring(image_b64, np.uint8)\n        # image_data = cv2.imdecode(image_data, cv2.IMREAD_COLOR)\n        # cv2.imwrite('/root/01.png', image_data)\n\n        input_image = Image.open(BytesIO(image_data)).convert('RGB')\n\n        # \u5f00\u59cb\u8bc6\u522b\n        model = globals()[model_name].eval()\n        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n\n        # \u56fe\u50cf\u5904\u7406\n        h = input_image.size[0]\n        w = input_image.size[1]\n        ratio = h *1.0 / w\n        # \u5c06\u957f\u8fb9\u7f29\u5c0f\u5230450\n        if ratio > 1:\n            h = 450\n            w = int(h*1.0/ratio)\n        else:\n            w = 450\n            h = int(w * ratio)\n        input_image = input_image.resize((h, w), Image.BICUBIC)\n        input_image = np.asarray(input_image)\n        # RGB -> BGR\n        input_image = input_image[:, :, [2, 1, 0]]\n        input_image = transforms.ToTensor()(input_image).unsqueeze(0)\n        # preprocess, (-1, 1)\n        input_image = -1 + 2 * input_image \n\n        if torch.cuda.is_available():\n            model.cuda()\n            input_image = Variable(input_image).cuda()\n        else:\n            model.float()\n            input_image = Variable(input_image).float()\n\n        # forward\n        output_image = model(input_image)\n        output_image = output_image[0]\n        # BGR -> RGB\n        output_image = output_image[[2, 1, 0], :, :]\n        # deprocess, (0, 1)\n        output_image = output_image.data.cpu().float() * 0.5 + 0.5\n        # save\n        # vutils.save_image(output_image, os.path.join(opt.output_dir, files[:-4] + '_' + opt.style + '.jpg'))\n\n        # \u53bb\u6389batch size\u7ef4\u5ea6\n        output_image = output_image.squeeze()\n        # \u4ece[0,1]\u8f6c\u5316\u4e3a[0,255]\uff0c\u518d\u4eceCHW\u8f6c\u4e3aHWC\uff0c\u6700\u540e\u8f6c\u4e3acv2\n        output_image = output_image.mul_(255).add_(0.5).clamp_(0, 255).permute(1, 2, 0).type(torch.uint8).numpy()\n        # RGB\u8f6cBRG\n        output_image_cv2 = cv2.cvtColor(output_image, cv2.COLOR_RGB2BGR)\n\n        # opencv \u8f6c base64\n        image = cv2.imencode('.jpg', output_image_cv2)[1]\n        base64_data = str(base64.b64encode(image))[2:-1]\n\n        res = {\"pred\":base64_data,\"code\":\"200\"}\n\n    except Exception as e:\n        print(str(e))\n        res = {'pred': \"we loss\", 'code': \"404\"}\n\n    return json.dumps(res)\n\n\nif __name__ == \"__main__\":\n    app.run(debug=True,host=\"0.0.0.0\",port=8080)\n\n\n\n\n\n\u6d4b\u8bd5\u6211\u4eec\u7684Flask WebAPI,\u521b\u5efa\nclient_test.py\n\n\n\n'''\ndataxujing\n2020-07-04\n\n\u8bf7\u6c42Flask CartoonGAN\u670d\u52a1\u7684\u6d4b\u8bd5\u4ee3\u7801\n\u7528\u6765\u9a8c\u8bc1Web\u670d\u52a1\u7684\u6b63\u5e38\n'''\n\n\nimport requests\nimport base64\nimport json\nfrom PIL import Image\nimport cv2\nimport numpy as np\n\n#\u5c06\u56fe\u7247\u6570\u636e\u8f6c\u6210base64\u683c\u5f0f\nwith open('./static/test_image/test.jpg', 'rb') as f:\n    img = base64.b64encode(f.read()).decode()\nimage = []\nimage.append(img)\nres = {\"image\":image}\n\n#\u8bbf\u95ee\u670d\u52a1\n# model: \"model_Hayao\"(\u5bab\u5d0e\u9a8f),\"model_Hosoda\",\"model_Paprika\",\"model_Shinkai\"\nurl = \"http://10.10.15.106:8080/predict/model_Hayao\"\nheaders = {'user-agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36'}\nres_back = requests.post(url,data=res,headers=headers, timeout=200)\n\n\n# save cartoon image\nstate = json.loads(res_back.text).get('code')\nif state == \"404\":\n    print(\"we loss\")\nelse:\n    img_bs64 = json.loads(res_back.text).get('pred')\n\n    imgString = base64.b64decode(img_bs64.encode(\"ascii\"))\n    nparr = np.fromstring(imgString,np.uint8)  \n    image = cv2.imdecode(nparr,cv2.IMREAD_COLOR)\n\n    cv2.imwrite(\"test_res.jpg\",image)\n\n\n\n\n\n\u6d4b\u8bd5\u7ed3\u679c\u5982\u4e0b\u56fe\uff1a\n\n\n\u539f\u56fe\uff1a\n\n\n\n\n \n\n\n\n\n\n\n\u98ce\u683c\u8f6c\u5316\u540e\u7684Cartoon:\n\n\n\n\n \n\n\n\n\n\n\n2.kivymd\u5b9a\u4e49\u4e3b\u754c\u9762\n\n\n\u9996\u5148\u521b\u5efa\nmain.py\n\n\n\n\n'''\nxujing\n2020-06-30\n\n\u57fa\u4e8ekivymd\u548cpytorch\u7684\u4e8c\u6b21\u5143\u98ce\u683c\u8f6c\u6362app\n\n'''\n\nfrom kivy.core.window import Window\nfrom kivy.lang import Builder\nfrom kivy.uix.boxlayout import BoxLayout\nfrom kivy.uix.image import Image\nfrom kivy.properties import ObjectProperty\n\nfrom kivymd.app import MDApp\nfrom kivymd.uix.dialog import MDDialog\nfrom kivymd.uix.button import MDFlatButton\nfrom kivymd.uix.picker import MDDatePicker\nfrom kivymd.uix.menu import MDDropdownMenu, RightContent\n\nfrom kivymd.toast import toast\nfrom kivymd.uix.bottomsheet import MDGridBottomSheet\n\nfrom kivymd.uix.filemanager import MDFileManager\nfrom kivy.graphics.texture import Texture\n\nimport requests\nimport base64\nimport json\nimport cv2\nimport numpy as np\nimport time\nimport os\nimport logging\n\n\n\nclass MyToolBar(BoxLayout):\n\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n\n\nclass CartoonApp(MDApp):\n\n\n    def build(self):\n        self.icon=\"./static/icon.png\"\n        self.title=\"\u57fa\u4e8eGAN\u7684\u4e8c\u6b21\u5143\u98ce\u683c\u8f6c\u6362App\"\n        self.theme_cls.primary_palette = \"Purple\"\n\n        mytoolbar = Builder.load_file(\"./mytoolbar.kv\")\n\n\n        return mytoolbar\n\n\n\nif __name__ == \"__main__\":\n\n    CartoonApp().run()\n\n\n\n\n\n\n\u521b\u5efa \nmytoolbar.kv\n\u7684\u6574\u4f53UI\u754c\u9762\n\n\n#: import C kivy.utils.get_hex_from_color\n\nMyToolBar:\n    BoxLayout:\n        orientation:'vertical'\n\n        MDToolbar:\n            title: 'CartoonGAN' \n            md_bg_color: 0.12, 0.56, 1, 1\n            specific_text_color: app.theme_cls.accent_color\n            icon:\"image-search-outline\"\n            left_action_items: [[\"menu\", lambda x: None]]\n            right_action_items: [[\"dots-vertical\", lambda x: None],[\"clock\", lambda x:None]]\n\n\n        MDBottomNavigation:\n            panel_color: 0.12, 0.56, 1, 1\n            MDBottomNavigationItem:\n                name: 'screen 1'\n                text: 'Home'\n                icon: 'home'\n\n                canvas:\n                    Color:\n                        rgba: [1,1,1,1]\n                    Rectangle:\n                        size: root.size\n                        pos: root.pos\n                        source: \"./static/index.png\"\n\n            MDBottomNavigationItem:\n                name: 'screen 2'\n                text: 'UploadImage'\n                icon: 'cloud-upload'\n                font_name: './static/DroidSansFallback.ttf'\n\n\n            MDBottomNavigationItem:\n                name: 'screen 3'\n                text: 'Download'\n                icon: 'folder-download'\n\n\n\n\n\n\u8fd0\u884c\u540e\u7684\u6574\u4f53\u754c\u9762\u6548\u679c\u4e3a:\n\n\n\n\n \n\n\n\n\n\n\n3.Home\u754c\u9762\u7684\u5b9e\u73b0\n\n\n\u4fee\u6539\nmytoolbar.kv\n \u589e\u52a0Label\n\n\n#: import C kivy.utils.get_hex_from_color\n\nMyToolBar:\n    BoxLayout:\n        orientation:'vertical'\n\n        MDToolbar:\n            title: 'CartoonGAN' \n            md_bg_color: 0.12, 0.56, 1, 1\n            specific_text_color: app.theme_cls.accent_color\n            icon:\"image-search-outline\"\n            left_action_items: [[\"menu\", lambda x: None]]\n            right_action_items: [[\"dots-vertical\", lambda x: None],[\"clock\", lambda x:None]]\n\n\n        MDBottomNavigation:\n            panel_color: 0.12, 0.56, 1, 1\n\n            # Page Index\n            MDBottomNavigationItem:\n                name: 'screen 1'\n                text: 'Home'\n                icon: 'home'\n\n                canvas:\n                    Color:\n                        rgba: [1,1,1,1]\n                    Rectangle:\n                        size: root.size\n                        pos: root.pos\n                        source: \"./static/index.png\"\n\n                MDLabel:\n                    text: '[ref=\"click\"][b]\\u57fa\\u4e8eGAN\\u7684\\u4e8c\\u6b21\\u5143\\u98ce\\u683c\\u8f6c\\u6362App[/b][/ref]'\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 30\n                    pos_hint: {\"center_x\":0.5,\"y\":0.2}\n                    markup: True\n                    halign: \"center\"\n                    theme_text_color: \"Custom\"\n                    text_color: 1, 1, 0, 1\n\n\n                MDLabel:\n                    text: '[b]v1.0.0[/b]'\n\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 20\n                    pos_hint: {\"center_x\":0.5,\"y\":0.1}\n                    markup: True\n                    halign: \"center\"\n                    theme_text_color: \"Custom\"\n                    text_color: 1, 1, 0, 1\n\n                MDLabel:\n                    text: '[b]\\u5f00\\u53d1\\u8005\\uff1a\\u0020\\u5f90\\u9759[/b]'\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 20\n                    pos_hint: {\"center_x\":0.5,\"y\":0.05}\n                    markup: True\n                    halign: \"center\"\n                    theme_text_color: \"Custom\"\n                    text_color: 1, 1, 0, 1\n\n            # Page UpLoad\n\n            MDBottomNavigationItem:\n                name: 'screen 2'\n                text: 'UploadImage'\n                icon: 'cloud-upload'\n                font_name: './static/DroidSansFallback.ttf'\n\n\n            # Page DownLoad\n\n            MDBottomNavigationItem:\n                name: 'screen 3'\n                text: 'Download'\n                icon: 'folder-download'\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n4.UPLOADIMAGE\u529f\u80fd\u7684\u5b9e\u73b0\n\n\nUPLOADIMAGE\u9875\u9762\u662f\u6211\u4eec\u57fa\u4e8e\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\u7684\u4e00\u952e\u73b0\u5b9e\u8f6c\u6362\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fb\u9879\u76ee\u7684\u6838\u5fc3\u529f\u80fd\uff0c\u4e3b\u8981\u5305\u62ec\uff1a\n\n\n\n\n\u4e00\u4e2a\u529f\u80fd\u8bf4\u660e\u5f39\u7a97\uff0c\u5f39\u7a97\u663e\u793a\u4e86\u6211\u4eec\u9879\u76ee\u6700\u6838\u5fc3\u7684\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\u7684Paper\u548c\u8d44\u6e90\n\n\n\u4e00\u4e2a\u5f39\u7a97Button\uff0c\u4e3b\u8981\u7528\u4e8e\u9009\u62e9\u4e0d\u540c\u7684\u98ce\u683c\u8f6c\u5316\uff0c\u76ee\u524d\u652f\u6301\uff1a \u5bab\u5d0e\u9a8f, \u7ec6\u7530\u5b88, \u76d7\u68a6\u4fa6\u63a2\uff08\u65e5\u672c\u52a8\u753b\u540d\uff09, \u65b0\u6d77\u8bda\u7684\u52a8\u753b\u98ce\u683c\u8f6c\u5316,\u540c\u65f6\u5b9e\u73b0\u4e00\u4e2a\u65e5\u5386\u663e\u793a\u7684\u5f39\u7a97\u529f\u80fd\n\n\n\u4e00\u4e2a\u6587\u4ef6\u4e0a\u4f20\u529f\u80fd\uff0c\u4e3b\u8981\u5b9e\u73b0\u5728\u624b\u673a\u6587\u4ef6\u4e2d\u4e0a\u4f20\u9009\u4e2d\u7684\u56fe\u50cf\u4ea4\u7ed9\u6211\u4eec\u7684Flask\u8bc6\u522b\u670d\u52a1\u8bc6\u522b\u8fdb\u884c\u98ce\u683c\u8f6c\u5316\uff0c\u8f6c\u5316\u8fc7\u7a0b\u4e2d\uff0cFlask\u670d\u52a1\u4f1a\u63a5\u6536\u5230\u4e0a\u4f20\u7684\u56fe\u7247\u548c\u5f39\u7a97Button\u9009\u62e9\u7684\u8f6c\u6362\u7c7b\u578b\uff0c\u540e\u53f0\u8c03\u7528\u4e0d\u540cGAN\u6a21\u578b\u8fdb\u884c\u8bc6\u522b\n\n\n\u663e\u793a\u98ce\u683c\u8f6c\u5316\u540e\u7684\u56fe\u50cf\uff0c \u8be5\u529f\u80fd\u4e3b\u8981\u63a5\u6536\u5c06\u8f6c\u6362\u540e\u7684\u56fe\u50cf\u5e76\u663e\u793a\u5728\u754c\u9762\n\n\n\n\n\u4e0b\u9762\u6211\u4eec\u5c06\u5728\u672c\u8282\u4e00\u4e00\u5b9e\u73b0\u4e0a\u8ff0\u529f\u80fd\u3002\n\n\n\n\n\u9996\u5148\u6211\u4eec\u5b9e\u73b0\u5f39\u7a97\u529f\u80fd\uff0c\u6211\u4eec\u5728ToolBar\u7684\u6807\u9898\u680f\u5b9e\u73b0\u5f39\u7a97\uff0c\u9996\u5148\u6211\u4eec\u4fee\u6539\nmytoolbar.kv\n\u589e\u52a0\u63a7\u4ef6\u7684\u4e8b\u4ef6\u51fd\u6570:\n\n\n\n\n#: import C kivy.utils.get_hex_from_color\n\nMyToolBar:\n    BoxLayout:\n        orientation:'vertical'\n\n        MDToolbar:\n            title: 'CartoonGAN' \n            md_bg_color: 0.12, 0.56, 1, 1\n            specific_text_color: app.theme_cls.accent_color\n            icon:\"image-search-outline\"\n            left_action_items: [[\"menu\", lambda x: root.show_info_dialog()]]  #<----------------------None\n            right_action_items: [[\"dots-vertical\", lambda x: None],[\"clock\", lambda x:None]]\n\n\n        MDBottomNavigation:\n            panel_color: 0.12, 0.56, 1, 1\n\n            # Page Index\n            MDBottomNavigationItem:\n                name: 'screen 1'\n                text: 'Home'\n                icon: 'home'\n\n                canvas:\n                    Color:\n                        rgba: [1,1,1,1]\n                    Rectangle:\n                        size: root.size\n                        pos: root.pos\n                        source: \"./static/index.png\"\n\n                MDLabel:\n                    text: '[ref=\"click\"][b]\\u57fa\\u4e8eGAN\\u7684\\u4e8c\\u6b21\\u5143\\u98ce\\u683c\\u8f6c\\u6362App[/b][/ref]'\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 30\n                    pos_hint: {\"center_x\":0.5,\"y\":0.2}\n                    markup: True\n                    halign: \"center\"\n                    theme_text_color: \"Custom\"\n                    text_color: 1, 1, 0, 1\n\n\n                MDLabel:\n                    text: '[b]v1.0.0[/b]'\n\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 20\n                    pos_hint: {\"center_x\":0.5,\"y\":0.1}\n                    markup: True\n                    halign: \"center\"\n                    theme_text_color: \"Custom\"\n                    text_color: 1, 1, 0, 1\n\n                MDLabel:\n                    text: '[b]\\u5f00\\u53d1\\u8005\\uff1a\\u0020\\u5f90\\u9759[/b]'\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 20\n                    pos_hint: {\"center_x\":0.5,\"y\":0.05}\n                    markup: True\n                    halign: \"center\"\n                    theme_text_color: \"Custom\"\n                    text_color: 1, 1, 0, 1\n\n            # Page UpLoad\n\n            MDBottomNavigationItem:\n                name: 'screen 2'\n                text: 'UploadImage'\n                icon: 'cloud-upload'\n                font_name: './static/DroidSansFallback.ttf'\n\n\n            # Page DownLoad\n\n            MDBottomNavigationItem:\n                name: 'screen 3'\n                text: 'Download'\n                icon: 'folder-download'\n\n\n\n\n\n\n\u6211\u4eec\u5728\nmain.py\n\u4e2d\u5b9a\u4e49\nshow_info_dialog()\n\u65b9\u6cd5\n\n\n'''\nxujing\n2020-06-30\n\n\u57fa\u4e8ekivymd\u548cpytorch\u7684\u4e8c\u6b21\u5143\u98ce\u683c\u8f6c\u6362app\n\n'''\n\nfrom kivy.core.window import Window\nfrom kivy.lang import Builder\nfrom kivy.uix.boxlayout import BoxLayout\nfrom kivy.uix.image import Image\nfrom kivy.properties import ObjectProperty\n\nfrom kivymd.app import MDApp\nfrom kivymd.uix.dialog import MDDialog\nfrom kivymd.uix.button import MDFlatButton\nfrom kivymd.uix.picker import MDDatePicker\nfrom kivymd.uix.menu import MDDropdownMenu, RightContent\n\nfrom kivymd.toast import toast\nfrom kivymd.uix.bottomsheet import MDGridBottomSheet\n\nfrom kivymd.uix.filemanager import MDFileManager\nfrom kivy.graphics.texture import Texture\n\nimport requests\nimport base64\nimport json\nimport cv2\nimport numpy as np\nimport time\nimport os\nimport logging\n\n\nclass MyToolBar(BoxLayout):\n\n\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n        self.dialog = None  # \u5b9a\u4e49\u5f39\u7a97\u5168\u5c40\u5bf9\u8c61\n\n    # \u5728\u8fd9\u91cc\u5b9e\u4f8b\u5316\u4e86MDDialog\u7c7b\n    def show_alert_dialog(self):\n        if not self.dialog:\n            self.dialog = MDDialog(\n                title=\"CartoonGAN\",\n                text='''1.Paper:https://openaccess.thecvf.com/content_cvpr_2018/CameraReady/2205.pdf\\n 2.GitHub:https://github.com/Yijunmaverick/CartoonGAN-Test-Pytorch-Torch\\n3.Repo:https://github.com/znxlwm/pytorch-CartoonGAN''',\n                # buttons=[\n                #     MDFlatButton(\n                #         text=\"\u53d6\u6d88\",font_name=\"./static/DroidSansFallback.ttf\"\n                #     )],\n                radius=[20, 7, 20, 7],\n                type=\"custom\",\n            )\n        self.dialog.open()\n\n\n    # \u4e8b\u4ef6\u51fd\u6570\uff0c\u8c03\u7528\u4f1a\u6253\u5f00\u5f39\u7a97\n    # \u8fd9\u91cc\u6211\u4eec\u4e0d\u9700\u8981\u5b9a\u4e49\u5173\u95edclose()\u7684\u65b9\u6cd5\uff0c\u56e0\u4e3a\u5728\u89e6\u6478\u6216\u70b9\u51fb\u975e\u5f39\u7a97\u90e8\u5206\u4f1a\u81ea\u52a8\u5173\u95ed\u5f39\u7a97\n    def show_info_dialog(self):\n        self.show_alert_dialog()\n\n\n\n\n\nclass CartoonApp(MDApp):\n\n\n    def build(self):\n        self.icon=\"./static/icon.png\"\n        self.title=\"\u57fa\u4e8eGAN\u7684\u4e8c\u6b21\u5143\u98ce\u683c\u8f6c\u6362App\"\n        self.theme_cls.primary_palette = \"Purple\"\n\n        mytoolbar = Builder.load_file(\"./mytoolbar.kv\")\n\n\n        return mytoolbar\n\n\nif __name__ == \"__main__\":\n\n    CartoonApp().run()\n\n\n\n\n\n\u5f39\u7a97\u7684\u8fd0\u884c\u6548\u679c\u5c55\u793a\uff1a\n\n\n\n\n \n\n\n\n\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\u76ee\u524dkivymd\u7684\u8be5\u5f39\u7a97\u529f\u80fd\u4e0d\u652f\u6301\u4e2d\u6587\u5185\u5bb9\u5c55\u793a\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u5e95\u5c42\u4ee3\u7801\u7684\u65b9\u5f0f\u4f7f\u5176\u652f\u6301\u4e2d\u6587\u663e\u793a\u3002\n\n\n\n\nMDGridBottomSheet()\u5f39\u7a97Button\u7684\u5b9e\u73b0\u53ca\u65e5\u5386\u5f39\u7a97\u7684\u5b9e\u73b0\n\n\n\n\n\u8be5\u529f\u80fd\u7684\u5b9e\u73b0\u4ecd\u7136\u5728ToolBar\u4e0a\u8fdb\u884c\uff0c\u9996\u5148\u6211\u4eec\u4fee\u6539\nmytoolbar.kv\n\u6dfb\u52a0\u4e8b\u4ef6\u51fd\u6570\u7684\u8c03\u7528\n\n\n\n#: import C kivy.utils.get_hex_from_color\n\nMyToolBar:\n    BoxLayout:\n        orientation:'vertical'\n\n        MDToolbar:\n            title: 'CartoonGAN' \n            md_bg_color: 0.12, 0.56, 1, 1\n            specific_text_color: app.theme_cls.accent_color\n            icon:\"image-search-outline\"\n            left_action_items: [[\"menu\", lambda x: root.show_info_dialog()]]  #<----------------------None\n            right_action_items: [[\"dots-vertical\", lambda x: root.show_grid_bottom_sheet()],[\"clock\", lambda x: root.show_example_date_picker()]]     #<------------------------------------None\n\n\n        MDBottomNavigation:\n            panel_color: 0.12, 0.56, 1, 1\n\n            # Page Index\n            MDBottomNavigationItem:\n                name: 'screen 1'\n                text: 'Home'\n                icon: 'home'\n\n                canvas:\n                    Color:\n                        rgba: [1,1,1,1]\n                    Rectangle:\n                        size: root.size\n                        pos: root.pos\n                        source: \"./static/index.png\"\n\n                MDLabel:\n                    text: '[ref=\"click\"][b]\\u57fa\\u4e8eGAN\\u7684\\u4e8c\\u6b21\\u5143\\u98ce\\u683c\\u8f6c\\u6362App[/b][/ref]'\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 30\n                    pos_hint: {\"center_x\":0.5,\"y\":0.2}\n                    markup: True\n                    halign: \"center\"\n                    theme_text_color: \"Custom\"\n                    text_color: 1, 1, 0, 1\n\n\n                MDLabel:\n                    text: '[b]v1.0.0[/b]'\n\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 20\n                    pos_hint: {\"center_x\":0.5,\"y\":0.1}\n                    markup: True\n                    halign: \"center\"\n                    theme_text_color: \"Custom\"\n                    text_color: 1, 1, 0, 1\n\n                MDLabel:\n                    text: '[b]\\u5f00\\u53d1\\u8005\\uff1a\\u0020\\u5f90\\u9759[/b]'\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 20\n                    pos_hint: {\"center_x\":0.5,\"y\":0.05}\n                    markup: True\n                    halign: \"center\"\n                    theme_text_color: \"Custom\"\n                    text_color: 1, 1, 0, 1\n\n            # Page UpLoad\n\n            MDBottomNavigationItem:\n                name: 'screen 2'\n                text: 'UploadImage'\n                icon: 'cloud-upload'\n                font_name: './static/DroidSansFallback.ttf'\n\n\n            # Page DownLoad\n\n            MDBottomNavigationItem:\n                name: 'screen 3'\n                text: 'Download'\n                icon: 'folder-download'\n\n\n\n\n\n\u6211\u4eec\u5728\nmain.py\n\u4e2d\u5b9e\u73b0\nhow_grid_bottom_sheet()\n\u548c\nshow_example_date_picker()\n\u65b9\u6cd5\n\n\n\n\n'''\nxujing\n2020-06-30\n\n\u57fa\u4e8ekivymd\u548cpytorch\u7684\u4e8c\u6b21\u5143\u98ce\u683c\u8f6c\u6362app\n\n'''\n\nfrom kivy.core.window import Window\nfrom kivy.lang import Builder\nfrom kivy.uix.boxlayout import BoxLayout\nfrom kivy.uix.image import Image\nfrom kivy.properties import ObjectProperty\n\nfrom kivymd.app import MDApp\nfrom kivymd.uix.dialog import MDDialog\nfrom kivymd.uix.button import MDFlatButton\nfrom kivymd.uix.picker import MDDatePicker\nfrom kivymd.uix.menu import MDDropdownMenu, RightContent\n\nfrom kivymd.toast import toast\nfrom kivymd.uix.bottomsheet import MDGridBottomSheet\n\nfrom kivymd.uix.filemanager import MDFileManager\nfrom kivy.graphics.texture import Texture\n\nimport requests\nimport base64\nimport json\nimport cv2\nimport numpy as np\nimport time\nimport os\nimport logging\n\n\n\nclass MyToolBar(BoxLayout):\n    previous_date = ObjectProperty()  # \u63a7\u4ef6\u6dfb\u52a0 \u5bf9\u8c61\u5c5e\u6027\uff08\u65e5\u5386\u5bf9\u8c61\uff09\n\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n        self.dialog = None\n        self.cartoon_class = \"model_Hayao\"  # \u9ed8\u8ba4\u8c03\u7528\u5bab\u5d0e\u9a8f\u7684\u753b\u98ce\n\n\n    def show_alert_dialog(self):\n        if not self.dialog:\n            self.dialog = MDDialog(\n                title=\"CartoonGAN\",\n                text='''1.Paper:https://openaccess.thecvf.com/content_cvpr_2018/CameraReady/2205.pdf\\n 2.GitHub:https://github.com/Yijunmaverick/CartoonGAN-Test-Pytorch-Torch\\n3.Repo:https://github.com/znxlwm/pytorch-CartoonGAN''',\n                # buttons=[\n                #     MDFlatButton(\n                #         text=\"\u53d6\u6d88\",font_name=\"./static/DroidSansFallback.ttf\"\n                #     )],\n                radius=[20, 7, 20, 7],\n                type=\"custom\",\n            )\n        self.dialog.open()\n\n    def show_info_dialog(self):\n        self.show_alert_dialog()\n\n    # \u663e\u793a\u65e5\u5386\u8c03\u7528MDDatePicker(),\u4e8b\u4ef6\u51fd\u6570\n    def show_example_date_picker(self, *args):\n\n        pd_ = self.previous_date\n        try:\n            MDDatePicker(self.set_previous_date,\n                         pd_.year, pd_.month, pd_.day).open()\n        except AttributeError:\n            MDDatePicker(self.set_previous_date).open()\n\n\n    def set_previous_date(self, date_obj):\n        self.previous_date = date_obj\n\n\n    # MDGridBottomSheet() \u4e8b\u4ef6\u7684\u5b9e\u73b0\n    # button sheet, menu \u7684\u9690\u85cf\u7684button,\u4e3b\u8981\u7528\u4e8e\u9009\u62e9\u52a8\u753b\u7684\u753b\u98ce\n    def callback_for_menu_items(self, *args):\n        toast(args[0])\n        self.cartoon_class = \"model_\" + args[0]\n        # print(self.cartoon_class)\n\n    def show_grid_bottom_sheet(self):\n\n        bottom_sheet_menu = MDGridBottomSheet()\n        # \"Hayao\",\"Hosoda\",\"Paprika\",\"Shinkai\"\n        data = {\n            \"Hayao\": \"washing-machine\",\n            \"Hosoda\": \"baby-carriage\",\n            \"Paprika\": \"barcode-scan\",\n            \"Shinkai\": \"cake\",\n        }\n        for item in data.items():\n            bottom_sheet_menu.add_item(\n                item[0],\n                lambda x, y=item[0]: self.callback_for_menu_items(y),\n                icon_src=item[1],\n\n            )\n        bottom_sheet_menu.open()\n\n\n\nclass CartoonApp(MDApp):\n\n\n    def build(self):\n        self.icon=\"./static/icon.png\"\n        self.title=\"\u57fa\u4e8eGAN\u7684\u4e8c\u6b21\u5143\u98ce\u683c\u8f6c\u6362App\"\n        self.theme_cls.primary_palette = \"Purple\"\n\n        mytoolbar = Builder.load_file(\"./mytoolbar.kv\")\n\n\n        return mytoolbar\n\n\n\nif __name__ == \"__main__\":\n\n    CartoonApp().run()\n\n\n\n\n\n\u5b9e\u73b0\u6548\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\u6587\u4ef6\u7684\u4e0a\u4f20\u8bc6\u522b\u529f\u80fd\u5b9e\u73b0\u8bc6\u522b\u548c\u663e\u793a\n\n\n\n\n\u672c\u8282\u6211\u4eec\u5b9e\u73b0\u901a\u8fc7\u6587\u4ef6\u7ba1\u7406\uff0c\u4e0a\u4f20\u624b\u673a\u672c\u5730\u7684\u56fe\u7247\u5230\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u7684Flask Web\u8bc6\u522b\u670d\u52a1\uff0c\u5e76\u63a5\u6536\u8bc6\u522b\u7ed3\u679c\n\n\n\u9996\u5148\u6211\u4eec\u5728\nmain.py\n\u4e2d\u5b9a\u4e49\u6587\u4ef6\u7ba1\u7406\uff0c\u5b9e\u73b0\u4e0a\u4f20\u548c\u8bc6\u522b\u7684\u529f\u80fd\n\n\n\n\n'''\nxujing\n2020-06-30\n\n\u57fa\u4e8ekivymd\u548cpytorch\u7684\u4e8c\u6b21\u5143\u98ce\u683c\u8f6c\u6362app\n\n'''\n\nfrom kivy.core.window import Window\nfrom kivy.lang import Builder\nfrom kivy.uix.boxlayout import BoxLayout\nfrom kivy.uix.image import Image\nfrom kivy.properties import ObjectProperty\n\nfrom kivymd.app import MDApp\nfrom kivymd.uix.dialog import MDDialog\nfrom kivymd.uix.button import MDFlatButton\nfrom kivymd.uix.picker import MDDatePicker\nfrom kivymd.uix.menu import MDDropdownMenu, RightContent\n\nfrom kivymd.toast import toast\nfrom kivymd.uix.bottomsheet import MDGridBottomSheet\n\nfrom kivymd.uix.filemanager import MDFileManager\nfrom kivy.graphics.texture import Texture\n\nimport requests\nimport base64\nimport json\nimport cv2\nimport numpy as np\nimport time\nimport os\nimport logging\n\n\nclass MyToolBar(BoxLayout):\n    previous_date = ObjectProperty()\n\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n        self.dialog = None\n        self.cartoon_class = \"model_Hayao\"\n\n\n        #file manager \n        self.manager_open = False\n        self.file_manager = MDFileManager(\n            exit_manager=self.exit_manager,\n            select_path=self.select_path,\n            previous=True,\n        )\n\n\n\n\n    def show_alert_dialog(self):\n        if not self.dialog:\n            self.dialog = MDDialog(\n                title=\"CartoonGAN\",\n                text='''1.Paper:https://openaccess.thecvf.com/content_cvpr_2018/CameraReady/2205.pdf\\n 2.GitHub:https://github.com/Yijunmaverick/CartoonGAN-Test-Pytorch-Torch\\n3.Repo:https://github.com/znxlwm/pytorch-CartoonGAN''',\n                # buttons=[\n                #     MDFlatButton(\n                #         text=\"\u53d6\u6d88\",font_name=\"./static/DroidSansFallback.ttf\"\n                #     )],\n                radius=[20, 7, 20, 7],\n                type=\"custom\",\n            )\n        self.dialog.open()\n\n\n    def show_example_date_picker(self, *args):\n\n        pd_ = self.previous_date\n        try:\n            MDDatePicker(self.set_previous_date,\n                         pd_.year, pd_.month, pd_.day).open()\n        except AttributeError:\n            MDDatePicker(self.set_previous_date).open()\n\n\n    def set_previous_date(self, date_obj):\n        self.previous_date = date_obj\n\n\n    def show_info_dialog(self):\n        self.show_alert_dialog()\n\n\n    # button sheet, menu \u7684\u9690\u85cf\u7684button,\u4e3b\u8981\u7528\u4e8e\u9009\u62e9\u52a8\u753b\u7684\u753b\u98ce\n    def callback_for_menu_items(self, *args):\n        toast(args[0])\n\n        self.cartoon_class = \"model_\" + args[0]\n        # print(self.cartoon_class)\n\n    def show_grid_bottom_sheet(self):\n\n        bottom_sheet_menu = MDGridBottomSheet()\n        # \"Hayao\",\"Hosoda\",\"Paprika\",\"Shinkai\"\n        data = {\n            \"Hayao\": \"washing-machine\",\n            \"Hosoda\": \"baby-carriage\",\n            \"Paprika\": \"barcode-scan\",\n            \"Shinkai\": \"cake\",\n        }\n        for item in data.items():\n            bottom_sheet_menu.add_item(\n                item[0],\n                lambda x, y=item[0]: self.callback_for_menu_items(y),\n                icon_src=item[1],\n\n            )\n        bottom_sheet_menu.open()\n\n\n    # file manager\n    def file_manager_open(self):\n        # button release event\n        # self.file_manager.show('/storage/emulated/0/kivy')  # Android \u66ff\u6362\u4e3a\u8fd9\u4e2a\n        self.file_manager.show('/')  # output manager to the screen\n        self.manager_open = True\n\n    def select_path(self, path):\n        '''\n        It will be called when you click on the file name\n        or the catalog selection button.\n\n        :type path: str;\n        :param path: path to the selected directory or file;\n        '''\n\n        self.exit_manager()\n        toast(path)\n        # path \u5c31\u662f\u6211\u4eec\u8bc6\u522b\u7684\u56fe\u50cf\u7684\u8def\u5f84\n\n        # \u5f00\u59cb\u8bf7\u6c42\u8bc6\u522b\n        is_image_file = lambda x: any(x.endswith(extension) for extension in [\".png\",\".jpg\",\".PNG\",\".JPG\",\".JPRG\",\".jpeg\"])\n        #\u5c06\u56fe\u7247\u6570\u636e\u8f6c\u6210base64\u683c\u5f0f\n\n        if is_image_file(path):\n            with open(path, 'rb') as f:\n                img = base64.b64encode(f.read()).decode()\n            image = []\n            image.append(img)\n            res = {\"image\":image}\n\n            try:\n                #\u8bbf\u95ee\u670d\u52a1\n                # model: \"model_Hayao\"(\u5bab\u5d0e\u9a8f),\"model_Hosoda\",\"model_Paprika\",\"model_Shinkai\"\n                url = \"http://XXXXXXX/predict/{}\".format( self.cartoon_class)\n                # \u6a21\u62dfHuawei Meta20\n                # http://www.fynas.com/ua\n                headers = {'user-agent': \"Mozilla/5.0 (Linux; U; Android 10; zh-CN; HMA-AL00 Build/HUAWEIHMA-AL00) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/57.0.2987.108 UCBrowser/12.7.9.1059 Mobile Safari/537.36\"}\n                res_back = requests.post(url,data=res,headers=headers, timeout=200)\n\n                # save cartoon image\n                state = json.loads(res_back.text).get('code')\n                if state != \"404\":\n                    img_bs64 = json.loads(res_back.text).get('pred')\n\n                    imgString = base64.b64decode(img_bs64.encode(\"ascii\"))\n                    # nparr = np.fromstring(imgString,np.uint8)  \n                    nparr = np.frombuffer(imgString,np.uint8)  \n                    image = cv2.imdecode(nparr,cv2.IMREAD_COLOR)\n                    self.save_image = image.copy()\n\n                    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGBA)\n                    img_buf = cv2.flip(image, 0)\n                    img_buf = img_buf.tostring()\n                    cartoon_texture = Texture.create(size=(image.shape[1], image.shape[0]), colorfmt='rgba') # android must rgba\n                    cartoon_texture.blit_buffer(img_buf, colorfmt='rgba', bufferfmt='ubyte')\n\n                    # display image from the texture\n                    self.ids.cartoongan_tops.text = \"\"\n                    self.ids.cartoon_image.texture = cartoon_texture\n            except Exception as e:\n                logging.info(\"[Internet Error   ] {}\".format(str(e)))\n                self.ids.cartoongan_tops.text = \"\"\n                self.ids.cartoongan_tops.text = \"\u7f51\u7edc\u9519\u8bef,\u8bf7\u91cd\u65b0\u5c1d\u8bd5...\"\n        else:\n            self.ids.cartoongan_tops.text = \"\"\n            self.ids.cartoongan_tops.text = \"\u60a8\u63d0\u4ea4\u7684\u662f\u975e\u56fe\u50cf\u6587\u4ef6,\u8bf7\u91cd\u65b0\u5c1d\u8bd5...\"\n\n\n\n    def exit_manager(self, *args):\n        '''\n        \u9000\u51faFile manager\n        '''\n        self.manager_open = False\n        self.file_manager.close()\n\n\n\nclass CartoonApp(MDApp):\n\n\n    def build(self):\n        self.icon=\"./static/icon.png\"\n        self.title=\"\u57fa\u4e8eGAN\u7684\u4e8c\u6b21\u5143\u98ce\u683c\u8f6c\u6362App\"\n        self.theme_cls.primary_palette = \"Purple\"\n\n        mytoolbar = Builder.load_file(\"./mytoolbar.kv\")\n\n\n        return mytoolbar\n\n\n\nif __name__ == \"__main__\":\n\n    CartoonApp().run()\n\n\n\n\n\n\u5728\nmytoolbar.kv\n\u4e2d\u5b9e\u73b0\u5bf9\u7528\u7684\u63a7\u4ef6\n\n\n#: import C kivy.utils.get_hex_from_color\n\nMyToolBar:\n    BoxLayout:\n        orientation:'vertical'\n\n        MDToolbar:\n            title: 'CartoonGAN' \n            md_bg_color: 0.12, 0.56, 1, 1\n            specific_text_color: app.theme_cls.accent_color\n            icon:\"image-search-outline\"\n            left_action_items: [[\"menu\", lambda x: root.show_info_dialog()]]  #<----------------------None\n            right_action_items: [[\"dots-vertical\", lambda x: root.show_grid_bottom_sheet()],[\"clock\", lambda x: root.show_example_date_picker()]]     #<------------------------------------None\n\n\n        MDBottomNavigation:\n            panel_color: 0.12, 0.56, 1, 1\n\n            # Page Index\n            MDBottomNavigationItem:\n                name: 'screen 1'\n                text: 'Home'\n                icon: 'home'\n\n                canvas:\n                    Color:\n                        rgba: [1,1,1,1]\n                    Rectangle:\n                        size: root.size\n                        pos: root.pos\n                        source: \"./static/index.png\"\n\n                MDLabel:\n                    text: '[ref=\"click\"][b]\\u57fa\\u4e8eGAN\\u7684\\u4e8c\\u6b21\\u5143\\u98ce\\u683c\\u8f6c\\u6362App[/b][/ref]'\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 30\n                    pos_hint: {\"center_x\":0.5,\"y\":0.2}\n                    markup: True\n                    halign: \"center\"\n                    theme_text_color: \"Custom\"\n                    text_color: 1, 1, 0, 1\n\n\n                MDLabel:\n                    text: '[b]v1.0.0[/b]'\n\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 20\n                    pos_hint: {\"center_x\":0.5,\"y\":0.1}\n                    markup: True\n                    halign: \"center\"\n                    theme_text_color: \"Custom\"\n                    text_color: 1, 1, 0, 1\n\n                MDLabel:\n                    text: '[b]\\u5f00\\u53d1\\u8005\\uff1a\\u0020\\u5f90\\u9759[/b]'\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 20\n                    pos_hint: {\"center_x\":0.5,\"y\":0.05}\n                    markup: True\n                    halign: \"center\"\n                    theme_text_color: \"Custom\"\n                    text_color: 1, 1, 0, 1\n\n            # Page UpLoad\n\n            MDBottomNavigationItem:\n                name: 'screen 2'\n                text: 'UploadImage'\n                icon: 'cloud-upload'\n                font_name: './static/DroidSansFallback.ttf'\n\n\n                MDLabel:\n                    id: cartoongan_tops\n                    text: '\\u0043\\u0061\\u0072\\u0074\\u006f\\u006f\\u006e\\u0047\\u0041\\u004e\\u0028\\u0043\\u0056\\u0050\\u0052\\u0032\\u0030\\u0031\\u0038\\u0029\\uff0c\\u5b83\\u53ef\\u4ee5\\u7528\\u771f\\u5b9e\\u666f\\u7269\\u7684\\u7167\\u7247\\u4f5c\\u4e3a\\u6e90\\u56fe\\u7247\\uff0c\\u751f\\u6210\\u4efb\\u610f\\u98ce\\u683c\\u7684\\u6f2b\\u753b\\u002c\\u4f5c\\u8005\\u672a\\u5f00\\u6e90\\u4ee3\\u7801\\uff0c\\u53ea\\u7ed9\\u51fa\\u4e86\\u56db\\u4e2a\\u8bad\\u7ec3\\u597d\\u7684\\u6a21\\u578b\\u0028\\u5bab\\u5d0e\\u9a8f\\u002c\\u0020\\u7ec6\\u7530\\u5b88\\u002c\\u0020\\u76d7\\u68a6\\u4fa6\\u63a2\\u002c\\u0020\\u65b0\\u6d77\\u8bda\\u0029\\u3002'\n                    halign: 'center'\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 24\n\n                Image:\n                    id: cartoon_image\n\n\n                MDRectangleFlatButton:\n                    text: \"\\u52a0\\u8f7d\\u56fe\\u50cf\\u5e76\\u505a\\u4e8c\\u6b21\\u5143\\u8f6c\\u6362\"\n                    pos_hint: {\"center_x\": .5}\n                    size_hint: 1, 0.05\n                    text_color: 0.5, 0, 0.5, 1\n                    font_name: './static/DroidSansFallback.ttf'\n                    on_release: root.file_manager_open()\n\n\n            # Page DownLoad\n\n            MDBottomNavigationItem:\n                name: 'screen 3'\n                text: 'Download'\n                icon: 'folder-download'\n\n\n\n\n\n\u8fd0\u884c\u6548\u679c\u5982\u4e0b\u56fe\uff1a\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\u8fd9\u6837\u6211\u4eec\u5728\u8fd9\u4e00\u8282\u7684\u5185\u5bb9\u5c31\u5b8c\u5168\u5b9e\u73b0\u4e86\uff0c\u4e0b\u9762\u6211\u4eec\u5728\u5b89\u5353\u6a21\u62df\u5668\u4e0a\uff0c\u5c55\u793a\u4e00\u4e0b\u6211\u4eec\u5b9e\u73b0\u6574\u4e2a\u8bc6\u522b\u8fc7\u7a0b\u7684\u6548\u679c\u56fe\uff1a\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n5.DOWNLOAD\u529f\u80fd\u7684\u5b9e\u73b0\n\n\n\u6700\u540e\u6211\u4eec\u5c06\u5b9e\u73b0\u98ce\u683c\u8f6c\u6362\u540e\u7684\u56fe\u7247\u7684\u4e0b\u8f7d\u548c\u4fdd\u5b58\uff0c\u8be5\u529f\u80fd\u5728DOWNLOAD\u9875\u9762\u5b9e\u73b0\uff0c\u8be5\u529f\u80fd\u540c\u65f6\u4f7f\u7528\u4e86\u6587\u4ef6\u7ba1\u7406\u9009\u62e9\u4fdd\u5b58\u7684\u8def\u5f84\uff0c\u5668\u65b9\u6cd5\u548c\u4e0a\u4e00\u8282\u4e2d\u7684\u9009\u62e9\u6587\u4ef6\u56fe\u7247\u8bc6\u522b\u7684\u8fc7\u7a0b\u662f\u76f8\u540c\u7684\uff0c\u8fd9\u91cc\u6211\u4e48\u5c06\u8be5\u90e8\u5206\u5b9e\u73b0\u7684\u5206\u6b65\u4ee3\u7801\u5c55\u793a\u7d66\u5927\u5bb6\n\n\n\u9996\u5148\u6211\u4eec\u5728\nmain.py\n\u4e2d\u5b9e\u73b0\u6587\u4ef6\u7ba1\u7406\u7684\u4fdd\u5b58\u529f\u80fd:\n\n\n\n\n'''\nxujing\n2020-06-30\n\n\u57fa\u4e8ekivymd\u548cpytorch\u7684\u4e8c\u6b21\u5143\u98ce\u683c\u8f6c\u6362app\n\n'''\n\nfrom kivy.core.window import Window\nfrom kivy.lang import Builder\nfrom kivy.uix.boxlayout import BoxLayout\nfrom kivy.uix.image import Image\nfrom kivy.properties import ObjectProperty\n\nfrom kivymd.app import MDApp\nfrom kivymd.uix.dialog import MDDialog\nfrom kivymd.uix.button import MDFlatButton\nfrom kivymd.uix.picker import MDDatePicker\nfrom kivymd.uix.menu import MDDropdownMenu, RightContent\n\nfrom kivymd.toast import toast\nfrom kivymd.uix.bottomsheet import MDGridBottomSheet\n\nfrom kivymd.uix.filemanager import MDFileManager\nfrom kivy.graphics.texture import Texture\n\nimport requests\nimport base64\nimport json\nimport cv2\nimport numpy as np\nimport time\nimport os\nimport logging\n\n\n\nclass MyToolBar(BoxLayout):\n    previous_date = ObjectProperty()\n\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n        self.dialog = None\n        self.cartoon_class = \"model_Hayao\"\n\n        #file manager \n        self.manager_open = False\n        self.file_manager = MDFileManager(\n            exit_manager=self.exit_manager,\n            select_path=self.select_path,\n            previous=True,\n        )\n\n        # save file manager\n        self.save_manager_open = False\n        self.save_file_manager = MDFileManager(\n            exit_manager=self.save_exit_manager,\n            select_path=self.save_select_path,\n        )\n\n        self.save_image = None\n\n\n\n    def show_alert_dialog(self):\n        if not self.dialog:\n            self.dialog = MDDialog(\n                title=\"CartoonGAN\",\n                text='''1.Paper:https://openaccess.thecvf.com/content_cvpr_2018/CameraReady/2205.pdf\\n 2.GitHub:https://github.com/Yijunmaverick/CartoonGAN-Test-Pytorch-Torch\\n3.Repo:https://github.com/znxlwm/pytorch-CartoonGAN''',\n                # buttons=[\n                #     MDFlatButton(\n                #         text=\"\u53d6\u6d88\",font_name=\"./static/DroidSansFallback.ttf\"\n                #     )],\n                radius=[20, 7, 20, 7],\n                type=\"custom\",\n            )\n        self.dialog.open()\n\n\n    def show_example_date_picker(self, *args):\n\n        pd_ = self.previous_date\n        try:\n            MDDatePicker(self.set_previous_date,\n                         pd_.year, pd_.month, pd_.day).open()\n        except AttributeError:\n            MDDatePicker(self.set_previous_date).open()\n\n\n    def set_previous_date(self, date_obj):\n        self.previous_date = date_obj\n\n\n    def show_info_dialog(self):\n        self.show_alert_dialog()\n\n\n    # button sheet, menu \u7684\u9690\u85cf\u7684button,\u4e3b\u8981\u7528\u4e8e\u9009\u62e9\u52a8\u753b\u7684\u753b\u98ce\n    def callback_for_menu_items(self, *args):\n        toast(args[0])\n\n        self.cartoon_class = \"model_\" + args[0]\n        # print(self.cartoon_class)\n\n    def show_grid_bottom_sheet(self):\n\n        bottom_sheet_menu = MDGridBottomSheet()\n        # \"Hayao\",\"Hosoda\",\"Paprika\",\"Shinkai\"\n        data = {\n            \"Hayao\": \"washing-machine\",\n            \"Hosoda\": \"baby-carriage\",\n            \"Paprika\": \"barcode-scan\",\n            \"Shinkai\": \"cake\",\n        }\n        for item in data.items():\n            bottom_sheet_menu.add_item(\n                item[0],\n                lambda x, y=item[0]: self.callback_for_menu_items(y),\n                icon_src=item[1],\n\n            )\n        bottom_sheet_menu.open()\n\n\n    # file manager\n    def file_manager_open(self):\n        # button release event\n        # self.file_manager.show('/storage/emulated/0/kivy')  # Android \u66ff\u6362\u4e3a\u8fd9\u4e2a\n        self.file_manager.show('/')  # output manager to the screen\n        self.manager_open = True\n\n    def select_path(self, path):\n        '''\n        It will be called when you click on the file name\n        or the catalog selection button.\n\n        :type path: str;\n        :param path: path to the selected directory or file;\n        '''\n\n        self.exit_manager()\n        toast(path)\n        # path \u5c31\u662f\u6211\u4eec\u8bc6\u522b\u7684\u56fe\u50cf\u7684\u8def\u5f84\n\n        # \u5f00\u59cb\u8bf7\u6c42\u8bc6\u522b\n        is_image_file = lambda x: any(x.endswith(extension) for extension in [\".png\",\".jpg\",\".PNG\",\".JPG\",\".JPRG\",\".jpeg\"])\n        #\u5c06\u56fe\u7247\u6570\u636e\u8f6c\u6210base64\u683c\u5f0f\n\n        if is_image_file(path):\n            with open(path, 'rb') as f:\n                img = base64.b64encode(f.read()).decode()\n            image = []\n            image.append(img)\n            res = {\"image\":image}\n\n            try:\n                #\u8bbf\u95ee\u670d\u52a1\n                # model: \"model_Hayao\"(\u5bab\u5d0e\u9a8f),\"model_Hosoda\",\"model_Paprika\",\"model_Shinkai\"\n                url = \"http://XXXXXXXX/predict/{}\".format( self.cartoon_class)\n                # \u6a21\u62dfHuawei Meta20\n                # http://www.fynas.com/ua\n                headers = {'user-agent': \"Mozilla/5.0 (Linux; U; Android 10; zh-CN; HMA-AL00 Build/HUAWEIHMA-AL00) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/57.0.2987.108 UCBrowser/12.7.9.1059 Mobile Safari/537.36\"}\n                res_back = requests.post(url,data=res,headers=headers, timeout=200)\n\n                # save cartoon image\n                state = json.loads(res_back.text).get('code')\n                if state != \"404\":\n                    img_bs64 = json.loads(res_back.text).get('pred')\n\n                    imgString = base64.b64decode(img_bs64.encode(\"ascii\"))\n                    # nparr = np.fromstring(imgString,np.uint8)  \n                    nparr = np.frombuffer(imgString,np.uint8)  \n                    image = cv2.imdecode(nparr,cv2.IMREAD_COLOR)\n                    self.save_image = image.copy()\n\n                    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGBA)\n                    img_buf = cv2.flip(image, 0)\n                    img_buf = img_buf.tostring()\n                    cartoon_texture = Texture.create(size=(image.shape[1], image.shape[0]), colorfmt='rgba') # android must rgba\n                    cartoon_texture.blit_buffer(img_buf, colorfmt='rgba', bufferfmt='ubyte')\n\n                    # display image from the texture\n                    self.ids.cartoongan_tops.text = \"\"\n                    self.ids.cartoon_image.texture = cartoon_texture\n            except Exception as e:\n                logging.info(\"[Internet Error   ] {}\".format(str(e)))\n                self.ids.cartoongan_tops.text = \"\"\n                self.ids.cartoongan_tops.text = \"\u7f51\u7edc\u9519\u8bef,\u8bf7\u91cd\u65b0\u5c1d\u8bd5...\"\n        else:\n            self.ids.cartoongan_tops.text = \"\"\n            self.ids.cartoongan_tops.text = \"\u60a8\u63d0\u4ea4\u7684\u662f\u975e\u56fe\u50cf\u6587\u4ef6,\u8bf7\u91cd\u65b0\u5c1d\u8bd5...\"\n\n\n\n    def exit_manager(self, *args):\n        '''\n        \u9000\u51faFile manager\n        '''\n        self.manager_open = False\n        self.file_manager.close()\n\n\n\n\n    # save file manager\n    def save_file_manager_open(self):\n        # button release event\n        # self.save_file_manager.show('/storage/emulated/0/kivy/save')  # Android \u66ff\u6362\u4e3a\u8fd9\u4e2a\n        self.save_file_manager.show('/')  # output manager to the screen\n        self.save_manager_open = True\n        logging.info(\"[file manager save  ] save file open!\")\n\n\n    def save_select_path(self, path):\n        '''\n        It will be called when you click on the file name\n        or the catalog selection button.\n\n        :type path: str;\n        :param path: path to the selected directory or file;\n        '''\n        logging.info(\"[file manager save  ] go in save path\")\n        self.save_exit_manager()\n        logging.info(\"[file manager save  ] go in save path close\")\n\n        self.save_exit_manager()\n        toast(path)\n\n        # path \u5c31\u662f\u6211\u4eec\u8bc6\u522b\u7684\u56fe\u50cf\u7684\u8def\u5f84\n        logging.info(\"[file manager save  ] go in save path\")\n\n        if (os.path.isdir(path)) and (not self.save_image is None):\n            save_file_name = str(time.time())+\"_\"+self.cartoon_class+\".jpg\"\n            cv2.imwrite(os.path.join(path,save_file_name),self.save_image)\n            toast(\"Cartoon Saved: {}\".format(path))\n            self.ids.save_log_label.text = \"\u4e8c\u6b21\u5143\u56fe\u7247\u4fdd\u5b58\u5728\uff1a{}\".format(path)\n            logging.info(\"[file manager save  ] save success!\")\n        elif self.save_image is None:\n            toast(\"No cartoon image to save!\")\n            self.ids.save_log_label.text = \"\u4fdd\u5b58\u5931\u8d25,\u4e0d\u5b58\u5728\u5f85\u4fdd\u5b58\u7684\u4e8c\u6b21\u5143\u56fe\u7247!\"\n        else:\n            toast(\"The path to save is wrongful!\")\n            self.ids.save_log_label.text = \"\u4fdd\u5b58\u5931\u8d25,\u4fdd\u5b58\u8def\u5f84\u662f\u975e\u6cd5\u8def\u5f84\uff01\"\n\n        logging.info(\"[file manager save  ] save finish\")\n\n\n    def save_exit_manager(self, *args):\n        '''\n        \u9000\u51faFile manager\n        '''\n        self.save_manager_open = False\n        self.save_file_manager.close()\n\n\n\n\n\nclass CartoonApp(MDApp):\n\n\n    def build(self):\n        self.icon=\"./static/icon.png\"\n        self.title=\"\u57fa\u4e8eGAN\u7684\u4e8c\u6b21\u5143\u98ce\u683c\u8f6c\u6362App\"\n        self.theme_cls.primary_palette = \"Purple\"\n\n        mytoolbar = Builder.load_file(\"./mytoolbar.kv\")\n\n\n        return mytoolbar\n\n\n\nif __name__ == \"__main__\":\n\n    CartoonApp().run()\n\n\n\n\n\u6700\u540e\u6211\u4eec\u5728\nmytoolbar.kv\n\u4e2d\u5b9e\u73b0\u4fdd\u5b58\u7684Butoon\u63a7\u4ef6\uff0c\u8be5\u63a7\u4ef6\u5728DOWNLOAD\u9875\u9762\u5b9e\u73b0\n\n\n\n#: import C kivy.utils.get_hex_from_color\n\nMyToolBar:\n    BoxLayout:\n        orientation:'vertical'\n\n        MDToolbar:\n            title: 'CartoonGAN' \n            md_bg_color: 0.12, 0.56, 1, 1\n            specific_text_color: app.theme_cls.accent_color\n            icon:\"image-search-outline\"\n            left_action_items: [[\"menu\", lambda x: root.show_info_dialog()]]  #<----------------------None\n            right_action_items: [[\"dots-vertical\", lambda x: root.show_grid_bottom_sheet()],[\"clock\", lambda x: root.show_example_date_picker()]]     #<------------------------------------None\n\n\n        MDBottomNavigation:\n            panel_color: 0.12, 0.56, 1, 1\n\n            # Page Index\n            MDBottomNavigationItem:\n                name: 'screen 1'\n                text: 'Home'\n                icon: 'home'\n\n                canvas:\n                    Color:\n                        rgba: [1,1,1,1]\n                    Rectangle:\n                        size: root.size\n                        pos: root.pos\n                        source: \"./static/index.png\"\n\n                MDLabel:\n                    text: '[ref=\"click\"][b]\\u57fa\\u4e8eGAN\\u7684\\u4e8c\\u6b21\\u5143\\u98ce\\u683c\\u8f6c\\u6362App[/b][/ref]'\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 30\n                    pos_hint: {\"center_x\":0.5,\"y\":0.2}\n                    markup: True\n                    halign: \"center\"\n                    theme_text_color: \"Custom\"\n                    text_color: 1, 1, 0, 1\n\n\n                MDLabel:\n                    text: '[b]v1.0.0[/b]'\n\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 20\n                    pos_hint: {\"center_x\":0.5,\"y\":0.1}\n                    markup: True\n                    halign: \"center\"\n                    theme_text_color: \"Custom\"\n                    text_color: 1, 1, 0, 1\n\n                MDLabel:\n                    text: '[b]\\u5f00\\u53d1\\u8005\\uff1a\\u0020\\u5f90\\u9759[/b]'\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 20\n                    pos_hint: {\"center_x\":0.5,\"y\":0.05}\n                    markup: True\n                    halign: \"center\"\n                    theme_text_color: \"Custom\"\n                    text_color: 1, 1, 0, 1\n\n            # Page UpLoad\n\n            MDBottomNavigationItem:\n                name: 'screen 2'\n                text: 'UploadImage'\n                icon: 'cloud-upload'\n                font_name: './static/DroidSansFallback.ttf'\n\n\n                MDLabel:\n                    id: cartoongan_tops\n                    text: '\\u0043\\u0061\\u0072\\u0074\\u006f\\u006f\\u006e\\u0047\\u0041\\u004e\\u0028\\u0043\\u0056\\u0050\\u0052\\u0032\\u0030\\u0031\\u0038\\u0029\\uff0c\\u5b83\\u53ef\\u4ee5\\u7528\\u771f\\u5b9e\\u666f\\u7269\\u7684\\u7167\\u7247\\u4f5c\\u4e3a\\u6e90\\u56fe\\u7247\\uff0c\\u751f\\u6210\\u4efb\\u610f\\u98ce\\u683c\\u7684\\u6f2b\\u753b\\u002c\\u4f5c\\u8005\\u672a\\u5f00\\u6e90\\u4ee3\\u7801\\uff0c\\u53ea\\u7ed9\\u51fa\\u4e86\\u56db\\u4e2a\\u8bad\\u7ec3\\u597d\\u7684\\u6a21\\u578b\\u0028\\u5bab\\u5d0e\\u9a8f\\u002c\\u0020\\u7ec6\\u7530\\u5b88\\u002c\\u0020\\u76d7\\u68a6\\u4fa6\\u63a2\\u002c\\u0020\\u65b0\\u6d77\\u8bda\\u0029\\u3002'\n                    halign: 'center'\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 24\n\n                Image:\n                    id: cartoon_image\n\n\n                MDRectangleFlatButton:\n                    text: \"\\u52a0\\u8f7d\\u56fe\\u50cf\\u5e76\\u505a\\u4e8c\\u6b21\\u5143\\u8f6c\\u6362\"\n                    pos_hint: {\"center_x\": .5}\n                    size_hint: 1, 0.05\n                    text_color: 0.5, 0, 0.5, 1\n                    font_name: './static/DroidSansFallback.ttf'\n                    on_release: root.file_manager_open()\n\n\n            # Page DownLoad\n\n            MDBottomNavigationItem:\n                name: 'screen 3'\n                text: 'Download'\n                icon: 'folder-download'\n\n\n                MDLabel:\n                    id: save_log_label\n                    text: '\\u4fdd\\u5b58\\u98ce\\u683c\\u8fc1\\u79fb\\u540e\\u7684\\u4e8c\\u6b21\\u5143\\u56fe\\u7247'\n                    halign: 'center'\n                    font_name: './static/DroidSansFallback.ttf'\n\n                MDRoundFlatIconButton:\n                    text: \"Open manager\"\n                    icon: \"folder\"\n                    pos_hint: {'center_x': .5, 'center_y': .6}\n                    on_release: root.save_file_manager_open()\n\n\n\n\n\u5176\u6548\u679c\u4e3a\uff1a\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n6.\u9879\u76ee\u603b\u7ed3\n\n\n\u5173\u4e8e\u8be5\u9879\u76ee\u7684\u5b89\u5353\u6253\u5305\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u7b2c9\u7ae0\u4e2d\u7ed9\u51fa\u8be6\u7ec6\u7684\u6253\u5305\u6b65\u9aa4\uff0c\u6211\u4eec\u63a8\u8350\u4f7f\u7528buildozer\u5bf9\u8be5\u9879\u76ee\u8fdb\u884c\u5b89\u5353\u6253\u5305\u3002\u5173\u4e8e\u6253\u5305\u73af\u5883\u7684\u642d\u5efa\u53ef\u4ee5\u53c2\u8003buildozer\u5b98\u7f51\uff0c\u6216\u8bfb\u8005\u6709\u9700\u8981\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u5b8c\u6574\u7684\u6253\u5305\u73af\u5883\u7684\u865a\u62df\u673a\u955c\u50cf\u3002\u672c\u8282\u4e2d\u6211\u4eec\u4f1a\u5728\u5b89\u5353\u865a\u62df\u673a\u548c\u771f\u5b9e\u7684\u5b89\u5353\u624b\u673a\u4e0a\u5c55\u793a\u6253\u5305\u597d\u7684\u57fa\u4e8e\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\u7684\u4e00\u952e\u73b0\u5b9e\u8f6c\u6362\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fbApp\u3002\n\n\n\n\n\u5b89\u5353\u865a\u62df\u673a\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\u5b89\u5353\u624b\u673a",
            "title": "\u7b2c\u4e94\u7ae0 \u57fa\u4e8e\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\u7684\u4e00\u952e\u73b0\u5b9e\u8f6c\u6362\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fb\u9879\u76ee(\u57fa\u4e8eKivymd)"
        },
        {
            "location": "/chapter5/#gankivymd",
            "text": "",
            "title": "\u7b2c\u4e94\u7ae0 \u57fa\u4e8e\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\u7684\u4e00\u952e\u73b0\u5b9e\u8f6c\u6362\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fb\u9879\u76ee(\u57fa\u4e8eKivymd)"
        },
        {
            "location": "/chapter5/#1cartoonganflask",
            "text": "\u4e3a\u4e86\u540e\u671f\u5b89\u5353\u6253\u5305\u7684\u65b9\u4fbf\uff0c\u6211\u4eec\u5c06CartoonGAN\u7f51\u7edc\u901a\u8fc7WebAPI\u7684\u65b9\u5f0f\u90e8\u7f72\uff0c\u8fd9\u91cc\u6211\u4eec\u91c7\u7528Flask\u53bb\u90e8\u7f72\u6211\u4eec\u7684CartoonGAN,\u521b\u5efa flask_app.py \u5176\u4ee3\u7801\u5982\u4e0b\uff1a  # encoding: utf-8\n\n'''\ndataxujing\n2020-07-04\n\n\u57fa\u4e8eCartoonGAN\u7684\u73b0\u5b9e\u8fc1\u79fb\u4e8c\u6b21\u5143\u52a8\u753b\u98ce\u683c\u7684\u98ce\u683c\u8fc1\u79fb\u670d\u52a1\n\n\u57fa\u4e8eFlask,Pytorch\n\n\n'''\n\nimport os\nfrom io import BytesIO\nimport numpy as np\nimport time\nimport cv2\nfrom PIL import Image\n\nimport base64\nimport json\nimport flask\nfrom flask import request, Flask\n\nimport torch\nimport torchvision.transforms as transforms\nfrom torch.autograd import Variable\nimport torchvision.utils as vutils\nfrom network.Transformer import Transformer\n\napp = Flask(__name__)\n\n# load pretrained model\nmodel = Transformer()\n\nmodel_dict = {}\n# [\u5bab\u5d0e\u9a8f, \u7ec6\u7530\u5b88, \u76d7\u68a6\u4fa6\u63a2\uff08\u65e5\u672c\u52a8\u753b\u540d\uff09, \u65b0\u6d77\u8bda]\nfor model_name in [\"Hayao\",\"Hosoda\",\"Paprika\",\"Shinkai\"]:\n    # globals()['model_'+model_name] = Transformer().load_state_dict(torch.load(os.path.join(\"./static/model\", model_name + '_net_G_float.pth'))).eval()\n\n    globals()['model_'+model_name] = Transformer()\n    globals()['model_'+model_name].load_state_dict(torch.load(os.path.join(\"./static/model\", model_name + '_net_G_float.pth')))\n\n# \u6d4b\u8bd5\u63a5\u53e3\n@app.route(\"/test/<name>\",methods=[\"GET\",\"POST\"])\ndef test(name):\n    return \"Test Get: {}\".format(name)\n\n\n# model_name example: model_Hayao\n@app.route(\"/predict/<model_name>\", methods=[\"GET\",\"POST\"])\ndef transfor_cartoon(model_name):\n\n    try:\n        #\u89e3\u6790\u56fe\u7247\u6570\u636e\n        image_b64 = base64.b64decode(str(request.form['image']))\n        image_data = np.fromstring(image_b64, np.uint8)\n        # image_data = cv2.imdecode(image_data, cv2.IMREAD_COLOR)\n        # cv2.imwrite('/root/01.png', image_data)\n\n        input_image = Image.open(BytesIO(image_data)).convert('RGB')\n\n        # \u5f00\u59cb\u8bc6\u522b\n        model = globals()[model_name].eval()\n        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n\n        # \u56fe\u50cf\u5904\u7406\n        h = input_image.size[0]\n        w = input_image.size[1]\n        ratio = h *1.0 / w\n        # \u5c06\u957f\u8fb9\u7f29\u5c0f\u5230450\n        if ratio > 1:\n            h = 450\n            w = int(h*1.0/ratio)\n        else:\n            w = 450\n            h = int(w * ratio)\n        input_image = input_image.resize((h, w), Image.BICUBIC)\n        input_image = np.asarray(input_image)\n        # RGB -> BGR\n        input_image = input_image[:, :, [2, 1, 0]]\n        input_image = transforms.ToTensor()(input_image).unsqueeze(0)\n        # preprocess, (-1, 1)\n        input_image = -1 + 2 * input_image \n\n        if torch.cuda.is_available():\n            model.cuda()\n            input_image = Variable(input_image).cuda()\n        else:\n            model.float()\n            input_image = Variable(input_image).float()\n\n        # forward\n        output_image = model(input_image)\n        output_image = output_image[0]\n        # BGR -> RGB\n        output_image = output_image[[2, 1, 0], :, :]\n        # deprocess, (0, 1)\n        output_image = output_image.data.cpu().float() * 0.5 + 0.5\n        # save\n        # vutils.save_image(output_image, os.path.join(opt.output_dir, files[:-4] + '_' + opt.style + '.jpg'))\n\n        # \u53bb\u6389batch size\u7ef4\u5ea6\n        output_image = output_image.squeeze()\n        # \u4ece[0,1]\u8f6c\u5316\u4e3a[0,255]\uff0c\u518d\u4eceCHW\u8f6c\u4e3aHWC\uff0c\u6700\u540e\u8f6c\u4e3acv2\n        output_image = output_image.mul_(255).add_(0.5).clamp_(0, 255).permute(1, 2, 0).type(torch.uint8).numpy()\n        # RGB\u8f6cBRG\n        output_image_cv2 = cv2.cvtColor(output_image, cv2.COLOR_RGB2BGR)\n\n        # opencv \u8f6c base64\n        image = cv2.imencode('.jpg', output_image_cv2)[1]\n        base64_data = str(base64.b64encode(image))[2:-1]\n\n        res = {\"pred\":base64_data,\"code\":\"200\"}\n\n    except Exception as e:\n        print(str(e))\n        res = {'pred': \"we loss\", 'code': \"404\"}\n\n    return json.dumps(res)\n\n\nif __name__ == \"__main__\":\n    app.run(debug=True,host=\"0.0.0.0\",port=8080)  \u6d4b\u8bd5\u6211\u4eec\u7684Flask WebAPI,\u521b\u5efa client_test.py  \n'''\ndataxujing\n2020-07-04\n\n\u8bf7\u6c42Flask CartoonGAN\u670d\u52a1\u7684\u6d4b\u8bd5\u4ee3\u7801\n\u7528\u6765\u9a8c\u8bc1Web\u670d\u52a1\u7684\u6b63\u5e38\n'''\n\n\nimport requests\nimport base64\nimport json\nfrom PIL import Image\nimport cv2\nimport numpy as np\n\n#\u5c06\u56fe\u7247\u6570\u636e\u8f6c\u6210base64\u683c\u5f0f\nwith open('./static/test_image/test.jpg', 'rb') as f:\n    img = base64.b64encode(f.read()).decode()\nimage = []\nimage.append(img)\nres = {\"image\":image}\n\n#\u8bbf\u95ee\u670d\u52a1\n# model: \"model_Hayao\"(\u5bab\u5d0e\u9a8f),\"model_Hosoda\",\"model_Paprika\",\"model_Shinkai\"\nurl = \"http://10.10.15.106:8080/predict/model_Hayao\"\nheaders = {'user-agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36'}\nres_back = requests.post(url,data=res,headers=headers, timeout=200)\n\n\n# save cartoon image\nstate = json.loads(res_back.text).get('code')\nif state == \"404\":\n    print(\"we loss\")\nelse:\n    img_bs64 = json.loads(res_back.text).get('pred')\n\n    imgString = base64.b64decode(img_bs64.encode(\"ascii\"))\n    nparr = np.fromstring(imgString,np.uint8)  \n    image = cv2.imdecode(nparr,cv2.IMREAD_COLOR)\n\n    cv2.imwrite(\"test_res.jpg\",image)  \u6d4b\u8bd5\u7ed3\u679c\u5982\u4e0b\u56fe\uff1a  \u539f\u56fe\uff1a       \u98ce\u683c\u8f6c\u5316\u540e\u7684Cartoon:",
            "title": "1.CartoonGAN\u7684Flask\u90e8\u7f72\u4e0e\u6d4b\u8bd5"
        },
        {
            "location": "/chapter5/#2kivymd",
            "text": "\u9996\u5148\u521b\u5efa main.py  \n\n'''\nxujing\n2020-06-30\n\n\u57fa\u4e8ekivymd\u548cpytorch\u7684\u4e8c\u6b21\u5143\u98ce\u683c\u8f6c\u6362app\n\n'''\n\nfrom kivy.core.window import Window\nfrom kivy.lang import Builder\nfrom kivy.uix.boxlayout import BoxLayout\nfrom kivy.uix.image import Image\nfrom kivy.properties import ObjectProperty\n\nfrom kivymd.app import MDApp\nfrom kivymd.uix.dialog import MDDialog\nfrom kivymd.uix.button import MDFlatButton\nfrom kivymd.uix.picker import MDDatePicker\nfrom kivymd.uix.menu import MDDropdownMenu, RightContent\n\nfrom kivymd.toast import toast\nfrom kivymd.uix.bottomsheet import MDGridBottomSheet\n\nfrom kivymd.uix.filemanager import MDFileManager\nfrom kivy.graphics.texture import Texture\n\nimport requests\nimport base64\nimport json\nimport cv2\nimport numpy as np\nimport time\nimport os\nimport logging\n\n\n\nclass MyToolBar(BoxLayout):\n\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n\n\nclass CartoonApp(MDApp):\n\n\n    def build(self):\n        self.icon=\"./static/icon.png\"\n        self.title=\"\u57fa\u4e8eGAN\u7684\u4e8c\u6b21\u5143\u98ce\u683c\u8f6c\u6362App\"\n        self.theme_cls.primary_palette = \"Purple\"\n\n        mytoolbar = Builder.load_file(\"./mytoolbar.kv\")\n\n\n        return mytoolbar\n\n\n\nif __name__ == \"__main__\":\n\n    CartoonApp().run()  \u521b\u5efa  mytoolbar.kv \u7684\u6574\u4f53UI\u754c\u9762  #: import C kivy.utils.get_hex_from_color\n\nMyToolBar:\n    BoxLayout:\n        orientation:'vertical'\n\n        MDToolbar:\n            title: 'CartoonGAN' \n            md_bg_color: 0.12, 0.56, 1, 1\n            specific_text_color: app.theme_cls.accent_color\n            icon:\"image-search-outline\"\n            left_action_items: [[\"menu\", lambda x: None]]\n            right_action_items: [[\"dots-vertical\", lambda x: None],[\"clock\", lambda x:None]]\n\n\n        MDBottomNavigation:\n            panel_color: 0.12, 0.56, 1, 1\n            MDBottomNavigationItem:\n                name: 'screen 1'\n                text: 'Home'\n                icon: 'home'\n\n                canvas:\n                    Color:\n                        rgba: [1,1,1,1]\n                    Rectangle:\n                        size: root.size\n                        pos: root.pos\n                        source: \"./static/index.png\"\n\n            MDBottomNavigationItem:\n                name: 'screen 2'\n                text: 'UploadImage'\n                icon: 'cloud-upload'\n                font_name: './static/DroidSansFallback.ttf'\n\n\n            MDBottomNavigationItem:\n                name: 'screen 3'\n                text: 'Download'\n                icon: 'folder-download'  \u8fd0\u884c\u540e\u7684\u6574\u4f53\u754c\u9762\u6548\u679c\u4e3a:",
            "title": "2.kivymd\u5b9a\u4e49\u4e3b\u754c\u9762"
        },
        {
            "location": "/chapter5/#3home",
            "text": "\u4fee\u6539 mytoolbar.kv  \u589e\u52a0Label  #: import C kivy.utils.get_hex_from_color\n\nMyToolBar:\n    BoxLayout:\n        orientation:'vertical'\n\n        MDToolbar:\n            title: 'CartoonGAN' \n            md_bg_color: 0.12, 0.56, 1, 1\n            specific_text_color: app.theme_cls.accent_color\n            icon:\"image-search-outline\"\n            left_action_items: [[\"menu\", lambda x: None]]\n            right_action_items: [[\"dots-vertical\", lambda x: None],[\"clock\", lambda x:None]]\n\n\n        MDBottomNavigation:\n            panel_color: 0.12, 0.56, 1, 1\n\n            # Page Index\n            MDBottomNavigationItem:\n                name: 'screen 1'\n                text: 'Home'\n                icon: 'home'\n\n                canvas:\n                    Color:\n                        rgba: [1,1,1,1]\n                    Rectangle:\n                        size: root.size\n                        pos: root.pos\n                        source: \"./static/index.png\"\n\n                MDLabel:\n                    text: '[ref=\"click\"][b]\\u57fa\\u4e8eGAN\\u7684\\u4e8c\\u6b21\\u5143\\u98ce\\u683c\\u8f6c\\u6362App[/b][/ref]'\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 30\n                    pos_hint: {\"center_x\":0.5,\"y\":0.2}\n                    markup: True\n                    halign: \"center\"\n                    theme_text_color: \"Custom\"\n                    text_color: 1, 1, 0, 1\n\n\n                MDLabel:\n                    text: '[b]v1.0.0[/b]'\n\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 20\n                    pos_hint: {\"center_x\":0.5,\"y\":0.1}\n                    markup: True\n                    halign: \"center\"\n                    theme_text_color: \"Custom\"\n                    text_color: 1, 1, 0, 1\n\n                MDLabel:\n                    text: '[b]\\u5f00\\u53d1\\u8005\\uff1a\\u0020\\u5f90\\u9759[/b]'\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 20\n                    pos_hint: {\"center_x\":0.5,\"y\":0.05}\n                    markup: True\n                    halign: \"center\"\n                    theme_text_color: \"Custom\"\n                    text_color: 1, 1, 0, 1\n\n            # Page UpLoad\n\n            MDBottomNavigationItem:\n                name: 'screen 2'\n                text: 'UploadImage'\n                icon: 'cloud-upload'\n                font_name: './static/DroidSansFallback.ttf'\n\n\n            # Page DownLoad\n\n            MDBottomNavigationItem:\n                name: 'screen 3'\n                text: 'Download'\n                icon: 'folder-download'",
            "title": "3.Home\u754c\u9762\u7684\u5b9e\u73b0"
        },
        {
            "location": "/chapter5/#4uploadimage",
            "text": "UPLOADIMAGE\u9875\u9762\u662f\u6211\u4eec\u57fa\u4e8e\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\u7684\u4e00\u952e\u73b0\u5b9e\u8f6c\u6362\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fb\u9879\u76ee\u7684\u6838\u5fc3\u529f\u80fd\uff0c\u4e3b\u8981\u5305\u62ec\uff1a   \u4e00\u4e2a\u529f\u80fd\u8bf4\u660e\u5f39\u7a97\uff0c\u5f39\u7a97\u663e\u793a\u4e86\u6211\u4eec\u9879\u76ee\u6700\u6838\u5fc3\u7684\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\u7684Paper\u548c\u8d44\u6e90  \u4e00\u4e2a\u5f39\u7a97Button\uff0c\u4e3b\u8981\u7528\u4e8e\u9009\u62e9\u4e0d\u540c\u7684\u98ce\u683c\u8f6c\u5316\uff0c\u76ee\u524d\u652f\u6301\uff1a \u5bab\u5d0e\u9a8f, \u7ec6\u7530\u5b88, \u76d7\u68a6\u4fa6\u63a2\uff08\u65e5\u672c\u52a8\u753b\u540d\uff09, \u65b0\u6d77\u8bda\u7684\u52a8\u753b\u98ce\u683c\u8f6c\u5316,\u540c\u65f6\u5b9e\u73b0\u4e00\u4e2a\u65e5\u5386\u663e\u793a\u7684\u5f39\u7a97\u529f\u80fd  \u4e00\u4e2a\u6587\u4ef6\u4e0a\u4f20\u529f\u80fd\uff0c\u4e3b\u8981\u5b9e\u73b0\u5728\u624b\u673a\u6587\u4ef6\u4e2d\u4e0a\u4f20\u9009\u4e2d\u7684\u56fe\u50cf\u4ea4\u7ed9\u6211\u4eec\u7684Flask\u8bc6\u522b\u670d\u52a1\u8bc6\u522b\u8fdb\u884c\u98ce\u683c\u8f6c\u5316\uff0c\u8f6c\u5316\u8fc7\u7a0b\u4e2d\uff0cFlask\u670d\u52a1\u4f1a\u63a5\u6536\u5230\u4e0a\u4f20\u7684\u56fe\u7247\u548c\u5f39\u7a97Button\u9009\u62e9\u7684\u8f6c\u6362\u7c7b\u578b\uff0c\u540e\u53f0\u8c03\u7528\u4e0d\u540cGAN\u6a21\u578b\u8fdb\u884c\u8bc6\u522b  \u663e\u793a\u98ce\u683c\u8f6c\u5316\u540e\u7684\u56fe\u50cf\uff0c \u8be5\u529f\u80fd\u4e3b\u8981\u63a5\u6536\u5c06\u8f6c\u6362\u540e\u7684\u56fe\u50cf\u5e76\u663e\u793a\u5728\u754c\u9762   \u4e0b\u9762\u6211\u4eec\u5c06\u5728\u672c\u8282\u4e00\u4e00\u5b9e\u73b0\u4e0a\u8ff0\u529f\u80fd\u3002   \u9996\u5148\u6211\u4eec\u5b9e\u73b0\u5f39\u7a97\u529f\u80fd\uff0c\u6211\u4eec\u5728ToolBar\u7684\u6807\u9898\u680f\u5b9e\u73b0\u5f39\u7a97\uff0c\u9996\u5148\u6211\u4eec\u4fee\u6539 mytoolbar.kv \u589e\u52a0\u63a7\u4ef6\u7684\u4e8b\u4ef6\u51fd\u6570:   #: import C kivy.utils.get_hex_from_color\n\nMyToolBar:\n    BoxLayout:\n        orientation:'vertical'\n\n        MDToolbar:\n            title: 'CartoonGAN' \n            md_bg_color: 0.12, 0.56, 1, 1\n            specific_text_color: app.theme_cls.accent_color\n            icon:\"image-search-outline\"\n            left_action_items: [[\"menu\", lambda x: root.show_info_dialog()]]  #<----------------------None\n            right_action_items: [[\"dots-vertical\", lambda x: None],[\"clock\", lambda x:None]]\n\n\n        MDBottomNavigation:\n            panel_color: 0.12, 0.56, 1, 1\n\n            # Page Index\n            MDBottomNavigationItem:\n                name: 'screen 1'\n                text: 'Home'\n                icon: 'home'\n\n                canvas:\n                    Color:\n                        rgba: [1,1,1,1]\n                    Rectangle:\n                        size: root.size\n                        pos: root.pos\n                        source: \"./static/index.png\"\n\n                MDLabel:\n                    text: '[ref=\"click\"][b]\\u57fa\\u4e8eGAN\\u7684\\u4e8c\\u6b21\\u5143\\u98ce\\u683c\\u8f6c\\u6362App[/b][/ref]'\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 30\n                    pos_hint: {\"center_x\":0.5,\"y\":0.2}\n                    markup: True\n                    halign: \"center\"\n                    theme_text_color: \"Custom\"\n                    text_color: 1, 1, 0, 1\n\n\n                MDLabel:\n                    text: '[b]v1.0.0[/b]'\n\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 20\n                    pos_hint: {\"center_x\":0.5,\"y\":0.1}\n                    markup: True\n                    halign: \"center\"\n                    theme_text_color: \"Custom\"\n                    text_color: 1, 1, 0, 1\n\n                MDLabel:\n                    text: '[b]\\u5f00\\u53d1\\u8005\\uff1a\\u0020\\u5f90\\u9759[/b]'\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 20\n                    pos_hint: {\"center_x\":0.5,\"y\":0.05}\n                    markup: True\n                    halign: \"center\"\n                    theme_text_color: \"Custom\"\n                    text_color: 1, 1, 0, 1\n\n            # Page UpLoad\n\n            MDBottomNavigationItem:\n                name: 'screen 2'\n                text: 'UploadImage'\n                icon: 'cloud-upload'\n                font_name: './static/DroidSansFallback.ttf'\n\n\n            # Page DownLoad\n\n            MDBottomNavigationItem:\n                name: 'screen 3'\n                text: 'Download'\n                icon: 'folder-download'  \u6211\u4eec\u5728 main.py \u4e2d\u5b9a\u4e49 show_info_dialog() \u65b9\u6cd5  '''\nxujing\n2020-06-30\n\n\u57fa\u4e8ekivymd\u548cpytorch\u7684\u4e8c\u6b21\u5143\u98ce\u683c\u8f6c\u6362app\n\n'''\n\nfrom kivy.core.window import Window\nfrom kivy.lang import Builder\nfrom kivy.uix.boxlayout import BoxLayout\nfrom kivy.uix.image import Image\nfrom kivy.properties import ObjectProperty\n\nfrom kivymd.app import MDApp\nfrom kivymd.uix.dialog import MDDialog\nfrom kivymd.uix.button import MDFlatButton\nfrom kivymd.uix.picker import MDDatePicker\nfrom kivymd.uix.menu import MDDropdownMenu, RightContent\n\nfrom kivymd.toast import toast\nfrom kivymd.uix.bottomsheet import MDGridBottomSheet\n\nfrom kivymd.uix.filemanager import MDFileManager\nfrom kivy.graphics.texture import Texture\n\nimport requests\nimport base64\nimport json\nimport cv2\nimport numpy as np\nimport time\nimport os\nimport logging\n\n\nclass MyToolBar(BoxLayout):\n\n\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n        self.dialog = None  # \u5b9a\u4e49\u5f39\u7a97\u5168\u5c40\u5bf9\u8c61\n\n    # \u5728\u8fd9\u91cc\u5b9e\u4f8b\u5316\u4e86MDDialog\u7c7b\n    def show_alert_dialog(self):\n        if not self.dialog:\n            self.dialog = MDDialog(\n                title=\"CartoonGAN\",\n                text='''1.Paper:https://openaccess.thecvf.com/content_cvpr_2018/CameraReady/2205.pdf\\n 2.GitHub:https://github.com/Yijunmaverick/CartoonGAN-Test-Pytorch-Torch\\n3.Repo:https://github.com/znxlwm/pytorch-CartoonGAN''',\n                # buttons=[\n                #     MDFlatButton(\n                #         text=\"\u53d6\u6d88\",font_name=\"./static/DroidSansFallback.ttf\"\n                #     )],\n                radius=[20, 7, 20, 7],\n                type=\"custom\",\n            )\n        self.dialog.open()\n\n\n    # \u4e8b\u4ef6\u51fd\u6570\uff0c\u8c03\u7528\u4f1a\u6253\u5f00\u5f39\u7a97\n    # \u8fd9\u91cc\u6211\u4eec\u4e0d\u9700\u8981\u5b9a\u4e49\u5173\u95edclose()\u7684\u65b9\u6cd5\uff0c\u56e0\u4e3a\u5728\u89e6\u6478\u6216\u70b9\u51fb\u975e\u5f39\u7a97\u90e8\u5206\u4f1a\u81ea\u52a8\u5173\u95ed\u5f39\u7a97\n    def show_info_dialog(self):\n        self.show_alert_dialog()\n\n\n\n\n\nclass CartoonApp(MDApp):\n\n\n    def build(self):\n        self.icon=\"./static/icon.png\"\n        self.title=\"\u57fa\u4e8eGAN\u7684\u4e8c\u6b21\u5143\u98ce\u683c\u8f6c\u6362App\"\n        self.theme_cls.primary_palette = \"Purple\"\n\n        mytoolbar = Builder.load_file(\"./mytoolbar.kv\")\n\n\n        return mytoolbar\n\n\nif __name__ == \"__main__\":\n\n    CartoonApp().run()  \u5f39\u7a97\u7684\u8fd0\u884c\u6548\u679c\u5c55\u793a\uff1a       \u9700\u8981\u6ce8\u610f\u7684\u662f\u76ee\u524dkivymd\u7684\u8be5\u5f39\u7a97\u529f\u80fd\u4e0d\u652f\u6301\u4e2d\u6587\u5185\u5bb9\u5c55\u793a\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u5e95\u5c42\u4ee3\u7801\u7684\u65b9\u5f0f\u4f7f\u5176\u652f\u6301\u4e2d\u6587\u663e\u793a\u3002   MDGridBottomSheet()\u5f39\u7a97Button\u7684\u5b9e\u73b0\u53ca\u65e5\u5386\u5f39\u7a97\u7684\u5b9e\u73b0   \u8be5\u529f\u80fd\u7684\u5b9e\u73b0\u4ecd\u7136\u5728ToolBar\u4e0a\u8fdb\u884c\uff0c\u9996\u5148\u6211\u4eec\u4fee\u6539 mytoolbar.kv \u6dfb\u52a0\u4e8b\u4ef6\u51fd\u6570\u7684\u8c03\u7528  \n#: import C kivy.utils.get_hex_from_color\n\nMyToolBar:\n    BoxLayout:\n        orientation:'vertical'\n\n        MDToolbar:\n            title: 'CartoonGAN' \n            md_bg_color: 0.12, 0.56, 1, 1\n            specific_text_color: app.theme_cls.accent_color\n            icon:\"image-search-outline\"\n            left_action_items: [[\"menu\", lambda x: root.show_info_dialog()]]  #<----------------------None\n            right_action_items: [[\"dots-vertical\", lambda x: root.show_grid_bottom_sheet()],[\"clock\", lambda x: root.show_example_date_picker()]]     #<------------------------------------None\n\n\n        MDBottomNavigation:\n            panel_color: 0.12, 0.56, 1, 1\n\n            # Page Index\n            MDBottomNavigationItem:\n                name: 'screen 1'\n                text: 'Home'\n                icon: 'home'\n\n                canvas:\n                    Color:\n                        rgba: [1,1,1,1]\n                    Rectangle:\n                        size: root.size\n                        pos: root.pos\n                        source: \"./static/index.png\"\n\n                MDLabel:\n                    text: '[ref=\"click\"][b]\\u57fa\\u4e8eGAN\\u7684\\u4e8c\\u6b21\\u5143\\u98ce\\u683c\\u8f6c\\u6362App[/b][/ref]'\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 30\n                    pos_hint: {\"center_x\":0.5,\"y\":0.2}\n                    markup: True\n                    halign: \"center\"\n                    theme_text_color: \"Custom\"\n                    text_color: 1, 1, 0, 1\n\n\n                MDLabel:\n                    text: '[b]v1.0.0[/b]'\n\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 20\n                    pos_hint: {\"center_x\":0.5,\"y\":0.1}\n                    markup: True\n                    halign: \"center\"\n                    theme_text_color: \"Custom\"\n                    text_color: 1, 1, 0, 1\n\n                MDLabel:\n                    text: '[b]\\u5f00\\u53d1\\u8005\\uff1a\\u0020\\u5f90\\u9759[/b]'\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 20\n                    pos_hint: {\"center_x\":0.5,\"y\":0.05}\n                    markup: True\n                    halign: \"center\"\n                    theme_text_color: \"Custom\"\n                    text_color: 1, 1, 0, 1\n\n            # Page UpLoad\n\n            MDBottomNavigationItem:\n                name: 'screen 2'\n                text: 'UploadImage'\n                icon: 'cloud-upload'\n                font_name: './static/DroidSansFallback.ttf'\n\n\n            # Page DownLoad\n\n            MDBottomNavigationItem:\n                name: 'screen 3'\n                text: 'Download'\n                icon: 'folder-download'  \u6211\u4eec\u5728 main.py \u4e2d\u5b9e\u73b0 how_grid_bottom_sheet() \u548c show_example_date_picker() \u65b9\u6cd5  \n\n'''\nxujing\n2020-06-30\n\n\u57fa\u4e8ekivymd\u548cpytorch\u7684\u4e8c\u6b21\u5143\u98ce\u683c\u8f6c\u6362app\n\n'''\n\nfrom kivy.core.window import Window\nfrom kivy.lang import Builder\nfrom kivy.uix.boxlayout import BoxLayout\nfrom kivy.uix.image import Image\nfrom kivy.properties import ObjectProperty\n\nfrom kivymd.app import MDApp\nfrom kivymd.uix.dialog import MDDialog\nfrom kivymd.uix.button import MDFlatButton\nfrom kivymd.uix.picker import MDDatePicker\nfrom kivymd.uix.menu import MDDropdownMenu, RightContent\n\nfrom kivymd.toast import toast\nfrom kivymd.uix.bottomsheet import MDGridBottomSheet\n\nfrom kivymd.uix.filemanager import MDFileManager\nfrom kivy.graphics.texture import Texture\n\nimport requests\nimport base64\nimport json\nimport cv2\nimport numpy as np\nimport time\nimport os\nimport logging\n\n\n\nclass MyToolBar(BoxLayout):\n    previous_date = ObjectProperty()  # \u63a7\u4ef6\u6dfb\u52a0 \u5bf9\u8c61\u5c5e\u6027\uff08\u65e5\u5386\u5bf9\u8c61\uff09\n\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n        self.dialog = None\n        self.cartoon_class = \"model_Hayao\"  # \u9ed8\u8ba4\u8c03\u7528\u5bab\u5d0e\u9a8f\u7684\u753b\u98ce\n\n\n    def show_alert_dialog(self):\n        if not self.dialog:\n            self.dialog = MDDialog(\n                title=\"CartoonGAN\",\n                text='''1.Paper:https://openaccess.thecvf.com/content_cvpr_2018/CameraReady/2205.pdf\\n 2.GitHub:https://github.com/Yijunmaverick/CartoonGAN-Test-Pytorch-Torch\\n3.Repo:https://github.com/znxlwm/pytorch-CartoonGAN''',\n                # buttons=[\n                #     MDFlatButton(\n                #         text=\"\u53d6\u6d88\",font_name=\"./static/DroidSansFallback.ttf\"\n                #     )],\n                radius=[20, 7, 20, 7],\n                type=\"custom\",\n            )\n        self.dialog.open()\n\n    def show_info_dialog(self):\n        self.show_alert_dialog()\n\n    # \u663e\u793a\u65e5\u5386\u8c03\u7528MDDatePicker(),\u4e8b\u4ef6\u51fd\u6570\n    def show_example_date_picker(self, *args):\n\n        pd_ = self.previous_date\n        try:\n            MDDatePicker(self.set_previous_date,\n                         pd_.year, pd_.month, pd_.day).open()\n        except AttributeError:\n            MDDatePicker(self.set_previous_date).open()\n\n\n    def set_previous_date(self, date_obj):\n        self.previous_date = date_obj\n\n\n    # MDGridBottomSheet() \u4e8b\u4ef6\u7684\u5b9e\u73b0\n    # button sheet, menu \u7684\u9690\u85cf\u7684button,\u4e3b\u8981\u7528\u4e8e\u9009\u62e9\u52a8\u753b\u7684\u753b\u98ce\n    def callback_for_menu_items(self, *args):\n        toast(args[0])\n        self.cartoon_class = \"model_\" + args[0]\n        # print(self.cartoon_class)\n\n    def show_grid_bottom_sheet(self):\n\n        bottom_sheet_menu = MDGridBottomSheet()\n        # \"Hayao\",\"Hosoda\",\"Paprika\",\"Shinkai\"\n        data = {\n            \"Hayao\": \"washing-machine\",\n            \"Hosoda\": \"baby-carriage\",\n            \"Paprika\": \"barcode-scan\",\n            \"Shinkai\": \"cake\",\n        }\n        for item in data.items():\n            bottom_sheet_menu.add_item(\n                item[0],\n                lambda x, y=item[0]: self.callback_for_menu_items(y),\n                icon_src=item[1],\n\n            )\n        bottom_sheet_menu.open()\n\n\n\nclass CartoonApp(MDApp):\n\n\n    def build(self):\n        self.icon=\"./static/icon.png\"\n        self.title=\"\u57fa\u4e8eGAN\u7684\u4e8c\u6b21\u5143\u98ce\u683c\u8f6c\u6362App\"\n        self.theme_cls.primary_palette = \"Purple\"\n\n        mytoolbar = Builder.load_file(\"./mytoolbar.kv\")\n\n\n        return mytoolbar\n\n\n\nif __name__ == \"__main__\":\n\n    CartoonApp().run()  \u5b9e\u73b0\u6548\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff1a                  \u6587\u4ef6\u7684\u4e0a\u4f20\u8bc6\u522b\u529f\u80fd\u5b9e\u73b0\u8bc6\u522b\u548c\u663e\u793a   \u672c\u8282\u6211\u4eec\u5b9e\u73b0\u901a\u8fc7\u6587\u4ef6\u7ba1\u7406\uff0c\u4e0a\u4f20\u624b\u673a\u672c\u5730\u7684\u56fe\u7247\u5230\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u7684Flask Web\u8bc6\u522b\u670d\u52a1\uff0c\u5e76\u63a5\u6536\u8bc6\u522b\u7ed3\u679c  \u9996\u5148\u6211\u4eec\u5728 main.py \u4e2d\u5b9a\u4e49\u6587\u4ef6\u7ba1\u7406\uff0c\u5b9e\u73b0\u4e0a\u4f20\u548c\u8bc6\u522b\u7684\u529f\u80fd  \n\n'''\nxujing\n2020-06-30\n\n\u57fa\u4e8ekivymd\u548cpytorch\u7684\u4e8c\u6b21\u5143\u98ce\u683c\u8f6c\u6362app\n\n'''\n\nfrom kivy.core.window import Window\nfrom kivy.lang import Builder\nfrom kivy.uix.boxlayout import BoxLayout\nfrom kivy.uix.image import Image\nfrom kivy.properties import ObjectProperty\n\nfrom kivymd.app import MDApp\nfrom kivymd.uix.dialog import MDDialog\nfrom kivymd.uix.button import MDFlatButton\nfrom kivymd.uix.picker import MDDatePicker\nfrom kivymd.uix.menu import MDDropdownMenu, RightContent\n\nfrom kivymd.toast import toast\nfrom kivymd.uix.bottomsheet import MDGridBottomSheet\n\nfrom kivymd.uix.filemanager import MDFileManager\nfrom kivy.graphics.texture import Texture\n\nimport requests\nimport base64\nimport json\nimport cv2\nimport numpy as np\nimport time\nimport os\nimport logging\n\n\nclass MyToolBar(BoxLayout):\n    previous_date = ObjectProperty()\n\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n        self.dialog = None\n        self.cartoon_class = \"model_Hayao\"\n\n\n        #file manager \n        self.manager_open = False\n        self.file_manager = MDFileManager(\n            exit_manager=self.exit_manager,\n            select_path=self.select_path,\n            previous=True,\n        )\n\n\n\n\n    def show_alert_dialog(self):\n        if not self.dialog:\n            self.dialog = MDDialog(\n                title=\"CartoonGAN\",\n                text='''1.Paper:https://openaccess.thecvf.com/content_cvpr_2018/CameraReady/2205.pdf\\n 2.GitHub:https://github.com/Yijunmaverick/CartoonGAN-Test-Pytorch-Torch\\n3.Repo:https://github.com/znxlwm/pytorch-CartoonGAN''',\n                # buttons=[\n                #     MDFlatButton(\n                #         text=\"\u53d6\u6d88\",font_name=\"./static/DroidSansFallback.ttf\"\n                #     )],\n                radius=[20, 7, 20, 7],\n                type=\"custom\",\n            )\n        self.dialog.open()\n\n\n    def show_example_date_picker(self, *args):\n\n        pd_ = self.previous_date\n        try:\n            MDDatePicker(self.set_previous_date,\n                         pd_.year, pd_.month, pd_.day).open()\n        except AttributeError:\n            MDDatePicker(self.set_previous_date).open()\n\n\n    def set_previous_date(self, date_obj):\n        self.previous_date = date_obj\n\n\n    def show_info_dialog(self):\n        self.show_alert_dialog()\n\n\n    # button sheet, menu \u7684\u9690\u85cf\u7684button,\u4e3b\u8981\u7528\u4e8e\u9009\u62e9\u52a8\u753b\u7684\u753b\u98ce\n    def callback_for_menu_items(self, *args):\n        toast(args[0])\n\n        self.cartoon_class = \"model_\" + args[0]\n        # print(self.cartoon_class)\n\n    def show_grid_bottom_sheet(self):\n\n        bottom_sheet_menu = MDGridBottomSheet()\n        # \"Hayao\",\"Hosoda\",\"Paprika\",\"Shinkai\"\n        data = {\n            \"Hayao\": \"washing-machine\",\n            \"Hosoda\": \"baby-carriage\",\n            \"Paprika\": \"barcode-scan\",\n            \"Shinkai\": \"cake\",\n        }\n        for item in data.items():\n            bottom_sheet_menu.add_item(\n                item[0],\n                lambda x, y=item[0]: self.callback_for_menu_items(y),\n                icon_src=item[1],\n\n            )\n        bottom_sheet_menu.open()\n\n\n    # file manager\n    def file_manager_open(self):\n        # button release event\n        # self.file_manager.show('/storage/emulated/0/kivy')  # Android \u66ff\u6362\u4e3a\u8fd9\u4e2a\n        self.file_manager.show('/')  # output manager to the screen\n        self.manager_open = True\n\n    def select_path(self, path):\n        '''\n        It will be called when you click on the file name\n        or the catalog selection button.\n\n        :type path: str;\n        :param path: path to the selected directory or file;\n        '''\n\n        self.exit_manager()\n        toast(path)\n        # path \u5c31\u662f\u6211\u4eec\u8bc6\u522b\u7684\u56fe\u50cf\u7684\u8def\u5f84\n\n        # \u5f00\u59cb\u8bf7\u6c42\u8bc6\u522b\n        is_image_file = lambda x: any(x.endswith(extension) for extension in [\".png\",\".jpg\",\".PNG\",\".JPG\",\".JPRG\",\".jpeg\"])\n        #\u5c06\u56fe\u7247\u6570\u636e\u8f6c\u6210base64\u683c\u5f0f\n\n        if is_image_file(path):\n            with open(path, 'rb') as f:\n                img = base64.b64encode(f.read()).decode()\n            image = []\n            image.append(img)\n            res = {\"image\":image}\n\n            try:\n                #\u8bbf\u95ee\u670d\u52a1\n                # model: \"model_Hayao\"(\u5bab\u5d0e\u9a8f),\"model_Hosoda\",\"model_Paprika\",\"model_Shinkai\"\n                url = \"http://XXXXXXX/predict/{}\".format( self.cartoon_class)\n                # \u6a21\u62dfHuawei Meta20\n                # http://www.fynas.com/ua\n                headers = {'user-agent': \"Mozilla/5.0 (Linux; U; Android 10; zh-CN; HMA-AL00 Build/HUAWEIHMA-AL00) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/57.0.2987.108 UCBrowser/12.7.9.1059 Mobile Safari/537.36\"}\n                res_back = requests.post(url,data=res,headers=headers, timeout=200)\n\n                # save cartoon image\n                state = json.loads(res_back.text).get('code')\n                if state != \"404\":\n                    img_bs64 = json.loads(res_back.text).get('pred')\n\n                    imgString = base64.b64decode(img_bs64.encode(\"ascii\"))\n                    # nparr = np.fromstring(imgString,np.uint8)  \n                    nparr = np.frombuffer(imgString,np.uint8)  \n                    image = cv2.imdecode(nparr,cv2.IMREAD_COLOR)\n                    self.save_image = image.copy()\n\n                    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGBA)\n                    img_buf = cv2.flip(image, 0)\n                    img_buf = img_buf.tostring()\n                    cartoon_texture = Texture.create(size=(image.shape[1], image.shape[0]), colorfmt='rgba') # android must rgba\n                    cartoon_texture.blit_buffer(img_buf, colorfmt='rgba', bufferfmt='ubyte')\n\n                    # display image from the texture\n                    self.ids.cartoongan_tops.text = \"\"\n                    self.ids.cartoon_image.texture = cartoon_texture\n            except Exception as e:\n                logging.info(\"[Internet Error   ] {}\".format(str(e)))\n                self.ids.cartoongan_tops.text = \"\"\n                self.ids.cartoongan_tops.text = \"\u7f51\u7edc\u9519\u8bef,\u8bf7\u91cd\u65b0\u5c1d\u8bd5...\"\n        else:\n            self.ids.cartoongan_tops.text = \"\"\n            self.ids.cartoongan_tops.text = \"\u60a8\u63d0\u4ea4\u7684\u662f\u975e\u56fe\u50cf\u6587\u4ef6,\u8bf7\u91cd\u65b0\u5c1d\u8bd5...\"\n\n\n\n    def exit_manager(self, *args):\n        '''\n        \u9000\u51faFile manager\n        '''\n        self.manager_open = False\n        self.file_manager.close()\n\n\n\nclass CartoonApp(MDApp):\n\n\n    def build(self):\n        self.icon=\"./static/icon.png\"\n        self.title=\"\u57fa\u4e8eGAN\u7684\u4e8c\u6b21\u5143\u98ce\u683c\u8f6c\u6362App\"\n        self.theme_cls.primary_palette = \"Purple\"\n\n        mytoolbar = Builder.load_file(\"./mytoolbar.kv\")\n\n\n        return mytoolbar\n\n\n\nif __name__ == \"__main__\":\n\n    CartoonApp().run()  \u5728 mytoolbar.kv \u4e2d\u5b9e\u73b0\u5bf9\u7528\u7684\u63a7\u4ef6  #: import C kivy.utils.get_hex_from_color\n\nMyToolBar:\n    BoxLayout:\n        orientation:'vertical'\n\n        MDToolbar:\n            title: 'CartoonGAN' \n            md_bg_color: 0.12, 0.56, 1, 1\n            specific_text_color: app.theme_cls.accent_color\n            icon:\"image-search-outline\"\n            left_action_items: [[\"menu\", lambda x: root.show_info_dialog()]]  #<----------------------None\n            right_action_items: [[\"dots-vertical\", lambda x: root.show_grid_bottom_sheet()],[\"clock\", lambda x: root.show_example_date_picker()]]     #<------------------------------------None\n\n\n        MDBottomNavigation:\n            panel_color: 0.12, 0.56, 1, 1\n\n            # Page Index\n            MDBottomNavigationItem:\n                name: 'screen 1'\n                text: 'Home'\n                icon: 'home'\n\n                canvas:\n                    Color:\n                        rgba: [1,1,1,1]\n                    Rectangle:\n                        size: root.size\n                        pos: root.pos\n                        source: \"./static/index.png\"\n\n                MDLabel:\n                    text: '[ref=\"click\"][b]\\u57fa\\u4e8eGAN\\u7684\\u4e8c\\u6b21\\u5143\\u98ce\\u683c\\u8f6c\\u6362App[/b][/ref]'\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 30\n                    pos_hint: {\"center_x\":0.5,\"y\":0.2}\n                    markup: True\n                    halign: \"center\"\n                    theme_text_color: \"Custom\"\n                    text_color: 1, 1, 0, 1\n\n\n                MDLabel:\n                    text: '[b]v1.0.0[/b]'\n\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 20\n                    pos_hint: {\"center_x\":0.5,\"y\":0.1}\n                    markup: True\n                    halign: \"center\"\n                    theme_text_color: \"Custom\"\n                    text_color: 1, 1, 0, 1\n\n                MDLabel:\n                    text: '[b]\\u5f00\\u53d1\\u8005\\uff1a\\u0020\\u5f90\\u9759[/b]'\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 20\n                    pos_hint: {\"center_x\":0.5,\"y\":0.05}\n                    markup: True\n                    halign: \"center\"\n                    theme_text_color: \"Custom\"\n                    text_color: 1, 1, 0, 1\n\n            # Page UpLoad\n\n            MDBottomNavigationItem:\n                name: 'screen 2'\n                text: 'UploadImage'\n                icon: 'cloud-upload'\n                font_name: './static/DroidSansFallback.ttf'\n\n\n                MDLabel:\n                    id: cartoongan_tops\n                    text: '\\u0043\\u0061\\u0072\\u0074\\u006f\\u006f\\u006e\\u0047\\u0041\\u004e\\u0028\\u0043\\u0056\\u0050\\u0052\\u0032\\u0030\\u0031\\u0038\\u0029\\uff0c\\u5b83\\u53ef\\u4ee5\\u7528\\u771f\\u5b9e\\u666f\\u7269\\u7684\\u7167\\u7247\\u4f5c\\u4e3a\\u6e90\\u56fe\\u7247\\uff0c\\u751f\\u6210\\u4efb\\u610f\\u98ce\\u683c\\u7684\\u6f2b\\u753b\\u002c\\u4f5c\\u8005\\u672a\\u5f00\\u6e90\\u4ee3\\u7801\\uff0c\\u53ea\\u7ed9\\u51fa\\u4e86\\u56db\\u4e2a\\u8bad\\u7ec3\\u597d\\u7684\\u6a21\\u578b\\u0028\\u5bab\\u5d0e\\u9a8f\\u002c\\u0020\\u7ec6\\u7530\\u5b88\\u002c\\u0020\\u76d7\\u68a6\\u4fa6\\u63a2\\u002c\\u0020\\u65b0\\u6d77\\u8bda\\u0029\\u3002'\n                    halign: 'center'\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 24\n\n                Image:\n                    id: cartoon_image\n\n\n                MDRectangleFlatButton:\n                    text: \"\\u52a0\\u8f7d\\u56fe\\u50cf\\u5e76\\u505a\\u4e8c\\u6b21\\u5143\\u8f6c\\u6362\"\n                    pos_hint: {\"center_x\": .5}\n                    size_hint: 1, 0.05\n                    text_color: 0.5, 0, 0.5, 1\n                    font_name: './static/DroidSansFallback.ttf'\n                    on_release: root.file_manager_open()\n\n\n            # Page DownLoad\n\n            MDBottomNavigationItem:\n                name: 'screen 3'\n                text: 'Download'\n                icon: 'folder-download'  \u8fd0\u884c\u6548\u679c\u5982\u4e0b\u56fe\uff1a            \u8fd9\u6837\u6211\u4eec\u5728\u8fd9\u4e00\u8282\u7684\u5185\u5bb9\u5c31\u5b8c\u5168\u5b9e\u73b0\u4e86\uff0c\u4e0b\u9762\u6211\u4eec\u5728\u5b89\u5353\u6a21\u62df\u5668\u4e0a\uff0c\u5c55\u793a\u4e00\u4e0b\u6211\u4eec\u5b9e\u73b0\u6574\u4e2a\u8bc6\u522b\u8fc7\u7a0b\u7684\u6548\u679c\u56fe\uff1a",
            "title": "4.UPLOADIMAGE\u529f\u80fd\u7684\u5b9e\u73b0"
        },
        {
            "location": "/chapter5/#5download",
            "text": "\u6700\u540e\u6211\u4eec\u5c06\u5b9e\u73b0\u98ce\u683c\u8f6c\u6362\u540e\u7684\u56fe\u7247\u7684\u4e0b\u8f7d\u548c\u4fdd\u5b58\uff0c\u8be5\u529f\u80fd\u5728DOWNLOAD\u9875\u9762\u5b9e\u73b0\uff0c\u8be5\u529f\u80fd\u540c\u65f6\u4f7f\u7528\u4e86\u6587\u4ef6\u7ba1\u7406\u9009\u62e9\u4fdd\u5b58\u7684\u8def\u5f84\uff0c\u5668\u65b9\u6cd5\u548c\u4e0a\u4e00\u8282\u4e2d\u7684\u9009\u62e9\u6587\u4ef6\u56fe\u7247\u8bc6\u522b\u7684\u8fc7\u7a0b\u662f\u76f8\u540c\u7684\uff0c\u8fd9\u91cc\u6211\u4e48\u5c06\u8be5\u90e8\u5206\u5b9e\u73b0\u7684\u5206\u6b65\u4ee3\u7801\u5c55\u793a\u7d66\u5927\u5bb6  \u9996\u5148\u6211\u4eec\u5728 main.py \u4e2d\u5b9e\u73b0\u6587\u4ef6\u7ba1\u7406\u7684\u4fdd\u5b58\u529f\u80fd:  \n\n'''\nxujing\n2020-06-30\n\n\u57fa\u4e8ekivymd\u548cpytorch\u7684\u4e8c\u6b21\u5143\u98ce\u683c\u8f6c\u6362app\n\n'''\n\nfrom kivy.core.window import Window\nfrom kivy.lang import Builder\nfrom kivy.uix.boxlayout import BoxLayout\nfrom kivy.uix.image import Image\nfrom kivy.properties import ObjectProperty\n\nfrom kivymd.app import MDApp\nfrom kivymd.uix.dialog import MDDialog\nfrom kivymd.uix.button import MDFlatButton\nfrom kivymd.uix.picker import MDDatePicker\nfrom kivymd.uix.menu import MDDropdownMenu, RightContent\n\nfrom kivymd.toast import toast\nfrom kivymd.uix.bottomsheet import MDGridBottomSheet\n\nfrom kivymd.uix.filemanager import MDFileManager\nfrom kivy.graphics.texture import Texture\n\nimport requests\nimport base64\nimport json\nimport cv2\nimport numpy as np\nimport time\nimport os\nimport logging\n\n\n\nclass MyToolBar(BoxLayout):\n    previous_date = ObjectProperty()\n\n    def __init__(self,**kwargs):\n        super().__init__(**kwargs)\n        self.dialog = None\n        self.cartoon_class = \"model_Hayao\"\n\n        #file manager \n        self.manager_open = False\n        self.file_manager = MDFileManager(\n            exit_manager=self.exit_manager,\n            select_path=self.select_path,\n            previous=True,\n        )\n\n        # save file manager\n        self.save_manager_open = False\n        self.save_file_manager = MDFileManager(\n            exit_manager=self.save_exit_manager,\n            select_path=self.save_select_path,\n        )\n\n        self.save_image = None\n\n\n\n    def show_alert_dialog(self):\n        if not self.dialog:\n            self.dialog = MDDialog(\n                title=\"CartoonGAN\",\n                text='''1.Paper:https://openaccess.thecvf.com/content_cvpr_2018/CameraReady/2205.pdf\\n 2.GitHub:https://github.com/Yijunmaverick/CartoonGAN-Test-Pytorch-Torch\\n3.Repo:https://github.com/znxlwm/pytorch-CartoonGAN''',\n                # buttons=[\n                #     MDFlatButton(\n                #         text=\"\u53d6\u6d88\",font_name=\"./static/DroidSansFallback.ttf\"\n                #     )],\n                radius=[20, 7, 20, 7],\n                type=\"custom\",\n            )\n        self.dialog.open()\n\n\n    def show_example_date_picker(self, *args):\n\n        pd_ = self.previous_date\n        try:\n            MDDatePicker(self.set_previous_date,\n                         pd_.year, pd_.month, pd_.day).open()\n        except AttributeError:\n            MDDatePicker(self.set_previous_date).open()\n\n\n    def set_previous_date(self, date_obj):\n        self.previous_date = date_obj\n\n\n    def show_info_dialog(self):\n        self.show_alert_dialog()\n\n\n    # button sheet, menu \u7684\u9690\u85cf\u7684button,\u4e3b\u8981\u7528\u4e8e\u9009\u62e9\u52a8\u753b\u7684\u753b\u98ce\n    def callback_for_menu_items(self, *args):\n        toast(args[0])\n\n        self.cartoon_class = \"model_\" + args[0]\n        # print(self.cartoon_class)\n\n    def show_grid_bottom_sheet(self):\n\n        bottom_sheet_menu = MDGridBottomSheet()\n        # \"Hayao\",\"Hosoda\",\"Paprika\",\"Shinkai\"\n        data = {\n            \"Hayao\": \"washing-machine\",\n            \"Hosoda\": \"baby-carriage\",\n            \"Paprika\": \"barcode-scan\",\n            \"Shinkai\": \"cake\",\n        }\n        for item in data.items():\n            bottom_sheet_menu.add_item(\n                item[0],\n                lambda x, y=item[0]: self.callback_for_menu_items(y),\n                icon_src=item[1],\n\n            )\n        bottom_sheet_menu.open()\n\n\n    # file manager\n    def file_manager_open(self):\n        # button release event\n        # self.file_manager.show('/storage/emulated/0/kivy')  # Android \u66ff\u6362\u4e3a\u8fd9\u4e2a\n        self.file_manager.show('/')  # output manager to the screen\n        self.manager_open = True\n\n    def select_path(self, path):\n        '''\n        It will be called when you click on the file name\n        or the catalog selection button.\n\n        :type path: str;\n        :param path: path to the selected directory or file;\n        '''\n\n        self.exit_manager()\n        toast(path)\n        # path \u5c31\u662f\u6211\u4eec\u8bc6\u522b\u7684\u56fe\u50cf\u7684\u8def\u5f84\n\n        # \u5f00\u59cb\u8bf7\u6c42\u8bc6\u522b\n        is_image_file = lambda x: any(x.endswith(extension) for extension in [\".png\",\".jpg\",\".PNG\",\".JPG\",\".JPRG\",\".jpeg\"])\n        #\u5c06\u56fe\u7247\u6570\u636e\u8f6c\u6210base64\u683c\u5f0f\n\n        if is_image_file(path):\n            with open(path, 'rb') as f:\n                img = base64.b64encode(f.read()).decode()\n            image = []\n            image.append(img)\n            res = {\"image\":image}\n\n            try:\n                #\u8bbf\u95ee\u670d\u52a1\n                # model: \"model_Hayao\"(\u5bab\u5d0e\u9a8f),\"model_Hosoda\",\"model_Paprika\",\"model_Shinkai\"\n                url = \"http://XXXXXXXX/predict/{}\".format( self.cartoon_class)\n                # \u6a21\u62dfHuawei Meta20\n                # http://www.fynas.com/ua\n                headers = {'user-agent': \"Mozilla/5.0 (Linux; U; Android 10; zh-CN; HMA-AL00 Build/HUAWEIHMA-AL00) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/57.0.2987.108 UCBrowser/12.7.9.1059 Mobile Safari/537.36\"}\n                res_back = requests.post(url,data=res,headers=headers, timeout=200)\n\n                # save cartoon image\n                state = json.loads(res_back.text).get('code')\n                if state != \"404\":\n                    img_bs64 = json.loads(res_back.text).get('pred')\n\n                    imgString = base64.b64decode(img_bs64.encode(\"ascii\"))\n                    # nparr = np.fromstring(imgString,np.uint8)  \n                    nparr = np.frombuffer(imgString,np.uint8)  \n                    image = cv2.imdecode(nparr,cv2.IMREAD_COLOR)\n                    self.save_image = image.copy()\n\n                    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGBA)\n                    img_buf = cv2.flip(image, 0)\n                    img_buf = img_buf.tostring()\n                    cartoon_texture = Texture.create(size=(image.shape[1], image.shape[0]), colorfmt='rgba') # android must rgba\n                    cartoon_texture.blit_buffer(img_buf, colorfmt='rgba', bufferfmt='ubyte')\n\n                    # display image from the texture\n                    self.ids.cartoongan_tops.text = \"\"\n                    self.ids.cartoon_image.texture = cartoon_texture\n            except Exception as e:\n                logging.info(\"[Internet Error   ] {}\".format(str(e)))\n                self.ids.cartoongan_tops.text = \"\"\n                self.ids.cartoongan_tops.text = \"\u7f51\u7edc\u9519\u8bef,\u8bf7\u91cd\u65b0\u5c1d\u8bd5...\"\n        else:\n            self.ids.cartoongan_tops.text = \"\"\n            self.ids.cartoongan_tops.text = \"\u60a8\u63d0\u4ea4\u7684\u662f\u975e\u56fe\u50cf\u6587\u4ef6,\u8bf7\u91cd\u65b0\u5c1d\u8bd5...\"\n\n\n\n    def exit_manager(self, *args):\n        '''\n        \u9000\u51faFile manager\n        '''\n        self.manager_open = False\n        self.file_manager.close()\n\n\n\n\n    # save file manager\n    def save_file_manager_open(self):\n        # button release event\n        # self.save_file_manager.show('/storage/emulated/0/kivy/save')  # Android \u66ff\u6362\u4e3a\u8fd9\u4e2a\n        self.save_file_manager.show('/')  # output manager to the screen\n        self.save_manager_open = True\n        logging.info(\"[file manager save  ] save file open!\")\n\n\n    def save_select_path(self, path):\n        '''\n        It will be called when you click on the file name\n        or the catalog selection button.\n\n        :type path: str;\n        :param path: path to the selected directory or file;\n        '''\n        logging.info(\"[file manager save  ] go in save path\")\n        self.save_exit_manager()\n        logging.info(\"[file manager save  ] go in save path close\")\n\n        self.save_exit_manager()\n        toast(path)\n\n        # path \u5c31\u662f\u6211\u4eec\u8bc6\u522b\u7684\u56fe\u50cf\u7684\u8def\u5f84\n        logging.info(\"[file manager save  ] go in save path\")\n\n        if (os.path.isdir(path)) and (not self.save_image is None):\n            save_file_name = str(time.time())+\"_\"+self.cartoon_class+\".jpg\"\n            cv2.imwrite(os.path.join(path,save_file_name),self.save_image)\n            toast(\"Cartoon Saved: {}\".format(path))\n            self.ids.save_log_label.text = \"\u4e8c\u6b21\u5143\u56fe\u7247\u4fdd\u5b58\u5728\uff1a{}\".format(path)\n            logging.info(\"[file manager save  ] save success!\")\n        elif self.save_image is None:\n            toast(\"No cartoon image to save!\")\n            self.ids.save_log_label.text = \"\u4fdd\u5b58\u5931\u8d25,\u4e0d\u5b58\u5728\u5f85\u4fdd\u5b58\u7684\u4e8c\u6b21\u5143\u56fe\u7247!\"\n        else:\n            toast(\"The path to save is wrongful!\")\n            self.ids.save_log_label.text = \"\u4fdd\u5b58\u5931\u8d25,\u4fdd\u5b58\u8def\u5f84\u662f\u975e\u6cd5\u8def\u5f84\uff01\"\n\n        logging.info(\"[file manager save  ] save finish\")\n\n\n    def save_exit_manager(self, *args):\n        '''\n        \u9000\u51faFile manager\n        '''\n        self.save_manager_open = False\n        self.save_file_manager.close()\n\n\n\n\n\nclass CartoonApp(MDApp):\n\n\n    def build(self):\n        self.icon=\"./static/icon.png\"\n        self.title=\"\u57fa\u4e8eGAN\u7684\u4e8c\u6b21\u5143\u98ce\u683c\u8f6c\u6362App\"\n        self.theme_cls.primary_palette = \"Purple\"\n\n        mytoolbar = Builder.load_file(\"./mytoolbar.kv\")\n\n\n        return mytoolbar\n\n\n\nif __name__ == \"__main__\":\n\n    CartoonApp().run()  \u6700\u540e\u6211\u4eec\u5728 mytoolbar.kv \u4e2d\u5b9e\u73b0\u4fdd\u5b58\u7684Butoon\u63a7\u4ef6\uff0c\u8be5\u63a7\u4ef6\u5728DOWNLOAD\u9875\u9762\u5b9e\u73b0  \n#: import C kivy.utils.get_hex_from_color\n\nMyToolBar:\n    BoxLayout:\n        orientation:'vertical'\n\n        MDToolbar:\n            title: 'CartoonGAN' \n            md_bg_color: 0.12, 0.56, 1, 1\n            specific_text_color: app.theme_cls.accent_color\n            icon:\"image-search-outline\"\n            left_action_items: [[\"menu\", lambda x: root.show_info_dialog()]]  #<----------------------None\n            right_action_items: [[\"dots-vertical\", lambda x: root.show_grid_bottom_sheet()],[\"clock\", lambda x: root.show_example_date_picker()]]     #<------------------------------------None\n\n\n        MDBottomNavigation:\n            panel_color: 0.12, 0.56, 1, 1\n\n            # Page Index\n            MDBottomNavigationItem:\n                name: 'screen 1'\n                text: 'Home'\n                icon: 'home'\n\n                canvas:\n                    Color:\n                        rgba: [1,1,1,1]\n                    Rectangle:\n                        size: root.size\n                        pos: root.pos\n                        source: \"./static/index.png\"\n\n                MDLabel:\n                    text: '[ref=\"click\"][b]\\u57fa\\u4e8eGAN\\u7684\\u4e8c\\u6b21\\u5143\\u98ce\\u683c\\u8f6c\\u6362App[/b][/ref]'\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 30\n                    pos_hint: {\"center_x\":0.5,\"y\":0.2}\n                    markup: True\n                    halign: \"center\"\n                    theme_text_color: \"Custom\"\n                    text_color: 1, 1, 0, 1\n\n\n                MDLabel:\n                    text: '[b]v1.0.0[/b]'\n\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 20\n                    pos_hint: {\"center_x\":0.5,\"y\":0.1}\n                    markup: True\n                    halign: \"center\"\n                    theme_text_color: \"Custom\"\n                    text_color: 1, 1, 0, 1\n\n                MDLabel:\n                    text: '[b]\\u5f00\\u53d1\\u8005\\uff1a\\u0020\\u5f90\\u9759[/b]'\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 20\n                    pos_hint: {\"center_x\":0.5,\"y\":0.05}\n                    markup: True\n                    halign: \"center\"\n                    theme_text_color: \"Custom\"\n                    text_color: 1, 1, 0, 1\n\n            # Page UpLoad\n\n            MDBottomNavigationItem:\n                name: 'screen 2'\n                text: 'UploadImage'\n                icon: 'cloud-upload'\n                font_name: './static/DroidSansFallback.ttf'\n\n\n                MDLabel:\n                    id: cartoongan_tops\n                    text: '\\u0043\\u0061\\u0072\\u0074\\u006f\\u006f\\u006e\\u0047\\u0041\\u004e\\u0028\\u0043\\u0056\\u0050\\u0052\\u0032\\u0030\\u0031\\u0038\\u0029\\uff0c\\u5b83\\u53ef\\u4ee5\\u7528\\u771f\\u5b9e\\u666f\\u7269\\u7684\\u7167\\u7247\\u4f5c\\u4e3a\\u6e90\\u56fe\\u7247\\uff0c\\u751f\\u6210\\u4efb\\u610f\\u98ce\\u683c\\u7684\\u6f2b\\u753b\\u002c\\u4f5c\\u8005\\u672a\\u5f00\\u6e90\\u4ee3\\u7801\\uff0c\\u53ea\\u7ed9\\u51fa\\u4e86\\u56db\\u4e2a\\u8bad\\u7ec3\\u597d\\u7684\\u6a21\\u578b\\u0028\\u5bab\\u5d0e\\u9a8f\\u002c\\u0020\\u7ec6\\u7530\\u5b88\\u002c\\u0020\\u76d7\\u68a6\\u4fa6\\u63a2\\u002c\\u0020\\u65b0\\u6d77\\u8bda\\u0029\\u3002'\n                    halign: 'center'\n                    font_name: './static/DroidSansFallback.ttf'\n                    font_size: 24\n\n                Image:\n                    id: cartoon_image\n\n\n                MDRectangleFlatButton:\n                    text: \"\\u52a0\\u8f7d\\u56fe\\u50cf\\u5e76\\u505a\\u4e8c\\u6b21\\u5143\\u8f6c\\u6362\"\n                    pos_hint: {\"center_x\": .5}\n                    size_hint: 1, 0.05\n                    text_color: 0.5, 0, 0.5, 1\n                    font_name: './static/DroidSansFallback.ttf'\n                    on_release: root.file_manager_open()\n\n\n            # Page DownLoad\n\n            MDBottomNavigationItem:\n                name: 'screen 3'\n                text: 'Download'\n                icon: 'folder-download'\n\n\n                MDLabel:\n                    id: save_log_label\n                    text: '\\u4fdd\\u5b58\\u98ce\\u683c\\u8fc1\\u79fb\\u540e\\u7684\\u4e8c\\u6b21\\u5143\\u56fe\\u7247'\n                    halign: 'center'\n                    font_name: './static/DroidSansFallback.ttf'\n\n                MDRoundFlatIconButton:\n                    text: \"Open manager\"\n                    icon: \"folder\"\n                    pos_hint: {'center_x': .5, 'center_y': .6}\n                    on_release: root.save_file_manager_open()  \u5176\u6548\u679c\u4e3a\uff1a",
            "title": "5.DOWNLOAD\u529f\u80fd\u7684\u5b9e\u73b0"
        },
        {
            "location": "/chapter5/#6",
            "text": "\u5173\u4e8e\u8be5\u9879\u76ee\u7684\u5b89\u5353\u6253\u5305\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u7b2c9\u7ae0\u4e2d\u7ed9\u51fa\u8be6\u7ec6\u7684\u6253\u5305\u6b65\u9aa4\uff0c\u6211\u4eec\u63a8\u8350\u4f7f\u7528buildozer\u5bf9\u8be5\u9879\u76ee\u8fdb\u884c\u5b89\u5353\u6253\u5305\u3002\u5173\u4e8e\u6253\u5305\u73af\u5883\u7684\u642d\u5efa\u53ef\u4ee5\u53c2\u8003buildozer\u5b98\u7f51\uff0c\u6216\u8bfb\u8005\u6709\u9700\u8981\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u5b8c\u6574\u7684\u6253\u5305\u73af\u5883\u7684\u865a\u62df\u673a\u955c\u50cf\u3002\u672c\u8282\u4e2d\u6211\u4eec\u4f1a\u5728\u5b89\u5353\u865a\u62df\u673a\u548c\u771f\u5b9e\u7684\u5b89\u5353\u624b\u673a\u4e0a\u5c55\u793a\u6253\u5305\u597d\u7684\u57fa\u4e8e\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\u7684\u4e00\u952e\u73b0\u5b9e\u8f6c\u6362\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fbApp\u3002   \u5b89\u5353\u865a\u62df\u673a                                            \u5b89\u5353\u624b\u673a",
            "title": "6.\u9879\u76ee\u603b\u7ed3"
        },
        {
            "location": "/chapter6/",
            "text": "\u7b2c\u516d\u7ae0 pyinstaller\u6253\u5305Windows\u684c\u9762\u5e94\u7528\u7a0b\u5e8f\n\n\n\u4ee5\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b\u9879\u76eeWindows\u6253\u5305\u4e3a\u4f8b\n\n\n\n\n\u6211\u4eec\u4f7f\u7528pyinstaller\u5728windows\u4e0b\u6253\u5305\u5f00\u53d1\u7684kivy\u5e94\u7528\u7a0b\u5e8f\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u7684\u6253\u5305\u65b9\u5f0f\u6bd4\u5982\uff1aNuitka,\u5982\u679c\u4f60\u6ca1\u6709\u5b89\u88c5pyinstaller,\u53ef\u4ee5\u901a\u8fc7pip\u8fdb\u884c\u5b89\u88c5\u3002\n\n\npip install pyinstaller -i https://pypi.tuna.tsinghua.edu.cn/simple\n\n\n\n\n\u8fd9\u91cc\u8981\u8bf4\u660e\u7684\u662f\uff0cpython\u7684\u53ef\u6267\u884c\u6587\u4ef6\u6253\u5305\u4f1a\u5c06\u6574\u4e2apython\u73af\u5883\u53ca\u6240\u6709\u7684\u4f9d\u8d56\u8fdb\u884c\u6253\u5305\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u6253\u5305\u7684\u7a0b\u5e8f\u5360\u7528\u7684\u7a7a\u95f4\u8f83\u5927\uff0c\u5e76\u4e14\u6253\u5305\u540e\u7684\u7a0b\u5e8f\u7684\u5f00\u542f\u901f\u5ea6\u4e0d\u5982C++\u7b49\u7a0b\u5e8f\u7684\u5f00\u542f\u901f\u5ea6\u5feb\uff0c\u8fd9\u91cc\u7b14\u8005\u5f3a\u70c8\u63a8\u8350\u8bfb\u8005\u4f7f\u7528Nuitka\u8fdb\u884c\u6253\u5305\uff0c\u5176\u7a0b\u5e8f\u7684\u5f00\u542f\u901f\u5ea6\u8981\u6bd4pyinstaller\u7684\u5f00\u542f\u901f\u5ea6\u5feb\u3002\n\n\n\u6211\u4eec\u4ee5\u7b2c4\u7ae0\u4e2d\u7684\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b\u9879\u76ee\u4e3a\u4f8b\uff0c\u4ecb\u7ecdpyinstaller\u5982\u4f55\u6253\u5305kivy\u5e94\u7528\u7a0b\u5e8f\u3002\n\n\n\u9996\u5148\u6211\u4eec\u901a\u8fc7\u547d\u4ee4\u884c\u751f\u6210\u6253\u5305\u7684spec\u914d\u7f6e\u6587\u4ef6,cd\u5230\u9879\u76ee\u7684\u540c\u7ea7\u76ee\u5f55\u5e76\u6267\u884c\n\n\n\npyinstaller -F -w --icon=static/icon.ico main.py\n\n#pyinstaller\u7684\u7528\u6cd5\uff0c\u5728\u4f60\u60f3\u653e\u7f6e\u5e94\u7528\u7684\u6587\u4ef6\u5939\u4e0b\u6253\u5f00cmd\uff0c\n#pyinstaller + \u53c2\u6570 +\u6587\u4ef6\u5165\u53e3\u6216\u6253\u5305\u5b9a\u4e49\u6587\u6863\u3002\n\n#-F\uff1a\u751f\u6210\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u91cc\u9762\u662f\u591a\u6587\u4ef6\u6a21\u5f0f\uff0c\u542f\u52a8\u5feb\u3002\n#-D\uff1a\u4ec5\u4ec5\u751f\u6210\u4e00\u4e2a\u6587\u4ef6\uff0c\u4e0d\u66b4\u9732\u5176\u4ed6\u4fe1\u606f\uff0c\u542f\u52a8\u8f83\u6162\u3002\n#-w\uff1a\u7a97\u53e3\u6a21\u5f0f\u6253\u5305\uff0c\u4e0d\u663e\u793a\u63a7\u5236\u53f0\u3002\n#--icon\uff1a\u8ddf\u56fe\u6807\u8def\u5f84\uff0c\u4f5c\u4e3a\u5e94\u7528icon\u3002\n#--hidden-import \u5e94\u7528\u9700\u8981\u7684\u5305\uff0c\u4f46\u662f\u6ca1\u6709\u88ab\u6253\u5305\u8fdb\u6765\uff0c\u8fd9\u91cc\u7684\u9519\u8bef\u662f\u6700\u591a\u7684\uff0c\u56e0\u4e3a\u4e00\u822c\u662f\u7b2c\u4e09\u65b9\u5305\u9690\u5f0f\u8c03\u7528\u5176\u4ed6\u5305\uff0c\u7136\u540e\u6253\u5305\u51fa\u6765\u7684\u7a0b\u5e8f\u663e\u793aFate Error\u4e0d\u80fd\u8fd0\u884c\u3002\n\n# \u5173\u4e8epyinstaller\u66f4\u591a\u7684\u53c2\u6570\u53ef\u53c2\u8003\u5b98\u65b9\u6587\u6863\n\n\n\n\n\u8fd9\u6837\u5728\u9879\u76ee\u7684\u540c\u7ea7\u76ee\u5f55\u4e0b\u4f1a\u751f\u6210\u4ee5\u5165\u53e3\u51fd\u6570\nmain.spec\n\u547d\u540d\u7684spec\u6253\u5305\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u6211\u4eec\u4fee\u6539\u8be5\u914d\u7f6e\u6587\u4ef6\u5982\u4e0b:\n\n\n# -*- mode: python ; coding: utf-8 -*-\n\nfrom kivy_deps import sdl2,glew  # \u5bfc\u5165kivy_deps\n\nblock_cipher = None\n\n\na = Analysis(['main.py'],\n             pathex=['C:\\\\Users\\\\xujing.LAPTOP-LLR84L1D\\\\Desktop\\\\\u8f66\u9053\u7ebf\u68c0\u6d4b\\\\kivy'],\n             binaries=[],\n             datas=[],\n             hiddenimports=[],\n             hookspath=[],\n             runtime_hooks=[],\n             excludes=[],\n             win_no_prefer_redirects=False,\n             win_private_assemblies=False,\n             cipher=block_cipher,\n             noarchive=False)\npyz = PYZ(a.pure, a.zipped_data,\n             cipher=block_cipher)\nexe = EXE(pyz,\n          a.scripts,\n          [],\n          exclude_binaries=True,\n          name='main',\n          debug=False,\n          bootloader_ignore_signals=False,\n          strip=False,\n          upx=True,\n          console=False , icon='static\\\\icon.ico')  # \u4fee\u6539\u662f\u5426\u5f00\u542f\u547d\u4ee4\u884c\u548cicon\ncoll = COLLECT(exe,\n               a.binaries,\n               a.zipfiles,\n               a.datas,\n               *[Tree(p) for p in (sdl2.dep_bins+glew.dep_bins)], # exe\u5305\u542b\u7684\u4e00\u4e9b\u5e93\u6253\u5305\u8fdb\u6765\n               strip=False,\n               upx=True,\n               upx_exclude=[],\n               name='main')  # \u6253\u5305\u7684exe\u7684\u540d\u79f0\n\n\n\n\n\n\u4fee\u6539\u597dspec\u6587\u4ef6\u540e\uff0c\u6211\u4eec\u4f7f\u7528spec\u6587\u4ef6\u8fdb\u884c\u6253\u5305\uff0c\u547d\u4ee4\u5982\u4e0b\uff1a\n\n\npyinstaller main.spec\n\n\n\n\n\u6253\u5305\u8fc7\u7a0b\u5f88\u5feb\u4f1a\u5b8c\u6210\uff0c\u4f1a\u5728\u9879\u76ee\u7684\u540c\u7ea7\u76ee\u5f55\u4e0b\u751f\u6210build\u6587\u4ef6\u5939\u548cdist\u6587\u4ef6\u5939\uff0cbuild\u6587\u4ef6\u5939\u5b58\u653e\u4e86\u6253\u5305\u7684\u4e34\u65f6\u6587\u4ef6\uff0c\u6253\u5305\u5b8c\u6210\u540e\u53ef\u4ee5\u5220\u9664\uff0cdist\u6587\u4ef6\u5939\u5b58\u653e\u4e86\u6253\u5305\u540e\u7684\u53ef\u6267\u884c\u6587\u4ef6\u53ca\u5176\u4f9d\u8d56\uff0c\u6211\u4eec\u5c06\u6253\u5305\u8fc7\u7a0b\u4e2d\u9700\u8981\u7684\u9759\u6001\u6587\u4ef6\u548c\u8d44\u6e90\u6587\u4ef6\u62f7\u8d1d\u5230dist\u6587\u4ef6\u5939\u3002\u6b64\u65f6\u7684\u547d\u4ee4\u884c\u63d0\u793a\u5982\u4e0b\uff0c\u8bf4\u660e\u6253\u5305\u6210\u529f\uff1a\n\n\n123947 INFO: Appending archive to EXE C:\\Users\\xujing.LAPTOP-LLR84L1D\\Desktop\\\u65b0\u5efa\u6587\u4ef6\u5939 (2)\\\u8f66\u9053\u7ebf\u68c0\u6d4b1.0\\kivy\\build\\main\\main.exe\n123963 INFO: Building EXE from EXE-00.toc completed successfully.\n123963 INFO: checking Tree\n123963 INFO: Building Tree because Tree-02.toc is non existent\n123963 INFO: Building Tree Tree-02.toc\n123978 INFO: checking Tree\n123978 INFO: Building Tree because Tree-03.toc is non existent\n123978 INFO: Building Tree Tree-03.toc\n123978 INFO: checking COLLECT\n123978 INFO: Building COLLECT because COLLECT-00.toc is non existent\n123978 INFO: Building COLLECT COLLECT-00.toc\n174714 INFO: Building COLLECT COLLECT-00.toc completed successfully.",
            "title": "\u7b2c\u516d\u7ae0 pyinstaller\u6253\u5305Windows\u684c\u9762\u5e94\u7528\u7a0b\u5e8f"
        },
        {
            "location": "/chapter6/#pyinstallerwindows",
            "text": "",
            "title": "\u7b2c\u516d\u7ae0 pyinstaller\u6253\u5305Windows\u684c\u9762\u5e94\u7528\u7a0b\u5e8f"
        },
        {
            "location": "/chapter6/#windows",
            "text": "\u6211\u4eec\u4f7f\u7528pyinstaller\u5728windows\u4e0b\u6253\u5305\u5f00\u53d1\u7684kivy\u5e94\u7528\u7a0b\u5e8f\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u7684\u6253\u5305\u65b9\u5f0f\u6bd4\u5982\uff1aNuitka,\u5982\u679c\u4f60\u6ca1\u6709\u5b89\u88c5pyinstaller,\u53ef\u4ee5\u901a\u8fc7pip\u8fdb\u884c\u5b89\u88c5\u3002  pip install pyinstaller -i https://pypi.tuna.tsinghua.edu.cn/simple  \u8fd9\u91cc\u8981\u8bf4\u660e\u7684\u662f\uff0cpython\u7684\u53ef\u6267\u884c\u6587\u4ef6\u6253\u5305\u4f1a\u5c06\u6574\u4e2apython\u73af\u5883\u53ca\u6240\u6709\u7684\u4f9d\u8d56\u8fdb\u884c\u6253\u5305\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u6253\u5305\u7684\u7a0b\u5e8f\u5360\u7528\u7684\u7a7a\u95f4\u8f83\u5927\uff0c\u5e76\u4e14\u6253\u5305\u540e\u7684\u7a0b\u5e8f\u7684\u5f00\u542f\u901f\u5ea6\u4e0d\u5982C++\u7b49\u7a0b\u5e8f\u7684\u5f00\u542f\u901f\u5ea6\u5feb\uff0c\u8fd9\u91cc\u7b14\u8005\u5f3a\u70c8\u63a8\u8350\u8bfb\u8005\u4f7f\u7528Nuitka\u8fdb\u884c\u6253\u5305\uff0c\u5176\u7a0b\u5e8f\u7684\u5f00\u542f\u901f\u5ea6\u8981\u6bd4pyinstaller\u7684\u5f00\u542f\u901f\u5ea6\u5feb\u3002  \u6211\u4eec\u4ee5\u7b2c4\u7ae0\u4e2d\u7684\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b\u9879\u76ee\u4e3a\u4f8b\uff0c\u4ecb\u7ecdpyinstaller\u5982\u4f55\u6253\u5305kivy\u5e94\u7528\u7a0b\u5e8f\u3002  \u9996\u5148\u6211\u4eec\u901a\u8fc7\u547d\u4ee4\u884c\u751f\u6210\u6253\u5305\u7684spec\u914d\u7f6e\u6587\u4ef6,cd\u5230\u9879\u76ee\u7684\u540c\u7ea7\u76ee\u5f55\u5e76\u6267\u884c  \npyinstaller -F -w --icon=static/icon.ico main.py\n\n#pyinstaller\u7684\u7528\u6cd5\uff0c\u5728\u4f60\u60f3\u653e\u7f6e\u5e94\u7528\u7684\u6587\u4ef6\u5939\u4e0b\u6253\u5f00cmd\uff0c\n#pyinstaller + \u53c2\u6570 +\u6587\u4ef6\u5165\u53e3\u6216\u6253\u5305\u5b9a\u4e49\u6587\u6863\u3002\n\n#-F\uff1a\u751f\u6210\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u91cc\u9762\u662f\u591a\u6587\u4ef6\u6a21\u5f0f\uff0c\u542f\u52a8\u5feb\u3002\n#-D\uff1a\u4ec5\u4ec5\u751f\u6210\u4e00\u4e2a\u6587\u4ef6\uff0c\u4e0d\u66b4\u9732\u5176\u4ed6\u4fe1\u606f\uff0c\u542f\u52a8\u8f83\u6162\u3002\n#-w\uff1a\u7a97\u53e3\u6a21\u5f0f\u6253\u5305\uff0c\u4e0d\u663e\u793a\u63a7\u5236\u53f0\u3002\n#--icon\uff1a\u8ddf\u56fe\u6807\u8def\u5f84\uff0c\u4f5c\u4e3a\u5e94\u7528icon\u3002\n#--hidden-import \u5e94\u7528\u9700\u8981\u7684\u5305\uff0c\u4f46\u662f\u6ca1\u6709\u88ab\u6253\u5305\u8fdb\u6765\uff0c\u8fd9\u91cc\u7684\u9519\u8bef\u662f\u6700\u591a\u7684\uff0c\u56e0\u4e3a\u4e00\u822c\u662f\u7b2c\u4e09\u65b9\u5305\u9690\u5f0f\u8c03\u7528\u5176\u4ed6\u5305\uff0c\u7136\u540e\u6253\u5305\u51fa\u6765\u7684\u7a0b\u5e8f\u663e\u793aFate Error\u4e0d\u80fd\u8fd0\u884c\u3002\n\n# \u5173\u4e8epyinstaller\u66f4\u591a\u7684\u53c2\u6570\u53ef\u53c2\u8003\u5b98\u65b9\u6587\u6863  \u8fd9\u6837\u5728\u9879\u76ee\u7684\u540c\u7ea7\u76ee\u5f55\u4e0b\u4f1a\u751f\u6210\u4ee5\u5165\u53e3\u51fd\u6570 main.spec \u547d\u540d\u7684spec\u6253\u5305\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u6211\u4eec\u4fee\u6539\u8be5\u914d\u7f6e\u6587\u4ef6\u5982\u4e0b:  # -*- mode: python ; coding: utf-8 -*-\n\nfrom kivy_deps import sdl2,glew  # \u5bfc\u5165kivy_deps\n\nblock_cipher = None\n\n\na = Analysis(['main.py'],\n             pathex=['C:\\\\Users\\\\xujing.LAPTOP-LLR84L1D\\\\Desktop\\\\\u8f66\u9053\u7ebf\u68c0\u6d4b\\\\kivy'],\n             binaries=[],\n             datas=[],\n             hiddenimports=[],\n             hookspath=[],\n             runtime_hooks=[],\n             excludes=[],\n             win_no_prefer_redirects=False,\n             win_private_assemblies=False,\n             cipher=block_cipher,\n             noarchive=False)\npyz = PYZ(a.pure, a.zipped_data,\n             cipher=block_cipher)\nexe = EXE(pyz,\n          a.scripts,\n          [],\n          exclude_binaries=True,\n          name='main',\n          debug=False,\n          bootloader_ignore_signals=False,\n          strip=False,\n          upx=True,\n          console=False , icon='static\\\\icon.ico')  # \u4fee\u6539\u662f\u5426\u5f00\u542f\u547d\u4ee4\u884c\u548cicon\ncoll = COLLECT(exe,\n               a.binaries,\n               a.zipfiles,\n               a.datas,\n               *[Tree(p) for p in (sdl2.dep_bins+glew.dep_bins)], # exe\u5305\u542b\u7684\u4e00\u4e9b\u5e93\u6253\u5305\u8fdb\u6765\n               strip=False,\n               upx=True,\n               upx_exclude=[],\n               name='main')  # \u6253\u5305\u7684exe\u7684\u540d\u79f0  \u4fee\u6539\u597dspec\u6587\u4ef6\u540e\uff0c\u6211\u4eec\u4f7f\u7528spec\u6587\u4ef6\u8fdb\u884c\u6253\u5305\uff0c\u547d\u4ee4\u5982\u4e0b\uff1a  pyinstaller main.spec  \u6253\u5305\u8fc7\u7a0b\u5f88\u5feb\u4f1a\u5b8c\u6210\uff0c\u4f1a\u5728\u9879\u76ee\u7684\u540c\u7ea7\u76ee\u5f55\u4e0b\u751f\u6210build\u6587\u4ef6\u5939\u548cdist\u6587\u4ef6\u5939\uff0cbuild\u6587\u4ef6\u5939\u5b58\u653e\u4e86\u6253\u5305\u7684\u4e34\u65f6\u6587\u4ef6\uff0c\u6253\u5305\u5b8c\u6210\u540e\u53ef\u4ee5\u5220\u9664\uff0cdist\u6587\u4ef6\u5939\u5b58\u653e\u4e86\u6253\u5305\u540e\u7684\u53ef\u6267\u884c\u6587\u4ef6\u53ca\u5176\u4f9d\u8d56\uff0c\u6211\u4eec\u5c06\u6253\u5305\u8fc7\u7a0b\u4e2d\u9700\u8981\u7684\u9759\u6001\u6587\u4ef6\u548c\u8d44\u6e90\u6587\u4ef6\u62f7\u8d1d\u5230dist\u6587\u4ef6\u5939\u3002\u6b64\u65f6\u7684\u547d\u4ee4\u884c\u63d0\u793a\u5982\u4e0b\uff0c\u8bf4\u660e\u6253\u5305\u6210\u529f\uff1a  123947 INFO: Appending archive to EXE C:\\Users\\xujing.LAPTOP-LLR84L1D\\Desktop\\\u65b0\u5efa\u6587\u4ef6\u5939 (2)\\\u8f66\u9053\u7ebf\u68c0\u6d4b1.0\\kivy\\build\\main\\main.exe\n123963 INFO: Building EXE from EXE-00.toc completed successfully.\n123963 INFO: checking Tree\n123963 INFO: Building Tree because Tree-02.toc is non existent\n123963 INFO: Building Tree Tree-02.toc\n123978 INFO: checking Tree\n123978 INFO: Building Tree because Tree-03.toc is non existent\n123978 INFO: Building Tree Tree-03.toc\n123978 INFO: checking COLLECT\n123978 INFO: Building COLLECT because COLLECT-00.toc is non existent\n123978 INFO: Building COLLECT COLLECT-00.toc\n174714 INFO: Building COLLECT COLLECT-00.toc completed successfully.",
            "title": "\u4ee5\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b\u9879\u76eeWindows\u6253\u5305\u4e3a\u4f8b"
        },
        {
            "location": "/chapter7/",
            "text": "\u7b2c\u4e03\u7ae0 setupfactory\u5b89\u88c5\u7a0b\u5e8f\u6253\u5305\n\n\n\n\n\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u6253\u5305\u7684\u7a0b\u5e8f\uff0c\u6ca1\u6709\u5b89\u88c5\u754c\u9762\uff0c\u5728\u63a7\u5236\u9762\u677f\u4e2d\u4e5f\u65e0\u6cd5\u770b\u5230\u6211\u4eec\u7684\u7a0b\u5e8f\uff0c\u5982\u4f55\u628a\u81ea\u5df1\u7684\u6253\u5305\u7a0b\u5e8f\u5236\u4f5c\u6210\u5b89\u88c5\u5305\u5462\uff1f\u672c\u8282\u8bfe\u4ecb\u7ecd\u7684setupfactory\u53ef\u4ee5\u5e2e\u52a9\u8bfb\u8005\u5b8c\u6210\u53ef\u6267\u884c\u7a0b\u5e8f\u5230\u5b89\u88c5\u5305\u7684\u8de8\u8d8a\uff0c\u8ba9\u81ea\u5df1\u5199\u7684\u5e94\u7528\u7a0b\u5e8f\u5b8c\u5168\u6210\u4e3a\u4e00\u6b3e\u8fd0\u884c\u7684\u8f6f\u4ef6\u3002\u672c\u6b21\u8bfe\u6211\u4eec\u57fa\u4e8e\u7b2c6\u7ae0\u4e2d\u6253\u5305\u597d\u7684\u7a0b\u5e8f\u3002\n\n\n\u7b2c\u4e00\u6b65\uff1a \u521b\u5efa\u4e00\u4e2a\u65b0\u9879\u76ee\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n\n\n\u7b2c\u4e8c\u6b65\uff1a \u5b89\u88c5\u5305\u5c5e\u6027\u8bbe\u7f6e\uff0c\u53cc\u51fbexe\u6587\u4ef6\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\u7b2c\u4e09\u6b65\uff1a \u4fee\u6539\u5de5\u7a0b\u4e3b\u9898\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\u7b2c\u56db\u6b65\uff1a \u5378\u8f7d\u8bbe\u7f6e\n\n\n\n\n \n\n\n\n\n\n\n\u7b2c\u4e94\u6b65\uff1a \u521b\u5efa\u8bbe\u7f6e\n\n\n\n\n \n\n\n\n\n\n\n\u7b2c\u516d\u6b65\uff1a \u521b\u5efa\u5b89\u88c5\u7a0b\u5e8f\n\n\n\n\n \n\n\n\n\n\n\n\u521b\u5efa\u597d\u7684\u5b89\u88c5\u5305\u5c31\u53ef\u4ee5\u5728\u7535\u8111\u4e2d\u5b89\u88c5\u4e86\uff0c\u5b89\u88c5\u8fc7\u7a0b\u548c\u4e00\u822c\u7a0b\u5e8f\u7684\u5b89\u88c5\u8fc7\u7a0b\u662f\u76f8\u540c\u7684\uff0c\u6700\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u684c\u9762\u542f\u52a8\u7a0b\u5e8f\uff0c\u5e76\u5728\u63a7\u5236\u9762\u677f\u770b\u5230\u6211\u4eec\u7684\u7a0b\u5e8f\n\n\n\u6700\u540e\u6f14\u793a\u8be5\u7a0b\u5e8f\u4ece\u5b89\u88c5\uff0c\u4f7f\u7528\u5230\u5378\u8f7d\u7684\u8fc7\u7a0b\n\n\n\u5b89\u88c5\uff1a\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n\n\n\u4f7f\u7528\uff1a\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n\n\n\u5378\u8f7d\uff1a\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\u8fd9\u6837\uff0c\u6574\u4e2a\u8f6f\u4ef6\u7684\u5f00\u53d1\u8fc7\u7a0b\u5c31\u5b8c\u6210\u4e86\uff01",
            "title": "\u7b2c\u4e03\u7ae0 setupfactory\u5b89\u88c5\u7a0b\u5e8f\u6253\u5305"
        },
        {
            "location": "/chapter7/#setupfactory",
            "text": "\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u6253\u5305\u7684\u7a0b\u5e8f\uff0c\u6ca1\u6709\u5b89\u88c5\u754c\u9762\uff0c\u5728\u63a7\u5236\u9762\u677f\u4e2d\u4e5f\u65e0\u6cd5\u770b\u5230\u6211\u4eec\u7684\u7a0b\u5e8f\uff0c\u5982\u4f55\u628a\u81ea\u5df1\u7684\u6253\u5305\u7a0b\u5e8f\u5236\u4f5c\u6210\u5b89\u88c5\u5305\u5462\uff1f\u672c\u8282\u8bfe\u4ecb\u7ecd\u7684setupfactory\u53ef\u4ee5\u5e2e\u52a9\u8bfb\u8005\u5b8c\u6210\u53ef\u6267\u884c\u7a0b\u5e8f\u5230\u5b89\u88c5\u5305\u7684\u8de8\u8d8a\uff0c\u8ba9\u81ea\u5df1\u5199\u7684\u5e94\u7528\u7a0b\u5e8f\u5b8c\u5168\u6210\u4e3a\u4e00\u6b3e\u8fd0\u884c\u7684\u8f6f\u4ef6\u3002\u672c\u6b21\u8bfe\u6211\u4eec\u57fa\u4e8e\u7b2c6\u7ae0\u4e2d\u6253\u5305\u597d\u7684\u7a0b\u5e8f\u3002  \u7b2c\u4e00\u6b65\uff1a \u521b\u5efa\u4e00\u4e2a\u65b0\u9879\u76ee                                               \u7b2c\u4e8c\u6b65\uff1a \u5b89\u88c5\u5305\u5c5e\u6027\u8bbe\u7f6e\uff0c\u53cc\u51fbexe\u6587\u4ef6            \u7b2c\u4e09\u6b65\uff1a \u4fee\u6539\u5de5\u7a0b\u4e3b\u9898                 \u7b2c\u56db\u6b65\uff1a \u5378\u8f7d\u8bbe\u7f6e       \u7b2c\u4e94\u6b65\uff1a \u521b\u5efa\u8bbe\u7f6e       \u7b2c\u516d\u6b65\uff1a \u521b\u5efa\u5b89\u88c5\u7a0b\u5e8f       \u521b\u5efa\u597d\u7684\u5b89\u88c5\u5305\u5c31\u53ef\u4ee5\u5728\u7535\u8111\u4e2d\u5b89\u88c5\u4e86\uff0c\u5b89\u88c5\u8fc7\u7a0b\u548c\u4e00\u822c\u7a0b\u5e8f\u7684\u5b89\u88c5\u8fc7\u7a0b\u662f\u76f8\u540c\u7684\uff0c\u6700\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u684c\u9762\u542f\u52a8\u7a0b\u5e8f\uff0c\u5e76\u5728\u63a7\u5236\u9762\u677f\u770b\u5230\u6211\u4eec\u7684\u7a0b\u5e8f  \u6700\u540e\u6f14\u793a\u8be5\u7a0b\u5e8f\u4ece\u5b89\u88c5\uff0c\u4f7f\u7528\u5230\u5378\u8f7d\u7684\u8fc7\u7a0b  \u5b89\u88c5\uff1a                                          \u4f7f\u7528\uff1a                 \u5378\u8f7d\uff1a            \u8fd9\u6837\uff0c\u6574\u4e2a\u8f6f\u4ef6\u7684\u5f00\u53d1\u8fc7\u7a0b\u5c31\u5b8c\u6210\u4e86\uff01",
            "title": "\u7b2c\u4e03\u7ae0 setupfactory\u5b89\u88c5\u7a0b\u5e8f\u6253\u5305"
        },
        {
            "location": "/chapter8/",
            "text": "\u7b2c\u516b\u7ae0 p4a Android\u6253\u5305\u57fa\u4e8ekivy\u7684\u6d82\u9e26\u753b\u677f\u9879\u76ee\n\n\n\n\npython-for-android\u7b80\u79f0p4a\u662fkivy\u5e94\u7528\u6253\u5305\u6210apk\u7684\u4e00\u79cd\u65b9\u6cd5\uff0c\u4f7f\u7528p4a\u9700\u8981\u624b\u52a8\u4e0b\u8f7dAndroid SDK\u548cAndroid NDK\u7684\u5b89\u88c5\u5305\uff0c\u968f\u540e\u5b89\u88c5\u6784\u5efa\u5de5\u5177\uff0c\u914d\u7f6eSDK\u548cNDK\u7684\u73af\u5883\u53d8\u91cf\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\u8be5\u65b9\u6cd5\u53ea\u80fd\u5728Linux\u5e73\u53f0\u4e0a\u6253\u5305\uff0c\u5173\u4e8e\u5b89\u88c5\u548cp4a\u7684\u4ecb\u7ecd\uff0c\u53ef\u4ee5\u53c2\u8003\nhttps://python-for-android.readthedocs.io/en/latest/\n,\u5982\u679c\u9700\u8981\u672c\u8bfe\u7a0b\u5c06\u63d0\u4f9b\u4e00\u4e2a\u5df2\u7ecf\u5b8c\u5168\u8bbe\u7f6e\u597d\u7684\u865a\u62df\u673a\uff0c\u8be5\u865a\u62df\u673a\u6765\u6e90\u4e8e\u300aPython+kivy(App\u5f00\u53d1)\u4ece\u5165\u95e8\u5230\u5b9e\u8df5\u300b\n\n\n\n\n \n\n\n\n\n1.\u57fa\u4e8eKivy\u5f00\u53d1\u7684\u6d82\u9e26\u753b\u677f\u9879\u76ee\u7684p4a\u5b89\u5353\u6253\u5305\u53ca\u9879\u76ee\u6f14\u793a\n\n\n\u9996\u5148\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6e05\u9664\u5176\u4ed6apk\u4e2d\u7684builds\u548cdists\u6587\u4ef6\u5939\uff0c\u5bf9\u4e8e\u540c\u4e00\u4e2aapk,\u8be5\u547d\u4ee4\u53ea\u6267\u884c\u4e00\u6b21\u5373\u53ef\u3002\n\n\np4a clean_builds && p4a clean_dists\n\n\n\n\n\nkivydev@kivydev-VirtualBox:~/test/paint$ p4a clean_builds && p4a clean_dists\n[INFO]:    Reading .p4a configuration\n[INFO]:    Recipe python3crystax: version \"3.6\" requested\n[INFO]:    Reading .p4a configuration\n[INFO]:    Recipe python3crystax: version \"3.6\" requested\n\n\n\n\n\n\u81ea\u52a8\u751f\u6210\u7684\n.p4a\n\u6587\u4ef6\uff0c\u5982\u4e0b\uff1a\n\n\n--dist_name Paint\n--android_api 19\n--minsdk 19\n--sdk_dir /home/kivydev/andr/android-sdk-linux\n--ndk_dir /home/kivydev/andr/crystax-ndk-10.3.2\n\n--arch armeabi-v7a\n--requirements python3crystax==3.6,kivy\n--private .\n--package com.xujing.paint\n--name paint\n--version 1.0\n--orientation landscape \n--bootstrap sdl2 \n--icon icon.png\n\n\n\n\n\n\u968f\u540e\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u6253\u5305apk\n\n\np4a apk --debug\n\n\n\n\n[INFO]:    Reading .p4a configuration\n[INFO]:    Recipe python3crystax: version \"3.6\" requested\n[INFO]:    Will compile for the following archs: armeabi-v7a\n[INFO]:    Getting Android API version from user argument\n[INFO]:    Available Android APIs are (19, 23, 27)\n[INFO]:    Requested API target 19 is available, continuing.\n[INFO]:    Getting NDK dir from from user argument\n[INFO]:    Got NDK version from $ANDROIDNDKVER\n[INFO]:    Got Android NDK version from the NDK dir: it is 10.3.2\n[INFO]:    Using Crystax NDK 10.3.2\n[INFO]:    Found virtualenv at /usr/bin/virtualenv\n[INFO]:    Found the following toolchain versions: ['4.9', '5', 'clang3.6', 'clang3.7']\n[INFO]:    Picking the latest gcc toolchain, here 5\n[INFO]:    Of the existing distributions, the following meet the given requirements:\n[INFO]:     Paint: includes recipes (hostpython3crystax, sdl2_image, sdl2_mixer, sdl2_ttf, python3crystax, sdl2, six, pyjnius, kivy), built for archs (armeabi-v7a)\n[INFO]:    Paint has compatible recipes, using this one\n[INFO]:    Of the existing distributions, the following meet the given requirements:\n[INFO]:     Paint: includes recipes (hostpython3crystax, sdl2_image, sdl2_mixer, sdl2_ttf, python3crystax, sdl2, six, pyjnius, kivy), built for archs (armeabi-v7a)\n[INFO]:    Paint has compatible recipes, using this one\nCould not find hostpython, will not compile to .pyo (this is normal with python3)\n[INFO]:    -> directory context /home/kivydev/.local/share/python-for-android/dists/Paint\nNo compiled python is present to zip, skipping.\nthis should only be the case if you are using the CrystaX python\n[INFO]:    Selecting java build tool:\n[INFO]:    Detected highest available build tools version to be 28.0.3\n[INFO]:        Building with gradle, as gradle executable is present\n[DEBUG]:   -> running gradlew assembleDebug\n[DEBUG]:    > Configuring > 0/1 projects > root project > Resolving dependenIncremental java compilation is an incubating feature.\n[DEBUG]:    :preBuild UP-TO-DATE\n[DEBUG]:    :preDebugBuild UP-TO-DATE\n[DEBUG]:    :checkDebugManifest\n[DEBUG]:    :prepareDebugDependencies\n[DEBUG]:    :compileDebugAidl UP-TO-DATE\n[DEBUG]:    :compileDebugRenderscript UP-TO-DATE\n[DEBUG]:    :generateDebugBuildConfig UP-TO-DATE\n[DEBUG]:    :generateDebugResValues UP-TO-DATE\n[DEBUG]:    :generateDebugResources UP-TO-DATE\n[DEBUG]:    :mergeDebugResources\n[DEBUG]:    :processDebugManifest UP-TO-DATE\n[DEBUG]:    :processDebugResources\n[DEBUG]:    :generateDebugSources\n[DEBUG]:    :incrementalDebugJavaCompilationSafeguard UP-TO-DATE\n[DEBUG]:    :javaPreCompileDebug\n[DEBUG]:    :compileDebugJavaWithJavac UP-TO-DATE\n[DEBUG]:    :compileDebugNdk UP-TO-DATE\n[DEBUG]:    :compileDebugSources UP-TO-DATE\n[DEBUG]:    :mergeDebugShaders UP-TO-DATE\n[DEBUG]:    :compileDebugShaders UP-TO-DATE\n[DEBUG]:    :generateDebugAssets UP-TO-DATE\n[DEBUG]:    :mergeDebugAssets\n[DEBUG]:    :transformClassesWithDexForDebug UP-TO-DATE\n[DEBUG]:    :mergeDebugJniLibFolders UP-TO-DATE\n[DEBUG]:    :transformNativeLibsWithMergeJniLibsForDebug UP-TO-DATE\n[DEBUG]:    :transformNativeLibsWithStripDebugSymbolForDebug UP-TO-DATE\n[DEBUG]:    :processDebugJavaRes UP-TO-DATE\n[DEBUG]:    :transformResourcesWithMergeJavaResForDebug UP-TO-DATE\n[DEBUG]:    :validateSigningDebug\n[DEBUG]:    :packageDebug\n[DEBUG]:    :assembleDebug\n[DEBUG]:    \n[DEBUG]:    BUILD SUCCESSFUL\n[DEBUG]:    \n[DEBUG]:    Total time: 6.116 secs\n[DEBUG]:    \n[INFO]:    <- directory context /home/kivydev/test/paint\n[INFO]:    # Copying APK to current directory\n[INFO]:    # APK filename not found in build output, trying to guess\n[INFO]:    # Found APK file: /home/kivydev/.local/share/python-for-android/dists/Paint/build/outputs/apk/Paint-debug.apk\n[INFO]:    # Add version number to APK\n[INFO]:    # APK renamed to Paint-1.0-debug.apk\n[DEBUG]:   -> running cp /home/kivydev/.local/share/python-for-android/dists/Paint/build/outputs/apk/Paint-debug.apk Paint-1.0-debug.apk\n\n\n\n\n\n\u6253\u5305\u5b8c\u6210\u540e\u4f1a\u751f\u6210apk\u6587\u4ef6\uff0c\u628aapk\u6587\u4ef6\u590d\u5236\u5230\u5171\u4eab\u6587\u4ef6\u5939\uff0c\u5e76\u5728\u624b\u673a\u6216\u5b89\u5353\u6a21\u62df\u5668\u4e2d\u5b89\u88c5\u3002\n\n\n\n\n \n\n\n\n\n2.MUMU\u5b89\u5353\u6a21\u62df\u5668\u53caadb_server.exe\u8c03\u8bd5\n\n\n\u6211\u4eec\u5c06\u6253\u5305\u597d\u7684apk\u6587\u4ef6\u5b89\u88c5\u5728\u5b89\u5353\u6a21\u62df\u5668\uff0c\u5e76\u901a\u8fc7\u5b89\u5353\u6a21\u62df\u5668\u63d0\u4f9b\u7684adb_server.exe\u591aapk\u8fdb\u884c\u8c03\u8bd5\n\n\n\u9996\u5148\u6211\u4eec\u5c06\u521a\u521a\u6253\u5305\u597d\u7684apk\u6587\u4ef6\u5b89\u88c5\u5230\u5b89\u5353\u6a21\u62df\u5668\uff1a\n\n\n\n\n \n\n\n\n\n\u6253\u5f00\u6211\u4eec\u5b89\u88c5\u7684\u5b89\u5353\u7a0b\u5e8f\n\n\n\n\n \n\n\n\n\n\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\u3002\n\n\n\u6211\u4eec\u901a\u8fc7MUMU\u5b89\u5353\u6a21\u62df\u5668\u81ea\u5e26\u7684adb_server.exe\u8c03\u8bd5\u770b\u4e00\u4e0b\u540e\u53f0\u8fd0\u884c\u7684\u65e5\u5fd7\n\n\ncmd\ncd D:\\soft_xj\\MUMU\\emulator\\nemu\\vmonitor\\bin\n\nadb_server.exe connect 127.0.0.1:7555\n\n\n\n\n\n\n \n\n\n\n\nadb_server.exe shell\nrun-as com.xujing.paint\ncd files/app/.kivy/logs\n\ncat kivy_20-07-09_1.txt\n\n\n\n\n\n\n \n\n\n\n\n\u6ca1\u6709ERROR\u540c\u65f6\u6211\u4eec\u7684\u5b89\u5353\u7a0b\u5e8f\u5e76\u6ca1\u6709\u95ea\u9000\uff0c\u8fd0\u884c\u6b63\u5e38\uff0c\u5982\u679c\u8fc7\u7a0b\u4e2d\u6211\u4eec\u7684\u7a0b\u5e8f\u51fa\u73b0\u95ea\u9000\u6216\u9519\u8bef\uff0c\u8bf7\u6309\u7167\u4e0a\u8ff0\u65b9\u5f0f\u8fdb\u884c\u8c03\u8bd5\uff0c\u5bfb\u627e\u539f\u56e0\u3002\n\n\n3.adb\u5b89\u5353\u8c03\u8bd5\n\n\n\u6700\u540e\u6211\u4eec\u5c06p4a\u6253\u5305\u7684\u5b89\u5353\u7a0b\u5e8f\u5b89\u88c5\u8fd0\u884c\u5728\u6211\u4eec\u7684\u534e\u4e3a\u5b89\u5353\u624b\u673a\u4e0a\uff0c\u9996\u5148\u6211\u4eec\u7ecfapk\u5b89\u88c5\u5728\u6211\u4eec\u7684\u534e\u4e3a\u624b\u673a\u4e0a\n\n\n\n\n \n\n\n\n\n\u6211\u4eec\u4f7f\u7528adb\u8c03\u8bd5\u6211\u4eec\u5b89\u5353\u624b\u673a\u4e0a\u7684apk\u5e94\u7528\n\n\nadb shell\nrun-as com.xujing.paint\ncd files/app/.kivy/logs\ncat kivy_20-07-09_1.txt",
            "title": "\u7b2c\u516b\u7ae0 p4a Android\u6253\u5305\u57fa\u4e8ekivy\u7684\u6d82\u9e26\u753b\u677f\u9879\u76ee"
        },
        {
            "location": "/chapter8/#p4a-androidkivy",
            "text": "python-for-android\u7b80\u79f0p4a\u662fkivy\u5e94\u7528\u6253\u5305\u6210apk\u7684\u4e00\u79cd\u65b9\u6cd5\uff0c\u4f7f\u7528p4a\u9700\u8981\u624b\u52a8\u4e0b\u8f7dAndroid SDK\u548cAndroid NDK\u7684\u5b89\u88c5\u5305\uff0c\u968f\u540e\u5b89\u88c5\u6784\u5efa\u5de5\u5177\uff0c\u914d\u7f6eSDK\u548cNDK\u7684\u73af\u5883\u53d8\u91cf\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\u8be5\u65b9\u6cd5\u53ea\u80fd\u5728Linux\u5e73\u53f0\u4e0a\u6253\u5305\uff0c\u5173\u4e8e\u5b89\u88c5\u548cp4a\u7684\u4ecb\u7ecd\uff0c\u53ef\u4ee5\u53c2\u8003 https://python-for-android.readthedocs.io/en/latest/ ,\u5982\u679c\u9700\u8981\u672c\u8bfe\u7a0b\u5c06\u63d0\u4f9b\u4e00\u4e2a\u5df2\u7ecf\u5b8c\u5168\u8bbe\u7f6e\u597d\u7684\u865a\u62df\u673a\uff0c\u8be5\u865a\u62df\u673a\u6765\u6e90\u4e8e\u300aPython+kivy(App\u5f00\u53d1)\u4ece\u5165\u95e8\u5230\u5b9e\u8df5\u300b",
            "title": "\u7b2c\u516b\u7ae0 p4a Android\u6253\u5305\u57fa\u4e8ekivy\u7684\u6d82\u9e26\u753b\u677f\u9879\u76ee"
        },
        {
            "location": "/chapter8/#1kivyp4a",
            "text": "\u9996\u5148\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6e05\u9664\u5176\u4ed6apk\u4e2d\u7684builds\u548cdists\u6587\u4ef6\u5939\uff0c\u5bf9\u4e8e\u540c\u4e00\u4e2aapk,\u8be5\u547d\u4ee4\u53ea\u6267\u884c\u4e00\u6b21\u5373\u53ef\u3002  p4a clean_builds && p4a clean_dists  kivydev@kivydev-VirtualBox:~/test/paint$ p4a clean_builds && p4a clean_dists\n[INFO]:    Reading .p4a configuration\n[INFO]:    Recipe python3crystax: version \"3.6\" requested\n[INFO]:    Reading .p4a configuration\n[INFO]:    Recipe python3crystax: version \"3.6\" requested  \u81ea\u52a8\u751f\u6210\u7684 .p4a \u6587\u4ef6\uff0c\u5982\u4e0b\uff1a  --dist_name Paint\n--android_api 19\n--minsdk 19\n--sdk_dir /home/kivydev/andr/android-sdk-linux\n--ndk_dir /home/kivydev/andr/crystax-ndk-10.3.2\n\n--arch armeabi-v7a\n--requirements python3crystax==3.6,kivy\n--private .\n--package com.xujing.paint\n--name paint\n--version 1.0\n--orientation landscape \n--bootstrap sdl2 \n--icon icon.png  \u968f\u540e\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u6253\u5305apk  p4a apk --debug  [INFO]:    Reading .p4a configuration\n[INFO]:    Recipe python3crystax: version \"3.6\" requested\n[INFO]:    Will compile for the following archs: armeabi-v7a\n[INFO]:    Getting Android API version from user argument\n[INFO]:    Available Android APIs are (19, 23, 27)\n[INFO]:    Requested API target 19 is available, continuing.\n[INFO]:    Getting NDK dir from from user argument\n[INFO]:    Got NDK version from $ANDROIDNDKVER\n[INFO]:    Got Android NDK version from the NDK dir: it is 10.3.2\n[INFO]:    Using Crystax NDK 10.3.2\n[INFO]:    Found virtualenv at /usr/bin/virtualenv\n[INFO]:    Found the following toolchain versions: ['4.9', '5', 'clang3.6', 'clang3.7']\n[INFO]:    Picking the latest gcc toolchain, here 5\n[INFO]:    Of the existing distributions, the following meet the given requirements:\n[INFO]:     Paint: includes recipes (hostpython3crystax, sdl2_image, sdl2_mixer, sdl2_ttf, python3crystax, sdl2, six, pyjnius, kivy), built for archs (armeabi-v7a)\n[INFO]:    Paint has compatible recipes, using this one\n[INFO]:    Of the existing distributions, the following meet the given requirements:\n[INFO]:     Paint: includes recipes (hostpython3crystax, sdl2_image, sdl2_mixer, sdl2_ttf, python3crystax, sdl2, six, pyjnius, kivy), built for archs (armeabi-v7a)\n[INFO]:    Paint has compatible recipes, using this one\nCould not find hostpython, will not compile to .pyo (this is normal with python3)\n[INFO]:    -> directory context /home/kivydev/.local/share/python-for-android/dists/Paint\nNo compiled python is present to zip, skipping.\nthis should only be the case if you are using the CrystaX python\n[INFO]:    Selecting java build tool:\n[INFO]:    Detected highest available build tools version to be 28.0.3\n[INFO]:        Building with gradle, as gradle executable is present\n[DEBUG]:   -> running gradlew assembleDebug\n[DEBUG]:    > Configuring > 0/1 projects > root project > Resolving dependenIncremental java compilation is an incubating feature.\n[DEBUG]:    :preBuild UP-TO-DATE\n[DEBUG]:    :preDebugBuild UP-TO-DATE\n[DEBUG]:    :checkDebugManifest\n[DEBUG]:    :prepareDebugDependencies\n[DEBUG]:    :compileDebugAidl UP-TO-DATE\n[DEBUG]:    :compileDebugRenderscript UP-TO-DATE\n[DEBUG]:    :generateDebugBuildConfig UP-TO-DATE\n[DEBUG]:    :generateDebugResValues UP-TO-DATE\n[DEBUG]:    :generateDebugResources UP-TO-DATE\n[DEBUG]:    :mergeDebugResources\n[DEBUG]:    :processDebugManifest UP-TO-DATE\n[DEBUG]:    :processDebugResources\n[DEBUG]:    :generateDebugSources\n[DEBUG]:    :incrementalDebugJavaCompilationSafeguard UP-TO-DATE\n[DEBUG]:    :javaPreCompileDebug\n[DEBUG]:    :compileDebugJavaWithJavac UP-TO-DATE\n[DEBUG]:    :compileDebugNdk UP-TO-DATE\n[DEBUG]:    :compileDebugSources UP-TO-DATE\n[DEBUG]:    :mergeDebugShaders UP-TO-DATE\n[DEBUG]:    :compileDebugShaders UP-TO-DATE\n[DEBUG]:    :generateDebugAssets UP-TO-DATE\n[DEBUG]:    :mergeDebugAssets\n[DEBUG]:    :transformClassesWithDexForDebug UP-TO-DATE\n[DEBUG]:    :mergeDebugJniLibFolders UP-TO-DATE\n[DEBUG]:    :transformNativeLibsWithMergeJniLibsForDebug UP-TO-DATE\n[DEBUG]:    :transformNativeLibsWithStripDebugSymbolForDebug UP-TO-DATE\n[DEBUG]:    :processDebugJavaRes UP-TO-DATE\n[DEBUG]:    :transformResourcesWithMergeJavaResForDebug UP-TO-DATE\n[DEBUG]:    :validateSigningDebug\n[DEBUG]:    :packageDebug\n[DEBUG]:    :assembleDebug\n[DEBUG]:    \n[DEBUG]:    BUILD SUCCESSFUL\n[DEBUG]:    \n[DEBUG]:    Total time: 6.116 secs\n[DEBUG]:    \n[INFO]:    <- directory context /home/kivydev/test/paint\n[INFO]:    # Copying APK to current directory\n[INFO]:    # APK filename not found in build output, trying to guess\n[INFO]:    # Found APK file: /home/kivydev/.local/share/python-for-android/dists/Paint/build/outputs/apk/Paint-debug.apk\n[INFO]:    # Add version number to APK\n[INFO]:    # APK renamed to Paint-1.0-debug.apk\n[DEBUG]:   -> running cp /home/kivydev/.local/share/python-for-android/dists/Paint/build/outputs/apk/Paint-debug.apk Paint-1.0-debug.apk  \u6253\u5305\u5b8c\u6210\u540e\u4f1a\u751f\u6210apk\u6587\u4ef6\uff0c\u628aapk\u6587\u4ef6\u590d\u5236\u5230\u5171\u4eab\u6587\u4ef6\u5939\uff0c\u5e76\u5728\u624b\u673a\u6216\u5b89\u5353\u6a21\u62df\u5668\u4e2d\u5b89\u88c5\u3002",
            "title": "1.\u57fa\u4e8eKivy\u5f00\u53d1\u7684\u6d82\u9e26\u753b\u677f\u9879\u76ee\u7684p4a\u5b89\u5353\u6253\u5305\u53ca\u9879\u76ee\u6f14\u793a"
        },
        {
            "location": "/chapter8/#2mumuadb_serverexe",
            "text": "\u6211\u4eec\u5c06\u6253\u5305\u597d\u7684apk\u6587\u4ef6\u5b89\u88c5\u5728\u5b89\u5353\u6a21\u62df\u5668\uff0c\u5e76\u901a\u8fc7\u5b89\u5353\u6a21\u62df\u5668\u63d0\u4f9b\u7684adb_server.exe\u591aapk\u8fdb\u884c\u8c03\u8bd5  \u9996\u5148\u6211\u4eec\u5c06\u521a\u521a\u6253\u5305\u597d\u7684apk\u6587\u4ef6\u5b89\u88c5\u5230\u5b89\u5353\u6a21\u62df\u5668\uff1a      \u6253\u5f00\u6211\u4eec\u5b89\u88c5\u7684\u5b89\u5353\u7a0b\u5e8f      \u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\u3002  \u6211\u4eec\u901a\u8fc7MUMU\u5b89\u5353\u6a21\u62df\u5668\u81ea\u5e26\u7684adb_server.exe\u8c03\u8bd5\u770b\u4e00\u4e0b\u540e\u53f0\u8fd0\u884c\u7684\u65e5\u5fd7  cmd\ncd D:\\soft_xj\\MUMU\\emulator\\nemu\\vmonitor\\bin\n\nadb_server.exe connect 127.0.0.1:7555      adb_server.exe shell\nrun-as com.xujing.paint\ncd files/app/.kivy/logs\n\ncat kivy_20-07-09_1.txt      \u6ca1\u6709ERROR\u540c\u65f6\u6211\u4eec\u7684\u5b89\u5353\u7a0b\u5e8f\u5e76\u6ca1\u6709\u95ea\u9000\uff0c\u8fd0\u884c\u6b63\u5e38\uff0c\u5982\u679c\u8fc7\u7a0b\u4e2d\u6211\u4eec\u7684\u7a0b\u5e8f\u51fa\u73b0\u95ea\u9000\u6216\u9519\u8bef\uff0c\u8bf7\u6309\u7167\u4e0a\u8ff0\u65b9\u5f0f\u8fdb\u884c\u8c03\u8bd5\uff0c\u5bfb\u627e\u539f\u56e0\u3002",
            "title": "2.MUMU\u5b89\u5353\u6a21\u62df\u5668\u53caadb_server.exe\u8c03\u8bd5"
        },
        {
            "location": "/chapter8/#3adb",
            "text": "\u6700\u540e\u6211\u4eec\u5c06p4a\u6253\u5305\u7684\u5b89\u5353\u7a0b\u5e8f\u5b89\u88c5\u8fd0\u884c\u5728\u6211\u4eec\u7684\u534e\u4e3a\u5b89\u5353\u624b\u673a\u4e0a\uff0c\u9996\u5148\u6211\u4eec\u7ecfapk\u5b89\u88c5\u5728\u6211\u4eec\u7684\u534e\u4e3a\u624b\u673a\u4e0a      \u6211\u4eec\u4f7f\u7528adb\u8c03\u8bd5\u6211\u4eec\u5b89\u5353\u624b\u673a\u4e0a\u7684apk\u5e94\u7528  adb shell\nrun-as com.xujing.paint\ncd files/app/.kivy/logs\ncat kivy_20-07-09_1.txt",
            "title": "3.adb\u5b89\u5353\u8c03\u8bd5"
        },
        {
            "location": "/chapter9/",
            "text": "\u7b2c\u4e5d\u7ae0 buildozer Android\u6253\u5305\n\n\n\n\n\u672c\u7ae0\u6211\u4eec\u5c06\u4f1a\u5728Linux\u73af\u5883\u4e0b\u901a\u8fc7buildozer\u628a\u5199\u597d\u7684\u7a0b\u5e8f\u6253\u5305\u4e3a\u5728Android\u73af\u5883\u4e0b\u53ef\u6267\u884c\u7684\u6587\u4ef6\uff0c\u5173\u4e8ebuildozer\u7684\u5b89\u88c5\u53ef\u4ee5\u53c2\u8003\u5b98\u7f51\u7684\u4ecb\u7ecd\uff0c\u5982\u679c\u8bfb\u8005\u9700\u8981\u6211\u4eec\u5c06\u5171\u4eab\u6211\u4eec\u914d\u7f6e\u597d\u7684buildozer\u7684\u865a\u62df\u673a\u73af\u5883\uff0c\u8fd9\u6837\u8bfb\u8005\u5c31\u514d\u4e8e\u91cd\u65b0\u914d\u7f6e\u73af\u5883\uff0c\u76f4\u63a5\u53ef\u4ee5\u6253\u5305\uff0c\u4f46\u662f\u6211\u4eec\u5efa\u8bae\u8bfb\u8005\u81ea\u5df1\u642d\u5efa\u73af\u5883\uff0c\u8fd9\u6837\u5bf9\u5b89\u5353\u6253\u5305\u4f1a\u6709\u66f4\u5168\u9762\u7684\u8ba4\u8bc6\u3002\n\n\n\n\n \n\n\n\n\n1.\u57fa\u4e8ekivymd\u7684\u6d82\u9e26\u753b\u677f\u7684buildozer\u6253\u5305\u53ca\u5728adb\u4e0b\u8fdb\u884c\u5b89\u5353\u8c03\u8bd5\n\n\n1.\u57fa\u4e8ekivymd\u7684\u6d82\u9e26\u753b\u677f\u7684buildozer\u6253\u5305\u53ca\u9879\u76ee\u6f14\u793a\n\n\n\u914d\u7f6e\u597d\u73af\u5883\u540e\uff0c\u901a\u8fc7cd\u547d\u4ee4\u8fdb\u5165\u9700\u8981\u6253\u5305\u7684\u9879\u76ee\u7684\u540c\u7ea7\u76ee\u5f55\u4e2d\uff0c\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u751f\u6210buildozer.spec\u914d\u7f6e\u6587\u4ef6\uff1a\n\n\nbuildozer init\n\n\n\n\n\u7136\u540e\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u7f16\u8f91\u914d\u7f6e\u6587\u4ef6\uff1a\n\n\n[app]\n\n# (str) Title of your application\ntitle = \u6d82\u9e26\u753b\u677fmd                #<----------------\u5e94\u7528\u540d\u79f0\n\n# (str) Package name\npackage.name = paintmd\n\n# (str) Package domain (needed for android/ios packaging)\npackage.domain = com.xujing       # <---------------\u57df\u540d\n\n# (str) Source code where the main.py live\nsource.dir = .\n\n# (list) Source files to include (let empty to include all the files)\nsource.include_exts = py,png,jpg,kv,atlas,ico,ttf  # <--------------\u9700\u8981\u6253\u5305\u8fdb\u6765\u7684\u6587\u4ef6\u7684\u6269\u5c55\u540d\n\n# (list) List of inclusions using pattern matching\n#source.include_patterns = assets/*,images/*.png\n\n# (list) Source files to exclude (let empty to not exclude anything)\n#source.exclude_exts = spec\n\n# (list) List of directory to exclude (let empty to not exclude anything)\n#source.exclude_dirs = tests, bin, venv\n\n# (list) List of exclusions using pattern matching\n#source.exclude_patterns = license,images/*/*.jpg\n\n# (str) Application versioning (method 1)\nversion = 1.0.0\n\n# (str) Application versioning (method 2)\n# version.regex = __version__ = ['\"](.*)['\"]\n# version.filename = %(source.dir)s/main.py\n\n# (list) Application requirements\n# comma separated e.g. requirements = sqlite3,kivy\nrequirements = python3==3.7.5,hostpython3==3.7.5,kivy,kivymd #<----------\u5e94\u7528\u4f9d\u8d56\u5305\uff0c\u975e\u5e38\u91cd\u8981\uff0c\u5927\u90e8\u5206\u95ea\u9000\u90fd\u662f\u56e0\u4e3a\u5177\u4f53\u7684\u4f9d\u8d56\u5305\u6ca1\u6709\u6253\u8fdb\u6765\n\n# (str) Custom source folders for requirements\n# Sets custom source for any requirements with recipes\n# requirements.source.kivy = ../../kivy\n\n# (str) Presplash of the application\n#presplash.filename = %(source.dir)s/data/presplash.png\n\n# (str) Icon of the application\n#icon.filename = %(source.dir)s/data/icon.png\nicon.filename = icon.png   #<--------------------\u5e94\u7528\u7684\u56fe\u6807\n\n# (str) Supported orientation (one of landscape, sensorLandscape, portrait or all)\norientation = portrait\n\n# (list) List of service to declare\n#services = NAME:ENTRYPOINT_TO_PY,NAME2:ENTRYPOINT2_TO_PY\n\n#\n# OSX Specific\n#\n\n#\n# author = \u00a9 Copyright Info\n\n# change the major version of python used by the app\nosx.python_version = 3\n\n# Kivy version to use\nosx.kivy_version = 1.9.1\n\n#\n# Android specific\n#\n\n# (bool) Indicate if the application should be fullscreen or not\nfullscreen = 0   # <---------------\u5168\u5c4f\u663e\u793a1\uff0c\u975e\u5168\u5c4f0\n\n# (string) Presplash background color (for new android toolchain)\n# Supported formats are: #RRGGBB #AARRGGBB or one of the following names:\n# red, blue, green, black, white, gray, cyan, magenta, yellow, lightgray,\n# darkgray, grey, lightgrey, darkgrey, aqua, fuchsia, lime, maroon, navy,\n# olive, purple, silver, teal.\n#android.presplash_color = #FFFFFF\n\n# (list) Permissions\n#android.permissions = INTERNET  # <----------- \u5b89\u5353\u7684\u6743\u9650\uff0c\u8fd9\u4e2a\u4e5f\u9700\u8981\u6839\u636e\u81ea\u5df1\u7684\u5e94\u7528\u53bb\u8bbe\u7f6e\n\n# (int) Target Android API, should be as high as possible.\n#android.api = 27\n\n# (int) Minimum API your APK will support.\n#android.minapi = 21\n\n# (int) Android SDK version to use\n#android.sdk = 20\n\n# (str) Android NDK version to use\n#android.ndk = 19b\n\n# (int) Android NDK API to use. This is the minimum API your app will support, it should usually match android.minapi.\n#android.ndk_api = 21\n\n# (bool) Use --private data storage (True) or --dir public storage (False)\n#android.private_storage = True\n\n# (str) Android NDK directory (if empty, it will be automatically downloaded.)\n#android.ndk_path =\n\n# (str) Android SDK directory (if empty, it will be automatically downloaded.)\n#android.sdk_path =\n\n# (str) ANT directory (if empty, it will be automatically downloaded.)\n#android.ant_path =\n\n# (bool) If True, then skip trying to update the Android sdk\n# This can be useful to avoid excess Internet downloads or save time\n# when an update is due and you just want to test/build your package\n# android.skip_update = False\n\n# (bool) If True, then automatically accept SDK license\n# agreements. This is intended for automation only. If set to False,\n# the default, you will be shown the license when first running\n# buildozer.\n# android.accept_sdk_license = False\n\n# (str) Android entry point, default is ok for Kivy-based app\n#android.entrypoint = org.renpy.android.PythonActivity\n\n# (str) Android app theme, default is ok for Kivy-based app\n# android.apptheme = \"@android:style/Theme.NoTitleBar\"\n\n# (list) Pattern to whitelist for the whole project\n#android.whitelist =\n\n# (str) Path to a custom whitelist file\n#android.whitelist_src =\n\n# (str) Path to a custom blacklist file\n#android.blacklist_src =\n\n# (list) List of Java .jar files to add to the libs so that pyjnius can access\n# their classes. Don't add jars that you do not need, since extra jars can slow\n# down the build process. Allows wildcards matching, for example:\n# OUYA-ODK/libs/*.jar\n#android.add_jars = foo.jar,bar.jar,path/to/more/*.jar\n\n# (list) List of Java files to add to the android project (can be java or a\n# directory containing the files)\n#android.add_src =\n\n# (list) Android AAR archives to add (currently works only with sdl2_gradle\n# bootstrap)\n#android.add_aars =\n\n# (list) Gradle dependencies to add (currently works only with sdl2_gradle\n# bootstrap)\n#android.gradle_dependencies =\n\n# (list) add java compile options\n# this can for example be necessary when importing certain java libraries using the 'android.gradle_dependencies' option\n# see https://developer.android.com/studio/write/java8-support for further information\n# android.add_compile_options = \"sourceCompatibility = 1.8\", \"targetCompatibility = 1.8\"\n\n# (list) Gradle repositories to add {can be necessary for some android.gradle_dependencies}\n# please enclose in double quotes \n# e.g. android.gradle_repositories = \"maven { url 'https://kotlin.bintray.com/ktor' }\"\n#android.add_gradle_repositories =\n\n# (list) packaging options to add \n# see https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.PackagingOptions.html\n# can be necessary to solve conflicts in gradle_dependencies\n# please enclose in double quotes \n# e.g. android.add_packaging_options = \"exclude 'META-INF/common.kotlin_module'\", \"exclude 'META-INF/*.kotlin_module'\"\n#android.add_gradle_repositories =\n\n# (list) Java classes to add as activities to the manifest.\n#android.add_activities = com.example.ExampleActivity\n\n# (str) OUYA Console category. Should be one of GAME or APP\n# If you leave this blank, OUYA support will not be enabled\n#android.ouya.category = GAME\n\n# (str) Filename of OUYA Console icon. It must be a 732x412 png image.\n#android.ouya.icon.filename = %(source.dir)s/data/ouya_icon.png\n\n# (str) XML file to include as an intent filters in <activity> tag\n#android.manifest.intent_filters =\n\n# (str) launchMode to set for the main activity\n#android.manifest.launch_mode = standard\n\n# (list) Android additional libraries to copy into libs/armeabi\n#android.add_libs_armeabi = libs/android/*.so\n#android.add_libs_armeabi_v7a = libs/android-v7/*.so\n#android.add_libs_arm64_v8a = libs/android-v8/*.so\n#android.add_libs_x86 = libs/android-x86/*.so\n#android.add_libs_mips = libs/android-mips/*.so\n\n# (bool) Indicate whether the screen should stay on\n# Don't forget to add the WAKE_LOCK permission if you set this to True\n#android.wakelock = False\n\n# (list) Android application meta-data to set (key=value format)\n#android.meta_data =\n\n# (list) Android library project to add (will be added in the\n# project.properties automatically.)\n#android.library_references =\n\n# (list) Android shared libraries which will be added to AndroidManifest.xml using <uses-library> tag\n#android.uses_library =\n\n# (str) Android logcat filters to use\n#android.logcat_filters = *:S python:D\n\n# (bool) Copy library instead of making a libpymodules.so\n#android.copy_libs = 1\n\n# (str) The Android arch to build for, choices: armeabi-v7a, arm64-v8a, x86, x86_64\nandroid.arch = armeabi-v7a\n\n# (int) overrides automatic versionCode computation (used in build.gradle)\n# this is not the same as app version and should only be edited if you know what you're doing\n# android.numeric_version = 1\n\n#\n# Python for android (p4a) specific\n#\n\n# (str) python-for-android fork to use, defaults to upstream (kivy)\n#p4a.fork = kivy\n\n# (str) python-for-android branch to use, defaults to master\n#p4a.branch = master\n\n# (str) python-for-android git clone directory (if empty, it will be automatically cloned from github)\n#p4a.source_dir =\n\n# (str) The directory in which python-for-android should look for your own build recipes (if any)\n#p4a.local_recipes =\n\n# (str) Filename to the hook for p4a\n#p4a.hook =\n\n# (str) Bootstrap to use for android builds\n# p4a.bootstrap = sdl2\n\n# (int) port number to specify an explicit --port= p4a argument (eg for bootstrap flask)\n#p4a.port =\n\n\n#\n# iOS specific\n#\n\n# (str) Path to a custom kivy-ios folder\n#ios.kivy_ios_dir = ../kivy-ios\n# Alternately, specify the URL and branch of a git checkout:\nios.kivy_ios_url = https://github.com/kivy/kivy-ios\nios.kivy_ios_branch = master\n\n# Another platform dependency: ios-deploy\n# Uncomment to use a custom checkout\n#ios.ios_deploy_dir = ../ios_deploy\n# Or specify URL and branch\nios.ios_deploy_url = https://github.com/phonegap/ios-deploy\nios.ios_deploy_branch = 1.10.0\n\n# (bool) Whether or not to sign the code\nios.codesign.allowed = false\n\n# (str) Name of the certificate to use for signing the debug version\n# Get a list of available identities: buildozer ios list_identities\n#ios.codesign.debug = \"iPhone Developer: <lastname> <firstname> (<hexstring>)\"\n\n# (str) Name of the certificate to use for signing the release version\n#ios.codesign.release = %(ios.codesign.debug)s\n\n\n[buildozer]\n\n# (int) Log level (0 = error only, 1 = info, 2 = debug (with command output))\nlog_level = 2\n\n# (int) Display warning if buildozer is run as root (0 = False, 1 = True)\nwarn_on_root = 1\n\n# (str) Path to build artifact storage, absolute or relative to spec file\n# build_dir = ./.buildozer\n\n# (str) Path to build output (i.e. .apk, .ipa) storage\n# bin_dir = ./bin\n\n#    -----------------------------------------------------------------------------\n#    List as sections\n#\n#    You can define all the \"list\" as [section:key].\n#    Each line will be considered as a option to the list.\n#    Let's take [app] / source.exclude_patterns.\n#    Instead of doing:\n#\n#[app]\n#source.exclude_patterns = license,data/audio/*.wav,data/images/original/*\n#\n#    This can be translated into:\n#\n#[app:source.exclude_patterns]\n#license\n#data/audio/*.wav\n#data/images/original/*\n#\n\n\n#    -----------------------------------------------------------------------------\n#    Profiles\n#\n#    You can extend section / key with a profile\n#    For example, you want to deploy a demo version of your application without\n#    HD content. You could first change the title to add \"(demo)\" in the name\n#    and extend the excluded directories to remove the HD content.\n#\n#[app@demo]\n#title = My Application (demo)\n#\n#[app:source.exclude_patterns@demo]\n#images/hd/*\n#\n#    Then, invoke the command line with the \"demo\" profile:\n#\n#buildozer --profile demo android debug\n\n\n\n\n\n\n\u5728\u9879\u76ee\u4e2d\u6dfb\u52a0\u7684\u4f9d\u8d56\u5305\u4e00\u5b9a\u8981\u5199\u5230requirements\u4e2d\uff0c\u518d\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u751f\u6210\u4e00\u4e2adebug\u7248\u672c\u7684apk\u6587\u4ef6\n\n\nbuildozer -v android debug\n\n\n\n\n\u9996\u6b21\u6253\u5305\u8fc7\u7a0b\u4f1a\u5f88\u6162\uff0c\u8bf7\u8010\u5fc3\u7b49\u5f85\u4fdd\u6301\u7f51\u7edc\u7545\u901a\uff0c\u76f4\u5230\u51fa\u73b0\u5982\u4e0b\u7684\u754c\u9762\uff0c\u6253\u5305\u5b8c\u6210\uff1a\n\n\n[INFO]:    Detected highest available build tools version to be 30.0.0\n[DEBUG]:   -> running gradlew assembleDebug\n[DEBUG]:    \n[DEBUG]:    Deprecated Gradle features were used in this build, making it incompatible with Gradle 7.0.\n[DEBUG]:    Use '--warning-mode all' to show the individual deprecation warnings.\n[DEBUG]:    See https://docs.gradle.org/6.4.1/userguide/command_line_interface.html#sec:command_line_warnings\n[DEBUG]:    \n[DEBUG]:    BUILD SUCCESSFUL in 2s\n[DEBUG]:    27 actionable tasks: 4 executed, 23 up-to-date\n\n[INFO]:    <- directory context /home/kivymd/Desktop/paintmd/.buildozer/android/platform/python-for-android\n[INFO]:    Of the existing distributions, the following meet the given requirements:\n[INFO]:     paintmd: min API 21, includes recipes (hostpython3, libffi, openssl, sdl2_image, sdl2_mixer, sdl2_ttf, sqlite3, python3, sdl2, setuptools, six, pyjnius, android, kivy, kivymd, certifi), built for archs (armeabi-v7a)\n[INFO]:    paintmd has compatible recipes, using this one\n[INFO]:    # Copying android package to current directory\n[INFO]:    # Android package filename not found in build output. Guessing...\n[INFO]:    # Found android package file: /home/kivymd/Desktop/paintmd/.buildozer/android/platform/build-armeabi-v7a/dists/paintmd__armeabi-v7a/build/outputs/apk/debug/paintmd__armeabi-v7a-debug.apk\n[INFO]:    # Add version number to android package\n[INFO]:    # Android package renamed to paintmd__armeabi-v7a-debug-1.0.0-.apk\n[DEBUG]:   -> running cp /home/kivymd/Desktop/paintmd/.buildozer/android/platform/build-armeabi-v7a/dists/paintmd__armeabi-v7a/build/outputs/apk/debug/paintmd__armeabi-v7a-debug.apk paintmd__armeabi-v7a-debug-1.0.0-.apk\nWARNING: Received a --sdk argument, but this argument is deprecated and does nothing.\nNo setup.py/pyproject.toml used, copying full private data into .apk.\nApplying Java source code patches...\nApplying patch: src/patches/SDLActivity.java.patch\nWarning: failed to apply patch (exit code 1), assuming it is already applied:  src/patches/SDLActivity.java.patch\n# Android packaging done!\n# APK paintmd-1.0.0-armeabi-v7a-debug.apk available in the bin directory\n\n\n\n\n\u6253\u5305\u5b8c\u6210\u540e\u4f1a\u5728\u9879\u76ee\u7684bin\u76ee\u5f55\u4e0b\u751f\u6210\u4e00\u4e2aapk\u6587\u4ef6\uff0c\u66f4\u591a\u547d\u4ee4\u53ef\u4ee5\u53c2\u8003\u5b98\u65b9\u6587\u6863\u3002\n\n\n2.adb \u5b89\u5353\u8c03\u8bd5\n\n\n\u6253\u5305\u5b8c\u6210\u540e\u751f\u6210\u7684apk\u6587\u4ef6\u53ef\u4ee5\u5728\u5b89\u5353\u624b\u673a\u4e2d\u5b89\u88c5\u4f7f\u7528\uff0c\u5e76\u901a\u8fc7adb\u8c03\u8bd5\u3002\n\n\n\u5728\u5b89\u5353\u6a21\u62df\u5668\u4e2d\u7684\u8fd0\u884c\uff1a\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\u5728\u5b89\u5353\u624b\u673a\u4e2d\u7684\u8fd0\u884c\uff1a\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\u5728adb\u4e0b\u7684\u8c03\u8bd5\u529f\u80fd\uff1a\n\n\nadb connect 127.0.0.1:7555\nadb shell\n\nrun-as com.xujing.paintmd\n\ncd files/app/.kivy/logs/\ncat kivy_20-07-13_0.txt\n\n\n\n\n\n[INFO   ] Logger: Record log in /data/user/0/com.xujing.paintmd/files/app/.kivy/logs/kivy_20-07-13_0.txt\n[WARNING] [Config      ] Upgrading configuration in progress.\n[WARNING] [Config      ] Older configuration version detected (0 instead of 21)\n[INFO   ] Kivy: v1.11.1\n[INFO   ] Kivy: Installed at \"/data/user/0/com.xujing.paintmd/files/app/_python_bundle/site-packages/kivy/__init__.pyc\"\n[INFO   ] Python: v3.7.5 (default, Jul  6 2020, 17:31:36)\n[Clang 8.0.2 (https://android.googlesource.com/toolchain/clang 40173bab62ec7462\n[INFO   ] Python: Interpreter at \"android_python\"\n[INFO   ] Factory: 184 symbols loaded\n[INFO   ] Image: Providers: img_tex, img_dds, img_sdl2, img_gif (img_pil, img_ffpyplayer ignored)\n[INFO   ] KivyMD: v0.104.1\n[INFO   ] Window: Provider: sdl2\n[INFO   ] GL: Using the \"OpenGL ES 2\" graphics system\n[INFO   ] GL: Backend used <sdl2>\n[INFO   ] GL: OpenGL version <b'OpenGL ES 3.0 (MuMu GL, Powered by ANGLE 2.1.0.axccacxx)'>\n[INFO   ] GL: OpenGL vendor <b'NetEase'>\n[INFO   ] GL: OpenGL renderer <b'MuMu GL (NVIDIA GeForce GTX 1660 SUPER Direct3D11 vs_5_0 ps_5_0)'>\n[INFO   ] GL: OpenGL parsed version: 3, 0\n[INFO   ] GL: Texture max size <16384>\n[INFO   ] GL: Texture max units <16>\n[INFO   ] Window: auto add sdl2 input provider\n[INFO   ] Window: virtual keyboard not allowed, single mode, not docked\n[INFO   ] Text: Provider: sdl2\n[INFO   ] GL: NPOT texture support is available\n[WARNING] Base: Unknown <android> provider\n[INFO   ] Base: Start application main loop\n\n\n\n\n\u7a0b\u5e8f\u6ca1\u6709\u95ea\u9000\u9000\u5207\u65e5\u5fd7\u8bb0\u5f55\u57fa\u672c\u6ca1\u6709\u95ee\u9898\u3002\n\n\n2.\u57fa\u4e8e\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b\u9879\u76ee\u7684buildozer\u5b89\u5353\u6253\u5305\u53caadb\u5b89\u5353\u8c03\u8bd5\n\n\n1.\u57fa\u4e8e\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b\u9879\u76ee\u7684buildozer\u5b89\u5353\u6253\u5305\u53ca\u9879\u76ee\u6f14\u793a\n\n\n\u667a\u80fd\u8f66\u9053\u7ebf\u9879\u76ee\u7684\u5b89\u5353\u6253\u5305\u4e0e\u4e0a\u4e00\u8282\u4e2d\u4ecb\u7ecd\u7684\u5b8c\u5168\u4e00\u81f4\uff0c\u8fd9\u91cc\u4ec5\u628a\nbuildozer.spec\n\u6587\u4ef6\u7684\u5185\u5bb9\u505a\u8be6\u7ec6\u7684\u4ecb\u7ecd,\u5176\u5728\u5b89\u5353\u624b\u673a\u4e0a\u7684\u8fd0\u884c\u53ef\u4ee5\u53c2\u8003\u7b2c4\u7ae0\u6216\u6211\u4eec\u7684\u5728\u7ebf\u8bfe\u7a0b\u6f14\u793a\n\n\n\n[app]\n\n# (str) Title of your application\ntitle = \u8f66\u9053\u7ebf\u68c0\u6d4b\n\n# (str) Package name\npackage.name = myapp\n\n# (str) Package domain (needed for android/ios packaging)\npackage.domain = com.xujing\n\n# (str) Source code where the main.py live\nsource.dir = .\n\n# (list) Source files to include (let empty to include all the files)\nsource.include_exts = py,png,jpg,kv,atlas,ico,ttf\n\n# (list) List of inclusions using pattern matching\n#source.include_patterns = assets/*,images/*.png\nsource.include_patterns = static/*\n\n\n\n# (list) Source files to exclude (let empty to not exclude anything)\n#source.exclude_exts = spec\n\n# (list) List of directory to exclude (let empty to not exclude anything)\n#source.exclude_dirs = tests, bin, venv\n\n# (list) List of exclusions using pattern matching\n#source.exclude_patterns = license,images/*/*.jpg\n\n# (str) Application versioning (method 1)\nversion = 1.0.0\n\n# (str) Application versioning (method 2)\n# version.regex = __version__ = ['\"](.*)['\"]\n# version.filename = %(source.dir)s/main.py\n\n# (list) Application requirements\n# comma separated e.g. requirements = sqlite3,kivy\nrequirements = python3,kivy,numpy,opencv\n\n# (str) Custom source folders for requirements\n# Sets custom source for any requirements with recipes\n# requirements.source.kivy = ../../kivy\n\n# (str) Presplash of the application\n#presplash.filename = %(source.dir)s/data/presplash.png\n\n# (str) Icon of the application\nicon.filename = %(source.dir)s/static/icon.png\n\n# (str) Supported orientation (one of landscape, sensorLandscape, portrait or all)\norientation = portrait\n\n# (list) List of service to declare\n#services = NAME:ENTRYPOINT_TO_PY,NAME2:ENTRYPOINT2_TO_PY\n\n#\n# OSX Specific\n#\n\n#\n# author = \u00a9 Copyright Info\n\n# change the major version of python used by the app\nosx.python_version = 3\n\n# Kivy version to use\nosx.kivy_version = 1.9.1\n\n#\n# Android specific\n#\n\n# (bool) Indicate if the application should be fullscreen or not\nfullscreen = 0\n\n# (string) Presplash background color (for new android toolchain)\n# Supported formats are: #RRGGBB #AARRGGBB or one of the following names:\n# red, blue, green, black, white, gray, cyan, magenta, yellow, lightgray,\n# darkgray, grey, lightgrey, darkgrey, aqua, fuchsia, lime, maroon, navy,\n# olive, purple, silver, teal.\n#android.presplash_color = #FFFFFF\n\n# (list) Permissions\nandroid.permissions = INTERNET,CAMERA,READ_EXTERNAL_STORAGE,WRITE_EXTERNAL_STORAGE\n\n# (int) Target Android API, should be as high as possible.\n#android.api = 27\n\n# (int) Minimum API your APK will support.\n#android.minapi = 21\n\n# (int) Android SDK version to use\n#android.sdk = 20\n\n# (str) Android NDK version to use\n#android.ndk = 19b\n\n# (int) Android NDK API to use. This is the minimum API your app will support, it should usually match android.minapi.\n#android.ndk_api = 21\n\n# (bool) Use --private data storage (True) or --dir public storage (False)\n#android.private_storage = True\n\n# (str) Android NDK directory (if empty, it will be automatically downloaded.)\n#android.ndk_path =\n\n# (str) Android SDK directory (if empty, it will be automatically downloaded.)\n#android.sdk_path =\n\n# (str) ANT directory (if empty, it will be automatically downloaded.)\n#android.ant_path =\n\n# (bool) If True, then skip trying to update the Android sdk\n# This can be useful to avoid excess Internet downloads or save time\n# when an update is due and you just want to test/build your package\n# android.skip_update = False\n\n# (bool) If True, then automatically accept SDK license\n# agreements. This is intended for automation only. If set to False,\n# the default, you will be shown the license when first running\n# buildozer.\n# android.accept_sdk_license = False\n\n# (str) Android entry point, default is ok for Kivy-based app\n#android.entrypoint = org.renpy.android.PythonActivity\n\n# (str) Android app theme, default is ok for Kivy-based app\n# android.apptheme = \"@android:style/Theme.NoTitleBar\"\n\n# (list) Pattern to whitelist for the whole project\n#android.whitelist =\n\n# (str) Path to a custom whitelist file\n#android.whitelist_src =\n\n# (str) Path to a custom blacklist file\n#android.blacklist_src =\n\n# (list) List of Java .jar files to add to the libs so that pyjnius can access\n# their classes. Don't add jars that you do not need, since extra jars can slow\n# down the build process. Allows wildcards matching, for example:\n# OUYA-ODK/libs/*.jar\n#android.add_jars = foo.jar,bar.jar,path/to/more/*.jar\n\n# (list) List of Java files to add to the android project (can be java or a\n# directory containing the files)\n#android.add_src =\n\n# (list) Android AAR archives to add (currently works only with sdl2_gradle\n# bootstrap)\n#android.add_aars =\n\n# (list) Gradle dependencies to add (currently works only with sdl2_gradle\n# bootstrap)\n#android.gradle_dependencies =\n\n# (list) add java compile options\n# this can for example be necessary when importing certain java libraries using the 'android.gradle_dependencies' option\n# see https://developer.android.com/studio/write/java8-support for further information\n# android.add_compile_options = \"sourceCompatibility = 1.8\", \"targetCompatibility = 1.8\"\n\n# (list) Gradle repositories to add {can be necessary for some android.gradle_dependencies}\n# please enclose in double quotes \n# e.g. android.gradle_repositories = \"maven { url 'https://kotlin.bintray.com/ktor' }\"\n#android.add_gradle_repositories =\n\n# (list) packaging options to add \n# see https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.PackagingOptions.html\n# can be necessary to solve conflicts in gradle_dependencies\n# please enclose in double quotes \n# e.g. android.add_packaging_options = \"exclude 'META-INF/common.kotlin_module'\", \"exclude 'META-INF/*.kotlin_module'\"\n#android.add_gradle_repositories =\n\n# (list) Java classes to add as activities to the manifest.\n#android.add_activities = com.example.ExampleActivity\n\n# (str) OUYA Console category. Should be one of GAME or APP\n# If you leave this blank, OUYA support will not be enabled\n#android.ouya.category = GAME\n\n# (str) Filename of OUYA Console icon. It must be a 732x412 png image.\n#android.ouya.icon.filename = %(source.dir)s/data/ouya_icon.png\n\n# (str) XML file to include as an intent filters in <activity> tag\n#android.manifest.intent_filters =\n\n# (str) launchMode to set for the main activity\n#android.manifest.launch_mode = standard\n\n# (list) Android additional libraries to copy into libs/armeabi\n#android.add_libs_armeabi = libs/android/*.so\n#android.add_libs_armeabi_v7a = libs/android-v7/*.so\n#android.add_libs_arm64_v8a = libs/android-v8/*.so\n#android.add_libs_x86 = libs/android-x86/*.so\n#android.add_libs_mips = libs/android-mips/*.so\n\n# (bool) Indicate whether the screen should stay on\n# Don't forget to add the WAKE_LOCK permission if you set this to True\n#android.wakelock = False\n\n# (list) Android application meta-data to set (key=value format)\n#android.meta_data =\n\n# (list) Android library project to add (will be added in the\n# project.properties automatically.)\n#android.library_references =\n\n# (list) Android shared libraries which will be added to AndroidManifest.xml using <uses-library> tag\n#android.uses_library =\n\n# (str) Android logcat filters to use\n#android.logcat_filters = *:S python:D\n\n# (bool) Copy library instead of making a libpymodules.so\n#android.copy_libs = 1\n\n# (str) The Android arch to build for, choices: armeabi-v7a, arm64-v8a, x86, x86_64\nandroid.arch = armeabi-v7a\n\n# (int) overrides automatic versionCode computation (used in build.gradle)\n# this is not the same as app version and should only be edited if you know what you're doing\n# android.numeric_version = 1\n\n#\n# Python for android (p4a) specific\n#\n\n# (str) python-for-android fork to use, defaults to upstream (kivy)\n#p4a.fork = kivy\n\n# (str) python-for-android branch to use, defaults to master\n#p4a.branch = master\n\n# (str) python-for-android git clone directory (if empty, it will be automatically cloned from github)\n#p4a.source_dir =\n\n# (str) The directory in which python-for-android should look for your own build recipes (if any)\n#p4a.local_recipes =\n\n# (str) Filename to the hook for p4a\n#p4a.hook =\n\n# (str) Bootstrap to use for android builds\n# p4a.bootstrap = sdl2\n\n# (int) port number to specify an explicit --port= p4a argument (eg for bootstrap flask)\n#p4a.port =\n\n\n#\n# iOS specific\n#\n\n# (str) Path to a custom kivy-ios folder\n#ios.kivy_ios_dir = ../kivy-ios\n# Alternately, specify the URL and branch of a git checkout:\nios.kivy_ios_url = https://github.com/kivy/kivy-ios\nios.kivy_ios_branch = master\n\n# Another platform dependency: ios-deploy\n# Uncomment to use a custom checkout\n#ios.ios_deploy_dir = ../ios_deploy\n# Or specify URL and branch\nios.ios_deploy_url = https://github.com/phonegap/ios-deploy\nios.ios_deploy_branch = 1.10.0\n\n# (bool) Whether or not to sign the code\nios.codesign.allowed = false\n\n# (str) Name of the certificate to use for signing the debug version\n# Get a list of available identities: buildozer ios list_identities\n#ios.codesign.debug = \"iPhone Developer: <lastname> <firstname> (<hexstring>)\"\n\n# (str) Name of the certificate to use for signing the release version\n#ios.codesign.release = %(ios.codesign.debug)s\n\n\n[buildozer]\n\n# (int) Log level (0 = error only, 1 = info, 2 = debug (with command output))\nlog_level = 2\n\n# (int) Display warning if buildozer is run as root (0 = False, 1 = True)\nwarn_on_root = 1\n\n# (str) Path to build artifact storage, absolute or relative to spec file\n# build_dir = ./.buildozer\n\n# (str) Path to build output (i.e. .apk, .ipa) storage\n# bin_dir = ./bin\n\n#    -----------------------------------------------------------------------------\n#    List as sections\n#\n#    You can define all the \"list\" as [section:key].\n#    Each line will be considered as a option to the list.\n#    Let's take [app] / source.exclude_patterns.\n#    Instead of doing:\n#\n#[app]\n#source.exclude_patterns = license,data/audio/*.wav,data/images/original/*\n#\n#    This can be translated into:\n#\n#[app:source.exclude_patterns]\n#license\n#data/audio/*.wav\n#data/images/original/*\n#\n\n\n#    -----------------------------------------------------------------------------\n#    Profiles\n#\n#    You can extend section / key with a profile\n#    For example, you want to deploy a demo version of your application without\n#    HD content. You could first change the title to add \"(demo)\" in the name\n#    and extend the excluded directories to remove the HD content.\n#\n#[app@demo]\n#title = My Application (demo)\n#\n#[app:source.exclude_patterns@demo]\n#images/hd/*\n#\n#    Then, invoke the command line with the \"demo\" profile:\n#\n#buildozer --profile demo android debug\n\n\n\n\n\n3.\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\u7684\u4e00\u952e\u73b0\u5b9e\u8f6c\u6362\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fb\u9879\u76ee(\u57fa\u4e8eKivymd)buildozer\u5b89\u5353\u6253\u5305\u53caadb\u5b89\u5353\u8c03\u8bd5\n\n\n\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\u7684\u4e00\u952e\u73b0\u5b9e\u8f6c\u6362\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fb\u9879\u76ee\u7684\u5b89\u5353\u6253\u5305\u4e0e\u4e0a\u4e00\u8282\u4e2d\u4ecb\u7ecd\u7684\u5b8c\u5168\u4e00\u81f4\uff0c\u8fd9\u91cc\u4ec5\u628a\nbuildozer.spec\n\u6587\u4ef6\u7684\u5185\u5bb9\u505a\u8be6\u7ec6\u7684\u4ecb\u7ecd,\u5176\u5728\u5b89\u5353\u624b\u673a\u4e0a\u7684\u8fd0\u884c\u53ef\u4ee5\u53c2\u8003\u7b2c5\u7ae0\u6216\u6211\u4eec\u7684\u5728\u7ebf\u8bfe\u7a0b\u6f14\u793a\n\n\n[app]\n\n# (str) Title of your application\ntitle = GAN\u4e8c\u6b21\u5143\n\n# (str) Package name\npackage.name = ganapp\n\n# (str) Package domain (needed for android/ios packaging)\npackage.domain = com.xujing\n\n# (str) Source code where the main.py live\nsource.dir = .\n\n# (list) Source files to include (let empty to include all the files)\nsource.include_exts = py,png,jpg,kv,atlas,ttf,ico,gif\n\n# (list) List of inclusions using pattern matching\n#source.include_patterns = assets/*,images/*.png\nsource.include_patterns = static/*\n\n\n# (list) Source files to exclude (let empty to not exclude anything)\n#source.exclude_exts = spec\n\n# (list) List of directory to exclude (let empty to not exclude anything)\n#source.exclude_dirs = tests, bin, venv\n\n# (list) List of exclusions using pattern matching\n#source.exclude_patterns = license,images/*/*.jpg\n\n# (str) Application versioning (method 1)\nversion = 1.0.0\n\n# (str) Application versioning (method 2)\n# version.regex = __version__ = ['\"](.*)['\"]\n# version.filename = %(source.dir)s/main.py\n\n# (list) Application requirements\n# comma separated e.g. requirements = sqlite3,kivy\nrequirements = python3==3.7.5,hostpython3==3.7.5,kivy,kivymd,opencv,numpy,requests,Pillow,urllib3,chardet,idna\n\n# (str) Custom source folders for requirements\n# Sets custom source for any requirements with recipes\n# requirements.source.kivy = ../../kivy\n\n# (str) Presplash of the application\n#presplash.filename = %(source.dir)s/data/presplash.png\n\n# (str) Icon of the application\nicon.filename = %(source.dir)s/static/icon.png\n\n# (str) Supported orientation (one of landscape, sensorLandscape, portrait or all)\norientation = portrait\n\n# (list) List of service to declare\n#services = NAME:ENTRYPOINT_TO_PY,NAME2:ENTRYPOINT2_TO_PY\n\n#\n# OSX Specific\n#\n\n#\n# author = \u00a9 Copyright Info\n\n# change the major version of python used by the app\nosx.python_version = 3\n\n# Kivy version to use\nosx.kivy_version = 1.9.1\n\n#\n# Android specific\n#\n\n# (bool) Indicate if the application should be fullscreen or not\nfullscreen = 0\n\n# (string) Presplash background color (for new android toolchain)\n# Supported formats are: #RRGGBB #AARRGGBB or one of the following names:\n# red, blue, green, black, white, gray, cyan, magenta, yellow, lightgray,\n# darkgray, grey, lightgrey, darkgrey, aqua, fuchsia, lime, maroon, navy,\n# olive, purple, silver, teal.\n#android.presplash_color = #FFFFFF\n\n# (list) Permissions\n#android.permissions = INTERNET,\n\n# (int) Target Android API, should be as high as possible.\n#android.api = 27\n\n# (int) Minimum API your APK will support.\n#android.minapi = 21\n\n# (int) Android SDK version to use\n#android.sdk = 20\n\n# (str) Android NDK version to use\n#android.ndk = 19b\n\n# (int) Android NDK API to use. This is the minimum API your app will support, it should usually match android.minapi.\n#android.ndk_api = 21\n\n# (bool) Use --private data storage (True) or --dir public storage (False)\n#android.private_storage = True\n\n# (str) Android NDK directory (if empty, it will be automatically downloaded.)\n#android.ndk_path =\n\n# (str) Android SDK directory (if empty, it will be automatically downloaded.)\n#android.sdk_path =\n\n# (str) ANT directory (if empty, it will be automatically downloaded.)\n#android.ant_path =\n\n# (bool) If True, then skip trying to update the Android sdk\n# This can be useful to avoid excess Internet downloads or save time\n# when an update is due and you just want to test/build your package\n# android.skip_update = False\n\n# (bool) If True, then automatically accept SDK license\n# agreements. This is intended for automation only. If set to False,\n# the default, you will be shown the license when first running\n# buildozer.\n# android.accept_sdk_license = False\n\n# (str) Android entry point, default is ok for Kivy-based app\n#android.entrypoint = org.renpy.android.PythonActivity\n\n# (str) Android app theme, default is ok for Kivy-based app\n# android.apptheme = \"@android:style/Theme.NoTitleBar\"\n\n# (list) Pattern to whitelist for the whole project\n#android.whitelist =\n\n# (str) Path to a custom whitelist file\n#android.whitelist_src =\n\n# (str) Path to a custom blacklist file\n#android.blacklist_src =\n\n# (list) List of Java .jar files to add to the libs so that pyjnius can access\n# their classes. Don't add jars that you do not need, since extra jars can slow\n# down the build process. Allows wildcards matching, for example:\n# OUYA-ODK/libs/*.jar\n#android.add_jars = foo.jar,bar.jar,path/to/more/*.jar\n\n# (list) List of Java files to add to the android project (can be java or a\n# directory containing the files)\n#android.add_src =\n\n# (list) Android AAR archives to add (currently works only with sdl2_gradle\n# bootstrap)\n#android.add_aars =\n\n# (list) Gradle dependencies to add (currently works only with sdl2_gradle\n# bootstrap)\n#android.gradle_dependencies =\n\n# (list) add java compile options\n# this can for example be necessary when importing certain java libraries using the 'android.gradle_dependencies' option\n# see https://developer.android.com/studio/write/java8-support for further information\n# android.add_compile_options = \"sourceCompatibility = 1.8\", \"targetCompatibility = 1.8\"\n\n# (list) Gradle repositories to add {can be necessary for some android.gradle_dependencies}\n# please enclose in double quotes \n# e.g. android.gradle_repositories = \"maven { url 'https://kotlin.bintray.com/ktor' }\"\n#android.add_gradle_repositories =\n\n# (list) packaging options to add \n# see https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.PackagingOptions.html\n# can be necessary to solve conflicts in gradle_dependencies\n# please enclose in double quotes \n# e.g. android.add_packaging_options = \"exclude 'META-INF/common.kotlin_module'\", \"exclude 'META-INF/*.kotlin_module'\"\n#android.add_gradle_repositories =\n\n# (list) Java classes to add as activities to the manifest.\n#android.add_activities = com.example.ExampleActivity\n\n# (str) OUYA Console category. Should be one of GAME or APP\n# If you leave this blank, OUYA support will not be enabled\n#android.ouya.category = GAME\n\n# (str) Filename of OUYA Console icon. It must be a 732x412 png image.\n#android.ouya.icon.filename = %(source.dir)s/data/ouya_icon.png\n\n# (str) XML file to include as an intent filters in <activity> tag\n#android.manifest.intent_filters =\n\n# (str) launchMode to set for the main activity\n#android.manifest.launch_mode = standard\n\n# (list) Android additional libraries to copy into libs/armeabi\n#android.add_libs_armeabi = libs/android/*.so\n#android.add_libs_armeabi_v7a = libs/android-v7/*.so\n#android.add_libs_arm64_v8a = libs/android-v8/*.so\n#android.add_libs_x86 = libs/android-x86/*.so\n#android.add_libs_mips = libs/android-mips/*.so\n\n# (bool) Indicate whether the screen should stay on\n# Don't forget to add the WAKE_LOCK permission if you set this to True\n#android.wakelock = False\n\n# (list) Android application meta-data to set (key=value format)\n#android.meta_data =\n\n# (list) Android library project to add (will be added in the\n# project.properties automatically.)\n#android.library_references =\n\n# (list) Android shared libraries which will be added to AndroidManifest.xml using <uses-library> tag\n#android.uses_library =\n\n# (str) Android logcat filters to use\n#android.logcat_filters = *:S python:D\n\n# (bool) Copy library instead of making a libpymodules.so\n#android.copy_libs = 1\n\n# (str) The Android arch to build for, choices: armeabi-v7a, arm64-v8a, x86, x86_64\nandroid.arch = armeabi-v7a\n\n# (int) overrides automatic versionCode computation (used in build.gradle)\n# this is not the same as app version and should only be edited if you know what you're doing\n# android.numeric_version = 1\n\n#\n# Python for android (p4a) specific\n#\n\n# (str) python-for-android fork to use, defaults to upstream (kivy)\n#p4a.fork = kivy\n\n# (str) python-for-android branch to use, defaults to master\n#p4a.branch = master\n\n# (str) python-for-android git clone directory (if empty, it will be automatically cloned from github)\n#p4a.source_dir =\n\n# (str) The directory in which python-for-android should look for your own build recipes (if any)\n#p4a.local_recipes =\n\n# (str) Filename to the hook for p4a\n#p4a.hook =\n\n# (str) Bootstrap to use for android builds\n# p4a.bootstrap = sdl2\n\n# (int) port number to specify an explicit --port= p4a argument (eg for bootstrap flask)\n#p4a.port =\n\n\n#\n# iOS specific\n#\n\n# (str) Path to a custom kivy-ios folder\n#ios.kivy_ios_dir = ../kivy-ios\n# Alternately, specify the URL and branch of a git checkout:\nios.kivy_ios_url = https://github.com/kivy/kivy-ios\nios.kivy_ios_branch = master\n\n# Another platform dependency: ios-deploy\n# Uncomment to use a custom checkout\n#ios.ios_deploy_dir = ../ios_deploy\n# Or specify URL and branch\nios.ios_deploy_url = https://github.com/phonegap/ios-deploy\nios.ios_deploy_branch = 1.10.0\n\n# (bool) Whether or not to sign the code\nios.codesign.allowed = false\n\n# (str) Name of the certificate to use for signing the debug version\n# Get a list of available identities: buildozer ios list_identities\n#ios.codesign.debug = \"iPhone Developer: <lastname> <firstname> (<hexstring>)\"\n\n# (str) Name of the certificate to use for signing the release version\n#ios.codesign.release = %(ios.codesign.debug)s\n\n\n[buildozer]\n\n# (int) Log level (0 = error only, 1 = info, 2 = debug (with command output))\nlog_level = 2\n\n# (int) Display warning if buildozer is run as root (0 = False, 1 = True)\nwarn_on_root = 1\n\n# (str) Path to build artifact storage, absolute or relative to spec file\n# build_dir = ./.buildozer\n\n# (str) Path to build output (i.e. .apk, .ipa) storage\n# bin_dir = ./bin\n\n#    -----------------------------------------------------------------------------\n#    List as sections\n#\n#    You can define all the \"list\" as [section:key].\n#    Each line will be considered as a option to the list.\n#    Let's take [app] / source.exclude_patterns.\n#    Instead of doing:\n#\n#[app]\n#source.exclude_patterns = license,data/audio/*.wav,data/images/original/*\n#\n#    This can be translated into:\n#\n#[app:source.exclude_patterns]\n#license\n#data/audio/*.wav\n#data/images/original/*\n#\n\n\n#    -----------------------------------------------------------------------------\n#    Profiles\n#\n#    You can extend section / key with a profile\n#    For example, you want to deploy a demo version of your application without\n#    HD content. You could first change the title to add \"(demo)\" in the name\n#    and extend the excluded directories to remove the HD content.\n#\n#[app@demo]\n#title = My Application (demo)\n#\n#[app:source.exclude_patterns@demo]\n#images/hd/*\n#\n#    Then, invoke the command line with the \"demo\" profile:\n#\n#buildozer --profile demo android debug\n\n\n\n\n\n\n\u5173\u4e8e\u6253\u5305release\u7248\u672c\u7684android apk, \u53ef\u4ee5\u53c2\u8003\nhttps://github.com/kivy/kivy/wiki/Creating-a-Release-APK",
            "title": "\u7b2c\u4e5d\u7ae0 buildozer Android\u6253\u5305\u57fa\u4e8ekivymd\u7684\u6d82\u9e26\u753b\u677f\u9879\u76ee"
        },
        {
            "location": "/chapter9/#buildozer-android",
            "text": "\u672c\u7ae0\u6211\u4eec\u5c06\u4f1a\u5728Linux\u73af\u5883\u4e0b\u901a\u8fc7buildozer\u628a\u5199\u597d\u7684\u7a0b\u5e8f\u6253\u5305\u4e3a\u5728Android\u73af\u5883\u4e0b\u53ef\u6267\u884c\u7684\u6587\u4ef6\uff0c\u5173\u4e8ebuildozer\u7684\u5b89\u88c5\u53ef\u4ee5\u53c2\u8003\u5b98\u7f51\u7684\u4ecb\u7ecd\uff0c\u5982\u679c\u8bfb\u8005\u9700\u8981\u6211\u4eec\u5c06\u5171\u4eab\u6211\u4eec\u914d\u7f6e\u597d\u7684buildozer\u7684\u865a\u62df\u673a\u73af\u5883\uff0c\u8fd9\u6837\u8bfb\u8005\u5c31\u514d\u4e8e\u91cd\u65b0\u914d\u7f6e\u73af\u5883\uff0c\u76f4\u63a5\u53ef\u4ee5\u6253\u5305\uff0c\u4f46\u662f\u6211\u4eec\u5efa\u8bae\u8bfb\u8005\u81ea\u5df1\u642d\u5efa\u73af\u5883\uff0c\u8fd9\u6837\u5bf9\u5b89\u5353\u6253\u5305\u4f1a\u6709\u66f4\u5168\u9762\u7684\u8ba4\u8bc6\u3002",
            "title": "\u7b2c\u4e5d\u7ae0 buildozer Android\u6253\u5305"
        },
        {
            "location": "/chapter9/#1kivymdbuildozeradb",
            "text": "",
            "title": "1.\u57fa\u4e8ekivymd\u7684\u6d82\u9e26\u753b\u677f\u7684buildozer\u6253\u5305\u53ca\u5728adb\u4e0b\u8fdb\u884c\u5b89\u5353\u8c03\u8bd5"
        },
        {
            "location": "/chapter9/#1kivymdbuildozer",
            "text": "\u914d\u7f6e\u597d\u73af\u5883\u540e\uff0c\u901a\u8fc7cd\u547d\u4ee4\u8fdb\u5165\u9700\u8981\u6253\u5305\u7684\u9879\u76ee\u7684\u540c\u7ea7\u76ee\u5f55\u4e2d\uff0c\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u751f\u6210buildozer.spec\u914d\u7f6e\u6587\u4ef6\uff1a  buildozer init  \u7136\u540e\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u7f16\u8f91\u914d\u7f6e\u6587\u4ef6\uff1a  [app]\n\n# (str) Title of your application\ntitle = \u6d82\u9e26\u753b\u677fmd                #<----------------\u5e94\u7528\u540d\u79f0\n\n# (str) Package name\npackage.name = paintmd\n\n# (str) Package domain (needed for android/ios packaging)\npackage.domain = com.xujing       # <---------------\u57df\u540d\n\n# (str) Source code where the main.py live\nsource.dir = .\n\n# (list) Source files to include (let empty to include all the files)\nsource.include_exts = py,png,jpg,kv,atlas,ico,ttf  # <--------------\u9700\u8981\u6253\u5305\u8fdb\u6765\u7684\u6587\u4ef6\u7684\u6269\u5c55\u540d\n\n# (list) List of inclusions using pattern matching\n#source.include_patterns = assets/*,images/*.png\n\n# (list) Source files to exclude (let empty to not exclude anything)\n#source.exclude_exts = spec\n\n# (list) List of directory to exclude (let empty to not exclude anything)\n#source.exclude_dirs = tests, bin, venv\n\n# (list) List of exclusions using pattern matching\n#source.exclude_patterns = license,images/*/*.jpg\n\n# (str) Application versioning (method 1)\nversion = 1.0.0\n\n# (str) Application versioning (method 2)\n# version.regex = __version__ = ['\"](.*)['\"]\n# version.filename = %(source.dir)s/main.py\n\n# (list) Application requirements\n# comma separated e.g. requirements = sqlite3,kivy\nrequirements = python3==3.7.5,hostpython3==3.7.5,kivy,kivymd #<----------\u5e94\u7528\u4f9d\u8d56\u5305\uff0c\u975e\u5e38\u91cd\u8981\uff0c\u5927\u90e8\u5206\u95ea\u9000\u90fd\u662f\u56e0\u4e3a\u5177\u4f53\u7684\u4f9d\u8d56\u5305\u6ca1\u6709\u6253\u8fdb\u6765\n\n# (str) Custom source folders for requirements\n# Sets custom source for any requirements with recipes\n# requirements.source.kivy = ../../kivy\n\n# (str) Presplash of the application\n#presplash.filename = %(source.dir)s/data/presplash.png\n\n# (str) Icon of the application\n#icon.filename = %(source.dir)s/data/icon.png\nicon.filename = icon.png   #<--------------------\u5e94\u7528\u7684\u56fe\u6807\n\n# (str) Supported orientation (one of landscape, sensorLandscape, portrait or all)\norientation = portrait\n\n# (list) List of service to declare\n#services = NAME:ENTRYPOINT_TO_PY,NAME2:ENTRYPOINT2_TO_PY\n\n#\n# OSX Specific\n#\n\n#\n# author = \u00a9 Copyright Info\n\n# change the major version of python used by the app\nosx.python_version = 3\n\n# Kivy version to use\nosx.kivy_version = 1.9.1\n\n#\n# Android specific\n#\n\n# (bool) Indicate if the application should be fullscreen or not\nfullscreen = 0   # <---------------\u5168\u5c4f\u663e\u793a1\uff0c\u975e\u5168\u5c4f0\n\n# (string) Presplash background color (for new android toolchain)\n# Supported formats are: #RRGGBB #AARRGGBB or one of the following names:\n# red, blue, green, black, white, gray, cyan, magenta, yellow, lightgray,\n# darkgray, grey, lightgrey, darkgrey, aqua, fuchsia, lime, maroon, navy,\n# olive, purple, silver, teal.\n#android.presplash_color = #FFFFFF\n\n# (list) Permissions\n#android.permissions = INTERNET  # <----------- \u5b89\u5353\u7684\u6743\u9650\uff0c\u8fd9\u4e2a\u4e5f\u9700\u8981\u6839\u636e\u81ea\u5df1\u7684\u5e94\u7528\u53bb\u8bbe\u7f6e\n\n# (int) Target Android API, should be as high as possible.\n#android.api = 27\n\n# (int) Minimum API your APK will support.\n#android.minapi = 21\n\n# (int) Android SDK version to use\n#android.sdk = 20\n\n# (str) Android NDK version to use\n#android.ndk = 19b\n\n# (int) Android NDK API to use. This is the minimum API your app will support, it should usually match android.minapi.\n#android.ndk_api = 21\n\n# (bool) Use --private data storage (True) or --dir public storage (False)\n#android.private_storage = True\n\n# (str) Android NDK directory (if empty, it will be automatically downloaded.)\n#android.ndk_path =\n\n# (str) Android SDK directory (if empty, it will be automatically downloaded.)\n#android.sdk_path =\n\n# (str) ANT directory (if empty, it will be automatically downloaded.)\n#android.ant_path =\n\n# (bool) If True, then skip trying to update the Android sdk\n# This can be useful to avoid excess Internet downloads or save time\n# when an update is due and you just want to test/build your package\n# android.skip_update = False\n\n# (bool) If True, then automatically accept SDK license\n# agreements. This is intended for automation only. If set to False,\n# the default, you will be shown the license when first running\n# buildozer.\n# android.accept_sdk_license = False\n\n# (str) Android entry point, default is ok for Kivy-based app\n#android.entrypoint = org.renpy.android.PythonActivity\n\n# (str) Android app theme, default is ok for Kivy-based app\n# android.apptheme = \"@android:style/Theme.NoTitleBar\"\n\n# (list) Pattern to whitelist for the whole project\n#android.whitelist =\n\n# (str) Path to a custom whitelist file\n#android.whitelist_src =\n\n# (str) Path to a custom blacklist file\n#android.blacklist_src =\n\n# (list) List of Java .jar files to add to the libs so that pyjnius can access\n# their classes. Don't add jars that you do not need, since extra jars can slow\n# down the build process. Allows wildcards matching, for example:\n# OUYA-ODK/libs/*.jar\n#android.add_jars = foo.jar,bar.jar,path/to/more/*.jar\n\n# (list) List of Java files to add to the android project (can be java or a\n# directory containing the files)\n#android.add_src =\n\n# (list) Android AAR archives to add (currently works only with sdl2_gradle\n# bootstrap)\n#android.add_aars =\n\n# (list) Gradle dependencies to add (currently works only with sdl2_gradle\n# bootstrap)\n#android.gradle_dependencies =\n\n# (list) add java compile options\n# this can for example be necessary when importing certain java libraries using the 'android.gradle_dependencies' option\n# see https://developer.android.com/studio/write/java8-support for further information\n# android.add_compile_options = \"sourceCompatibility = 1.8\", \"targetCompatibility = 1.8\"\n\n# (list) Gradle repositories to add {can be necessary for some android.gradle_dependencies}\n# please enclose in double quotes \n# e.g. android.gradle_repositories = \"maven { url 'https://kotlin.bintray.com/ktor' }\"\n#android.add_gradle_repositories =\n\n# (list) packaging options to add \n# see https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.PackagingOptions.html\n# can be necessary to solve conflicts in gradle_dependencies\n# please enclose in double quotes \n# e.g. android.add_packaging_options = \"exclude 'META-INF/common.kotlin_module'\", \"exclude 'META-INF/*.kotlin_module'\"\n#android.add_gradle_repositories =\n\n# (list) Java classes to add as activities to the manifest.\n#android.add_activities = com.example.ExampleActivity\n\n# (str) OUYA Console category. Should be one of GAME or APP\n# If you leave this blank, OUYA support will not be enabled\n#android.ouya.category = GAME\n\n# (str) Filename of OUYA Console icon. It must be a 732x412 png image.\n#android.ouya.icon.filename = %(source.dir)s/data/ouya_icon.png\n\n# (str) XML file to include as an intent filters in <activity> tag\n#android.manifest.intent_filters =\n\n# (str) launchMode to set for the main activity\n#android.manifest.launch_mode = standard\n\n# (list) Android additional libraries to copy into libs/armeabi\n#android.add_libs_armeabi = libs/android/*.so\n#android.add_libs_armeabi_v7a = libs/android-v7/*.so\n#android.add_libs_arm64_v8a = libs/android-v8/*.so\n#android.add_libs_x86 = libs/android-x86/*.so\n#android.add_libs_mips = libs/android-mips/*.so\n\n# (bool) Indicate whether the screen should stay on\n# Don't forget to add the WAKE_LOCK permission if you set this to True\n#android.wakelock = False\n\n# (list) Android application meta-data to set (key=value format)\n#android.meta_data =\n\n# (list) Android library project to add (will be added in the\n# project.properties automatically.)\n#android.library_references =\n\n# (list) Android shared libraries which will be added to AndroidManifest.xml using <uses-library> tag\n#android.uses_library =\n\n# (str) Android logcat filters to use\n#android.logcat_filters = *:S python:D\n\n# (bool) Copy library instead of making a libpymodules.so\n#android.copy_libs = 1\n\n# (str) The Android arch to build for, choices: armeabi-v7a, arm64-v8a, x86, x86_64\nandroid.arch = armeabi-v7a\n\n# (int) overrides automatic versionCode computation (used in build.gradle)\n# this is not the same as app version and should only be edited if you know what you're doing\n# android.numeric_version = 1\n\n#\n# Python for android (p4a) specific\n#\n\n# (str) python-for-android fork to use, defaults to upstream (kivy)\n#p4a.fork = kivy\n\n# (str) python-for-android branch to use, defaults to master\n#p4a.branch = master\n\n# (str) python-for-android git clone directory (if empty, it will be automatically cloned from github)\n#p4a.source_dir =\n\n# (str) The directory in which python-for-android should look for your own build recipes (if any)\n#p4a.local_recipes =\n\n# (str) Filename to the hook for p4a\n#p4a.hook =\n\n# (str) Bootstrap to use for android builds\n# p4a.bootstrap = sdl2\n\n# (int) port number to specify an explicit --port= p4a argument (eg for bootstrap flask)\n#p4a.port =\n\n\n#\n# iOS specific\n#\n\n# (str) Path to a custom kivy-ios folder\n#ios.kivy_ios_dir = ../kivy-ios\n# Alternately, specify the URL and branch of a git checkout:\nios.kivy_ios_url = https://github.com/kivy/kivy-ios\nios.kivy_ios_branch = master\n\n# Another platform dependency: ios-deploy\n# Uncomment to use a custom checkout\n#ios.ios_deploy_dir = ../ios_deploy\n# Or specify URL and branch\nios.ios_deploy_url = https://github.com/phonegap/ios-deploy\nios.ios_deploy_branch = 1.10.0\n\n# (bool) Whether or not to sign the code\nios.codesign.allowed = false\n\n# (str) Name of the certificate to use for signing the debug version\n# Get a list of available identities: buildozer ios list_identities\n#ios.codesign.debug = \"iPhone Developer: <lastname> <firstname> (<hexstring>)\"\n\n# (str) Name of the certificate to use for signing the release version\n#ios.codesign.release = %(ios.codesign.debug)s\n\n\n[buildozer]\n\n# (int) Log level (0 = error only, 1 = info, 2 = debug (with command output))\nlog_level = 2\n\n# (int) Display warning if buildozer is run as root (0 = False, 1 = True)\nwarn_on_root = 1\n\n# (str) Path to build artifact storage, absolute or relative to spec file\n# build_dir = ./.buildozer\n\n# (str) Path to build output (i.e. .apk, .ipa) storage\n# bin_dir = ./bin\n\n#    -----------------------------------------------------------------------------\n#    List as sections\n#\n#    You can define all the \"list\" as [section:key].\n#    Each line will be considered as a option to the list.\n#    Let's take [app] / source.exclude_patterns.\n#    Instead of doing:\n#\n#[app]\n#source.exclude_patterns = license,data/audio/*.wav,data/images/original/*\n#\n#    This can be translated into:\n#\n#[app:source.exclude_patterns]\n#license\n#data/audio/*.wav\n#data/images/original/*\n#\n\n\n#    -----------------------------------------------------------------------------\n#    Profiles\n#\n#    You can extend section / key with a profile\n#    For example, you want to deploy a demo version of your application without\n#    HD content. You could first change the title to add \"(demo)\" in the name\n#    and extend the excluded directories to remove the HD content.\n#\n#[app@demo]\n#title = My Application (demo)\n#\n#[app:source.exclude_patterns@demo]\n#images/hd/*\n#\n#    Then, invoke the command line with the \"demo\" profile:\n#\n#buildozer --profile demo android debug  \u5728\u9879\u76ee\u4e2d\u6dfb\u52a0\u7684\u4f9d\u8d56\u5305\u4e00\u5b9a\u8981\u5199\u5230requirements\u4e2d\uff0c\u518d\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u751f\u6210\u4e00\u4e2adebug\u7248\u672c\u7684apk\u6587\u4ef6  buildozer -v android debug  \u9996\u6b21\u6253\u5305\u8fc7\u7a0b\u4f1a\u5f88\u6162\uff0c\u8bf7\u8010\u5fc3\u7b49\u5f85\u4fdd\u6301\u7f51\u7edc\u7545\u901a\uff0c\u76f4\u5230\u51fa\u73b0\u5982\u4e0b\u7684\u754c\u9762\uff0c\u6253\u5305\u5b8c\u6210\uff1a  [INFO]:    Detected highest available build tools version to be 30.0.0\n[DEBUG]:   -> running gradlew assembleDebug\n[DEBUG]:    \n[DEBUG]:    Deprecated Gradle features were used in this build, making it incompatible with Gradle 7.0.\n[DEBUG]:    Use '--warning-mode all' to show the individual deprecation warnings.\n[DEBUG]:    See https://docs.gradle.org/6.4.1/userguide/command_line_interface.html#sec:command_line_warnings\n[DEBUG]:    \n[DEBUG]:    BUILD SUCCESSFUL in 2s\n[DEBUG]:    27 actionable tasks: 4 executed, 23 up-to-date\n\n[INFO]:    <- directory context /home/kivymd/Desktop/paintmd/.buildozer/android/platform/python-for-android\n[INFO]:    Of the existing distributions, the following meet the given requirements:\n[INFO]:     paintmd: min API 21, includes recipes (hostpython3, libffi, openssl, sdl2_image, sdl2_mixer, sdl2_ttf, sqlite3, python3, sdl2, setuptools, six, pyjnius, android, kivy, kivymd, certifi), built for archs (armeabi-v7a)\n[INFO]:    paintmd has compatible recipes, using this one\n[INFO]:    # Copying android package to current directory\n[INFO]:    # Android package filename not found in build output. Guessing...\n[INFO]:    # Found android package file: /home/kivymd/Desktop/paintmd/.buildozer/android/platform/build-armeabi-v7a/dists/paintmd__armeabi-v7a/build/outputs/apk/debug/paintmd__armeabi-v7a-debug.apk\n[INFO]:    # Add version number to android package\n[INFO]:    # Android package renamed to paintmd__armeabi-v7a-debug-1.0.0-.apk\n[DEBUG]:   -> running cp /home/kivymd/Desktop/paintmd/.buildozer/android/platform/build-armeabi-v7a/dists/paintmd__armeabi-v7a/build/outputs/apk/debug/paintmd__armeabi-v7a-debug.apk paintmd__armeabi-v7a-debug-1.0.0-.apk\nWARNING: Received a --sdk argument, but this argument is deprecated and does nothing.\nNo setup.py/pyproject.toml used, copying full private data into .apk.\nApplying Java source code patches...\nApplying patch: src/patches/SDLActivity.java.patch\nWarning: failed to apply patch (exit code 1), assuming it is already applied:  src/patches/SDLActivity.java.patch\n# Android packaging done!\n# APK paintmd-1.0.0-armeabi-v7a-debug.apk available in the bin directory  \u6253\u5305\u5b8c\u6210\u540e\u4f1a\u5728\u9879\u76ee\u7684bin\u76ee\u5f55\u4e0b\u751f\u6210\u4e00\u4e2aapk\u6587\u4ef6\uff0c\u66f4\u591a\u547d\u4ee4\u53ef\u4ee5\u53c2\u8003\u5b98\u65b9\u6587\u6863\u3002",
            "title": "1.\u57fa\u4e8ekivymd\u7684\u6d82\u9e26\u753b\u677f\u7684buildozer\u6253\u5305\u53ca\u9879\u76ee\u6f14\u793a"
        },
        {
            "location": "/chapter9/#2adb",
            "text": "\u6253\u5305\u5b8c\u6210\u540e\u751f\u6210\u7684apk\u6587\u4ef6\u53ef\u4ee5\u5728\u5b89\u5353\u624b\u673a\u4e2d\u5b89\u88c5\u4f7f\u7528\uff0c\u5e76\u901a\u8fc7adb\u8c03\u8bd5\u3002  \u5728\u5b89\u5353\u6a21\u62df\u5668\u4e2d\u7684\u8fd0\u884c\uff1a           \u5728\u5b89\u5353\u624b\u673a\u4e2d\u7684\u8fd0\u884c\uff1a           \u5728adb\u4e0b\u7684\u8c03\u8bd5\u529f\u80fd\uff1a  adb connect 127.0.0.1:7555\nadb shell\n\nrun-as com.xujing.paintmd\n\ncd files/app/.kivy/logs/\ncat kivy_20-07-13_0.txt  \n[INFO   ] Logger: Record log in /data/user/0/com.xujing.paintmd/files/app/.kivy/logs/kivy_20-07-13_0.txt\n[WARNING] [Config      ] Upgrading configuration in progress.\n[WARNING] [Config      ] Older configuration version detected (0 instead of 21)\n[INFO   ] Kivy: v1.11.1\n[INFO   ] Kivy: Installed at \"/data/user/0/com.xujing.paintmd/files/app/_python_bundle/site-packages/kivy/__init__.pyc\"\n[INFO   ] Python: v3.7.5 (default, Jul  6 2020, 17:31:36)\n[Clang 8.0.2 (https://android.googlesource.com/toolchain/clang 40173bab62ec7462\n[INFO   ] Python: Interpreter at \"android_python\"\n[INFO   ] Factory: 184 symbols loaded\n[INFO   ] Image: Providers: img_tex, img_dds, img_sdl2, img_gif (img_pil, img_ffpyplayer ignored)\n[INFO   ] KivyMD: v0.104.1\n[INFO   ] Window: Provider: sdl2\n[INFO   ] GL: Using the \"OpenGL ES 2\" graphics system\n[INFO   ] GL: Backend used <sdl2>\n[INFO   ] GL: OpenGL version <b'OpenGL ES 3.0 (MuMu GL, Powered by ANGLE 2.1.0.axccacxx)'>\n[INFO   ] GL: OpenGL vendor <b'NetEase'>\n[INFO   ] GL: OpenGL renderer <b'MuMu GL (NVIDIA GeForce GTX 1660 SUPER Direct3D11 vs_5_0 ps_5_0)'>\n[INFO   ] GL: OpenGL parsed version: 3, 0\n[INFO   ] GL: Texture max size <16384>\n[INFO   ] GL: Texture max units <16>\n[INFO   ] Window: auto add sdl2 input provider\n[INFO   ] Window: virtual keyboard not allowed, single mode, not docked\n[INFO   ] Text: Provider: sdl2\n[INFO   ] GL: NPOT texture support is available\n[WARNING] Base: Unknown <android> provider\n[INFO   ] Base: Start application main loop  \u7a0b\u5e8f\u6ca1\u6709\u95ea\u9000\u9000\u5207\u65e5\u5fd7\u8bb0\u5f55\u57fa\u672c\u6ca1\u6709\u95ee\u9898\u3002",
            "title": "2.adb \u5b89\u5353\u8c03\u8bd5"
        },
        {
            "location": "/chapter9/#2buildozeradb",
            "text": "",
            "title": "2.\u57fa\u4e8e\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b\u9879\u76ee\u7684buildozer\u5b89\u5353\u6253\u5305\u53caadb\u5b89\u5353\u8c03\u8bd5"
        },
        {
            "location": "/chapter9/#1buildozer",
            "text": "\u667a\u80fd\u8f66\u9053\u7ebf\u9879\u76ee\u7684\u5b89\u5353\u6253\u5305\u4e0e\u4e0a\u4e00\u8282\u4e2d\u4ecb\u7ecd\u7684\u5b8c\u5168\u4e00\u81f4\uff0c\u8fd9\u91cc\u4ec5\u628a buildozer.spec \u6587\u4ef6\u7684\u5185\u5bb9\u505a\u8be6\u7ec6\u7684\u4ecb\u7ecd,\u5176\u5728\u5b89\u5353\u624b\u673a\u4e0a\u7684\u8fd0\u884c\u53ef\u4ee5\u53c2\u8003\u7b2c4\u7ae0\u6216\u6211\u4eec\u7684\u5728\u7ebf\u8bfe\u7a0b\u6f14\u793a  \n[app]\n\n# (str) Title of your application\ntitle = \u8f66\u9053\u7ebf\u68c0\u6d4b\n\n# (str) Package name\npackage.name = myapp\n\n# (str) Package domain (needed for android/ios packaging)\npackage.domain = com.xujing\n\n# (str) Source code where the main.py live\nsource.dir = .\n\n# (list) Source files to include (let empty to include all the files)\nsource.include_exts = py,png,jpg,kv,atlas,ico,ttf\n\n# (list) List of inclusions using pattern matching\n#source.include_patterns = assets/*,images/*.png\nsource.include_patterns = static/*\n\n\n\n# (list) Source files to exclude (let empty to not exclude anything)\n#source.exclude_exts = spec\n\n# (list) List of directory to exclude (let empty to not exclude anything)\n#source.exclude_dirs = tests, bin, venv\n\n# (list) List of exclusions using pattern matching\n#source.exclude_patterns = license,images/*/*.jpg\n\n# (str) Application versioning (method 1)\nversion = 1.0.0\n\n# (str) Application versioning (method 2)\n# version.regex = __version__ = ['\"](.*)['\"]\n# version.filename = %(source.dir)s/main.py\n\n# (list) Application requirements\n# comma separated e.g. requirements = sqlite3,kivy\nrequirements = python3,kivy,numpy,opencv\n\n# (str) Custom source folders for requirements\n# Sets custom source for any requirements with recipes\n# requirements.source.kivy = ../../kivy\n\n# (str) Presplash of the application\n#presplash.filename = %(source.dir)s/data/presplash.png\n\n# (str) Icon of the application\nicon.filename = %(source.dir)s/static/icon.png\n\n# (str) Supported orientation (one of landscape, sensorLandscape, portrait or all)\norientation = portrait\n\n# (list) List of service to declare\n#services = NAME:ENTRYPOINT_TO_PY,NAME2:ENTRYPOINT2_TO_PY\n\n#\n# OSX Specific\n#\n\n#\n# author = \u00a9 Copyright Info\n\n# change the major version of python used by the app\nosx.python_version = 3\n\n# Kivy version to use\nosx.kivy_version = 1.9.1\n\n#\n# Android specific\n#\n\n# (bool) Indicate if the application should be fullscreen or not\nfullscreen = 0\n\n# (string) Presplash background color (for new android toolchain)\n# Supported formats are: #RRGGBB #AARRGGBB or one of the following names:\n# red, blue, green, black, white, gray, cyan, magenta, yellow, lightgray,\n# darkgray, grey, lightgrey, darkgrey, aqua, fuchsia, lime, maroon, navy,\n# olive, purple, silver, teal.\n#android.presplash_color = #FFFFFF\n\n# (list) Permissions\nandroid.permissions = INTERNET,CAMERA,READ_EXTERNAL_STORAGE,WRITE_EXTERNAL_STORAGE\n\n# (int) Target Android API, should be as high as possible.\n#android.api = 27\n\n# (int) Minimum API your APK will support.\n#android.minapi = 21\n\n# (int) Android SDK version to use\n#android.sdk = 20\n\n# (str) Android NDK version to use\n#android.ndk = 19b\n\n# (int) Android NDK API to use. This is the minimum API your app will support, it should usually match android.minapi.\n#android.ndk_api = 21\n\n# (bool) Use --private data storage (True) or --dir public storage (False)\n#android.private_storage = True\n\n# (str) Android NDK directory (if empty, it will be automatically downloaded.)\n#android.ndk_path =\n\n# (str) Android SDK directory (if empty, it will be automatically downloaded.)\n#android.sdk_path =\n\n# (str) ANT directory (if empty, it will be automatically downloaded.)\n#android.ant_path =\n\n# (bool) If True, then skip trying to update the Android sdk\n# This can be useful to avoid excess Internet downloads or save time\n# when an update is due and you just want to test/build your package\n# android.skip_update = False\n\n# (bool) If True, then automatically accept SDK license\n# agreements. This is intended for automation only. If set to False,\n# the default, you will be shown the license when first running\n# buildozer.\n# android.accept_sdk_license = False\n\n# (str) Android entry point, default is ok for Kivy-based app\n#android.entrypoint = org.renpy.android.PythonActivity\n\n# (str) Android app theme, default is ok for Kivy-based app\n# android.apptheme = \"@android:style/Theme.NoTitleBar\"\n\n# (list) Pattern to whitelist for the whole project\n#android.whitelist =\n\n# (str) Path to a custom whitelist file\n#android.whitelist_src =\n\n# (str) Path to a custom blacklist file\n#android.blacklist_src =\n\n# (list) List of Java .jar files to add to the libs so that pyjnius can access\n# their classes. Don't add jars that you do not need, since extra jars can slow\n# down the build process. Allows wildcards matching, for example:\n# OUYA-ODK/libs/*.jar\n#android.add_jars = foo.jar,bar.jar,path/to/more/*.jar\n\n# (list) List of Java files to add to the android project (can be java or a\n# directory containing the files)\n#android.add_src =\n\n# (list) Android AAR archives to add (currently works only with sdl2_gradle\n# bootstrap)\n#android.add_aars =\n\n# (list) Gradle dependencies to add (currently works only with sdl2_gradle\n# bootstrap)\n#android.gradle_dependencies =\n\n# (list) add java compile options\n# this can for example be necessary when importing certain java libraries using the 'android.gradle_dependencies' option\n# see https://developer.android.com/studio/write/java8-support for further information\n# android.add_compile_options = \"sourceCompatibility = 1.8\", \"targetCompatibility = 1.8\"\n\n# (list) Gradle repositories to add {can be necessary for some android.gradle_dependencies}\n# please enclose in double quotes \n# e.g. android.gradle_repositories = \"maven { url 'https://kotlin.bintray.com/ktor' }\"\n#android.add_gradle_repositories =\n\n# (list) packaging options to add \n# see https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.PackagingOptions.html\n# can be necessary to solve conflicts in gradle_dependencies\n# please enclose in double quotes \n# e.g. android.add_packaging_options = \"exclude 'META-INF/common.kotlin_module'\", \"exclude 'META-INF/*.kotlin_module'\"\n#android.add_gradle_repositories =\n\n# (list) Java classes to add as activities to the manifest.\n#android.add_activities = com.example.ExampleActivity\n\n# (str) OUYA Console category. Should be one of GAME or APP\n# If you leave this blank, OUYA support will not be enabled\n#android.ouya.category = GAME\n\n# (str) Filename of OUYA Console icon. It must be a 732x412 png image.\n#android.ouya.icon.filename = %(source.dir)s/data/ouya_icon.png\n\n# (str) XML file to include as an intent filters in <activity> tag\n#android.manifest.intent_filters =\n\n# (str) launchMode to set for the main activity\n#android.manifest.launch_mode = standard\n\n# (list) Android additional libraries to copy into libs/armeabi\n#android.add_libs_armeabi = libs/android/*.so\n#android.add_libs_armeabi_v7a = libs/android-v7/*.so\n#android.add_libs_arm64_v8a = libs/android-v8/*.so\n#android.add_libs_x86 = libs/android-x86/*.so\n#android.add_libs_mips = libs/android-mips/*.so\n\n# (bool) Indicate whether the screen should stay on\n# Don't forget to add the WAKE_LOCK permission if you set this to True\n#android.wakelock = False\n\n# (list) Android application meta-data to set (key=value format)\n#android.meta_data =\n\n# (list) Android library project to add (will be added in the\n# project.properties automatically.)\n#android.library_references =\n\n# (list) Android shared libraries which will be added to AndroidManifest.xml using <uses-library> tag\n#android.uses_library =\n\n# (str) Android logcat filters to use\n#android.logcat_filters = *:S python:D\n\n# (bool) Copy library instead of making a libpymodules.so\n#android.copy_libs = 1\n\n# (str) The Android arch to build for, choices: armeabi-v7a, arm64-v8a, x86, x86_64\nandroid.arch = armeabi-v7a\n\n# (int) overrides automatic versionCode computation (used in build.gradle)\n# this is not the same as app version and should only be edited if you know what you're doing\n# android.numeric_version = 1\n\n#\n# Python for android (p4a) specific\n#\n\n# (str) python-for-android fork to use, defaults to upstream (kivy)\n#p4a.fork = kivy\n\n# (str) python-for-android branch to use, defaults to master\n#p4a.branch = master\n\n# (str) python-for-android git clone directory (if empty, it will be automatically cloned from github)\n#p4a.source_dir =\n\n# (str) The directory in which python-for-android should look for your own build recipes (if any)\n#p4a.local_recipes =\n\n# (str) Filename to the hook for p4a\n#p4a.hook =\n\n# (str) Bootstrap to use for android builds\n# p4a.bootstrap = sdl2\n\n# (int) port number to specify an explicit --port= p4a argument (eg for bootstrap flask)\n#p4a.port =\n\n\n#\n# iOS specific\n#\n\n# (str) Path to a custom kivy-ios folder\n#ios.kivy_ios_dir = ../kivy-ios\n# Alternately, specify the URL and branch of a git checkout:\nios.kivy_ios_url = https://github.com/kivy/kivy-ios\nios.kivy_ios_branch = master\n\n# Another platform dependency: ios-deploy\n# Uncomment to use a custom checkout\n#ios.ios_deploy_dir = ../ios_deploy\n# Or specify URL and branch\nios.ios_deploy_url = https://github.com/phonegap/ios-deploy\nios.ios_deploy_branch = 1.10.0\n\n# (bool) Whether or not to sign the code\nios.codesign.allowed = false\n\n# (str) Name of the certificate to use for signing the debug version\n# Get a list of available identities: buildozer ios list_identities\n#ios.codesign.debug = \"iPhone Developer: <lastname> <firstname> (<hexstring>)\"\n\n# (str) Name of the certificate to use for signing the release version\n#ios.codesign.release = %(ios.codesign.debug)s\n\n\n[buildozer]\n\n# (int) Log level (0 = error only, 1 = info, 2 = debug (with command output))\nlog_level = 2\n\n# (int) Display warning if buildozer is run as root (0 = False, 1 = True)\nwarn_on_root = 1\n\n# (str) Path to build artifact storage, absolute or relative to spec file\n# build_dir = ./.buildozer\n\n# (str) Path to build output (i.e. .apk, .ipa) storage\n# bin_dir = ./bin\n\n#    -----------------------------------------------------------------------------\n#    List as sections\n#\n#    You can define all the \"list\" as [section:key].\n#    Each line will be considered as a option to the list.\n#    Let's take [app] / source.exclude_patterns.\n#    Instead of doing:\n#\n#[app]\n#source.exclude_patterns = license,data/audio/*.wav,data/images/original/*\n#\n#    This can be translated into:\n#\n#[app:source.exclude_patterns]\n#license\n#data/audio/*.wav\n#data/images/original/*\n#\n\n\n#    -----------------------------------------------------------------------------\n#    Profiles\n#\n#    You can extend section / key with a profile\n#    For example, you want to deploy a demo version of your application without\n#    HD content. You could first change the title to add \"(demo)\" in the name\n#    and extend the excluded directories to remove the HD content.\n#\n#[app@demo]\n#title = My Application (demo)\n#\n#[app:source.exclude_patterns@demo]\n#images/hd/*\n#\n#    Then, invoke the command line with the \"demo\" profile:\n#\n#buildozer --profile demo android debug",
            "title": "1.\u57fa\u4e8e\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b\u9879\u76ee\u7684buildozer\u5b89\u5353\u6253\u5305\u53ca\u9879\u76ee\u6f14\u793a"
        },
        {
            "location": "/chapter9/#3gankivymdbuildozeradb",
            "text": "\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\u7684\u4e00\u952e\u73b0\u5b9e\u8f6c\u6362\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fb\u9879\u76ee\u7684\u5b89\u5353\u6253\u5305\u4e0e\u4e0a\u4e00\u8282\u4e2d\u4ecb\u7ecd\u7684\u5b8c\u5168\u4e00\u81f4\uff0c\u8fd9\u91cc\u4ec5\u628a buildozer.spec \u6587\u4ef6\u7684\u5185\u5bb9\u505a\u8be6\u7ec6\u7684\u4ecb\u7ecd,\u5176\u5728\u5b89\u5353\u624b\u673a\u4e0a\u7684\u8fd0\u884c\u53ef\u4ee5\u53c2\u8003\u7b2c5\u7ae0\u6216\u6211\u4eec\u7684\u5728\u7ebf\u8bfe\u7a0b\u6f14\u793a  [app]\n\n# (str) Title of your application\ntitle = GAN\u4e8c\u6b21\u5143\n\n# (str) Package name\npackage.name = ganapp\n\n# (str) Package domain (needed for android/ios packaging)\npackage.domain = com.xujing\n\n# (str) Source code where the main.py live\nsource.dir = .\n\n# (list) Source files to include (let empty to include all the files)\nsource.include_exts = py,png,jpg,kv,atlas,ttf,ico,gif\n\n# (list) List of inclusions using pattern matching\n#source.include_patterns = assets/*,images/*.png\nsource.include_patterns = static/*\n\n\n# (list) Source files to exclude (let empty to not exclude anything)\n#source.exclude_exts = spec\n\n# (list) List of directory to exclude (let empty to not exclude anything)\n#source.exclude_dirs = tests, bin, venv\n\n# (list) List of exclusions using pattern matching\n#source.exclude_patterns = license,images/*/*.jpg\n\n# (str) Application versioning (method 1)\nversion = 1.0.0\n\n# (str) Application versioning (method 2)\n# version.regex = __version__ = ['\"](.*)['\"]\n# version.filename = %(source.dir)s/main.py\n\n# (list) Application requirements\n# comma separated e.g. requirements = sqlite3,kivy\nrequirements = python3==3.7.5,hostpython3==3.7.5,kivy,kivymd,opencv,numpy,requests,Pillow,urllib3,chardet,idna\n\n# (str) Custom source folders for requirements\n# Sets custom source for any requirements with recipes\n# requirements.source.kivy = ../../kivy\n\n# (str) Presplash of the application\n#presplash.filename = %(source.dir)s/data/presplash.png\n\n# (str) Icon of the application\nicon.filename = %(source.dir)s/static/icon.png\n\n# (str) Supported orientation (one of landscape, sensorLandscape, portrait or all)\norientation = portrait\n\n# (list) List of service to declare\n#services = NAME:ENTRYPOINT_TO_PY,NAME2:ENTRYPOINT2_TO_PY\n\n#\n# OSX Specific\n#\n\n#\n# author = \u00a9 Copyright Info\n\n# change the major version of python used by the app\nosx.python_version = 3\n\n# Kivy version to use\nosx.kivy_version = 1.9.1\n\n#\n# Android specific\n#\n\n# (bool) Indicate if the application should be fullscreen or not\nfullscreen = 0\n\n# (string) Presplash background color (for new android toolchain)\n# Supported formats are: #RRGGBB #AARRGGBB or one of the following names:\n# red, blue, green, black, white, gray, cyan, magenta, yellow, lightgray,\n# darkgray, grey, lightgrey, darkgrey, aqua, fuchsia, lime, maroon, navy,\n# olive, purple, silver, teal.\n#android.presplash_color = #FFFFFF\n\n# (list) Permissions\n#android.permissions = INTERNET,\n\n# (int) Target Android API, should be as high as possible.\n#android.api = 27\n\n# (int) Minimum API your APK will support.\n#android.minapi = 21\n\n# (int) Android SDK version to use\n#android.sdk = 20\n\n# (str) Android NDK version to use\n#android.ndk = 19b\n\n# (int) Android NDK API to use. This is the minimum API your app will support, it should usually match android.minapi.\n#android.ndk_api = 21\n\n# (bool) Use --private data storage (True) or --dir public storage (False)\n#android.private_storage = True\n\n# (str) Android NDK directory (if empty, it will be automatically downloaded.)\n#android.ndk_path =\n\n# (str) Android SDK directory (if empty, it will be automatically downloaded.)\n#android.sdk_path =\n\n# (str) ANT directory (if empty, it will be automatically downloaded.)\n#android.ant_path =\n\n# (bool) If True, then skip trying to update the Android sdk\n# This can be useful to avoid excess Internet downloads or save time\n# when an update is due and you just want to test/build your package\n# android.skip_update = False\n\n# (bool) If True, then automatically accept SDK license\n# agreements. This is intended for automation only. If set to False,\n# the default, you will be shown the license when first running\n# buildozer.\n# android.accept_sdk_license = False\n\n# (str) Android entry point, default is ok for Kivy-based app\n#android.entrypoint = org.renpy.android.PythonActivity\n\n# (str) Android app theme, default is ok for Kivy-based app\n# android.apptheme = \"@android:style/Theme.NoTitleBar\"\n\n# (list) Pattern to whitelist for the whole project\n#android.whitelist =\n\n# (str) Path to a custom whitelist file\n#android.whitelist_src =\n\n# (str) Path to a custom blacklist file\n#android.blacklist_src =\n\n# (list) List of Java .jar files to add to the libs so that pyjnius can access\n# their classes. Don't add jars that you do not need, since extra jars can slow\n# down the build process. Allows wildcards matching, for example:\n# OUYA-ODK/libs/*.jar\n#android.add_jars = foo.jar,bar.jar,path/to/more/*.jar\n\n# (list) List of Java files to add to the android project (can be java or a\n# directory containing the files)\n#android.add_src =\n\n# (list) Android AAR archives to add (currently works only with sdl2_gradle\n# bootstrap)\n#android.add_aars =\n\n# (list) Gradle dependencies to add (currently works only with sdl2_gradle\n# bootstrap)\n#android.gradle_dependencies =\n\n# (list) add java compile options\n# this can for example be necessary when importing certain java libraries using the 'android.gradle_dependencies' option\n# see https://developer.android.com/studio/write/java8-support for further information\n# android.add_compile_options = \"sourceCompatibility = 1.8\", \"targetCompatibility = 1.8\"\n\n# (list) Gradle repositories to add {can be necessary for some android.gradle_dependencies}\n# please enclose in double quotes \n# e.g. android.gradle_repositories = \"maven { url 'https://kotlin.bintray.com/ktor' }\"\n#android.add_gradle_repositories =\n\n# (list) packaging options to add \n# see https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.PackagingOptions.html\n# can be necessary to solve conflicts in gradle_dependencies\n# please enclose in double quotes \n# e.g. android.add_packaging_options = \"exclude 'META-INF/common.kotlin_module'\", \"exclude 'META-INF/*.kotlin_module'\"\n#android.add_gradle_repositories =\n\n# (list) Java classes to add as activities to the manifest.\n#android.add_activities = com.example.ExampleActivity\n\n# (str) OUYA Console category. Should be one of GAME or APP\n# If you leave this blank, OUYA support will not be enabled\n#android.ouya.category = GAME\n\n# (str) Filename of OUYA Console icon. It must be a 732x412 png image.\n#android.ouya.icon.filename = %(source.dir)s/data/ouya_icon.png\n\n# (str) XML file to include as an intent filters in <activity> tag\n#android.manifest.intent_filters =\n\n# (str) launchMode to set for the main activity\n#android.manifest.launch_mode = standard\n\n# (list) Android additional libraries to copy into libs/armeabi\n#android.add_libs_armeabi = libs/android/*.so\n#android.add_libs_armeabi_v7a = libs/android-v7/*.so\n#android.add_libs_arm64_v8a = libs/android-v8/*.so\n#android.add_libs_x86 = libs/android-x86/*.so\n#android.add_libs_mips = libs/android-mips/*.so\n\n# (bool) Indicate whether the screen should stay on\n# Don't forget to add the WAKE_LOCK permission if you set this to True\n#android.wakelock = False\n\n# (list) Android application meta-data to set (key=value format)\n#android.meta_data =\n\n# (list) Android library project to add (will be added in the\n# project.properties automatically.)\n#android.library_references =\n\n# (list) Android shared libraries which will be added to AndroidManifest.xml using <uses-library> tag\n#android.uses_library =\n\n# (str) Android logcat filters to use\n#android.logcat_filters = *:S python:D\n\n# (bool) Copy library instead of making a libpymodules.so\n#android.copy_libs = 1\n\n# (str) The Android arch to build for, choices: armeabi-v7a, arm64-v8a, x86, x86_64\nandroid.arch = armeabi-v7a\n\n# (int) overrides automatic versionCode computation (used in build.gradle)\n# this is not the same as app version and should only be edited if you know what you're doing\n# android.numeric_version = 1\n\n#\n# Python for android (p4a) specific\n#\n\n# (str) python-for-android fork to use, defaults to upstream (kivy)\n#p4a.fork = kivy\n\n# (str) python-for-android branch to use, defaults to master\n#p4a.branch = master\n\n# (str) python-for-android git clone directory (if empty, it will be automatically cloned from github)\n#p4a.source_dir =\n\n# (str) The directory in which python-for-android should look for your own build recipes (if any)\n#p4a.local_recipes =\n\n# (str) Filename to the hook for p4a\n#p4a.hook =\n\n# (str) Bootstrap to use for android builds\n# p4a.bootstrap = sdl2\n\n# (int) port number to specify an explicit --port= p4a argument (eg for bootstrap flask)\n#p4a.port =\n\n\n#\n# iOS specific\n#\n\n# (str) Path to a custom kivy-ios folder\n#ios.kivy_ios_dir = ../kivy-ios\n# Alternately, specify the URL and branch of a git checkout:\nios.kivy_ios_url = https://github.com/kivy/kivy-ios\nios.kivy_ios_branch = master\n\n# Another platform dependency: ios-deploy\n# Uncomment to use a custom checkout\n#ios.ios_deploy_dir = ../ios_deploy\n# Or specify URL and branch\nios.ios_deploy_url = https://github.com/phonegap/ios-deploy\nios.ios_deploy_branch = 1.10.0\n\n# (bool) Whether or not to sign the code\nios.codesign.allowed = false\n\n# (str) Name of the certificate to use for signing the debug version\n# Get a list of available identities: buildozer ios list_identities\n#ios.codesign.debug = \"iPhone Developer: <lastname> <firstname> (<hexstring>)\"\n\n# (str) Name of the certificate to use for signing the release version\n#ios.codesign.release = %(ios.codesign.debug)s\n\n\n[buildozer]\n\n# (int) Log level (0 = error only, 1 = info, 2 = debug (with command output))\nlog_level = 2\n\n# (int) Display warning if buildozer is run as root (0 = False, 1 = True)\nwarn_on_root = 1\n\n# (str) Path to build artifact storage, absolute or relative to spec file\n# build_dir = ./.buildozer\n\n# (str) Path to build output (i.e. .apk, .ipa) storage\n# bin_dir = ./bin\n\n#    -----------------------------------------------------------------------------\n#    List as sections\n#\n#    You can define all the \"list\" as [section:key].\n#    Each line will be considered as a option to the list.\n#    Let's take [app] / source.exclude_patterns.\n#    Instead of doing:\n#\n#[app]\n#source.exclude_patterns = license,data/audio/*.wav,data/images/original/*\n#\n#    This can be translated into:\n#\n#[app:source.exclude_patterns]\n#license\n#data/audio/*.wav\n#data/images/original/*\n#\n\n\n#    -----------------------------------------------------------------------------\n#    Profiles\n#\n#    You can extend section / key with a profile\n#    For example, you want to deploy a demo version of your application without\n#    HD content. You could first change the title to add \"(demo)\" in the name\n#    and extend the excluded directories to remove the HD content.\n#\n#[app@demo]\n#title = My Application (demo)\n#\n#[app:source.exclude_patterns@demo]\n#images/hd/*\n#\n#    Then, invoke the command line with the \"demo\" profile:\n#\n#buildozer --profile demo android debug  \u5173\u4e8e\u6253\u5305release\u7248\u672c\u7684android apk, \u53ef\u4ee5\u53c2\u8003 https://github.com/kivy/kivy/wiki/Creating-a-Release-APK",
            "title": "3.\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\u7684\u4e00\u952e\u73b0\u5b9e\u8f6c\u6362\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fb\u9879\u76ee(\u57fa\u4e8eKivymd)buildozer\u5b89\u5353\u6253\u5305\u53caadb\u5b89\u5353\u8c03\u8bd5"
        },
        {
            "location": "/chapter10/",
            "text": "\u7b2c\u5341\u7ae0 \u603b\u7ed3\u52a0\u9879\u76ee\u5c55\u793a\n\n\n\n\n\u672c\u8bfe\u7a0b\u4e2d\u6211\u4eec\u4e3b\u8981\u6d89\u53ca\u5230\u4e864\u4e2a\u9879\u76ee\uff1a\n\n\n\n\n\u57fa\u4e8ePyQt5\u7684AI\u4eac\u5267\u6362\u8138\u8f6f\u4ef6\u5f00\u53d1\n\n\n\u57fa\u4e8ekivy(kivymd)\u7684\u6d82\u9e26\u753b\u677f\u8f6f\u4ef6\u5f00\u53d1\n\n\n\u57fa\u4e8ekivy\u7684\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4bAPP\u5f00\u53d1\n\n\n\u57fa\u4e8ekivymd\u7684GAN\u4e00\u952e\u73b0\u5b9e\u8f6c\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fbAPP\u5f00\u53d1\n\n\n\n\n\u6211\u4eec\u8be6\u7ec6\u7684\u5206\u6b65\u9aa4\u4ecb\u7ecd\u4e86\u6bcf\u4e2a\u9879\u76ee\u7684\u5f00\u53d1\u8fc7\u7a0b\u53ca\u5728windows\u548candroid\u4e0b\u7684\u6253\u5305\u8fc7\u7a0b\uff0c\u6700\u540e\u6211\u4eec\u5728\u672c\u6b21\u8bfe\u5c06\u8be6\u7ec6\u7684\u6f14\u793a\u6211\u4eec\u4e0a\u8ff0\u6d89\u53ca\u7684\u9879\u76ee\u5728\u5b89\u5353\u624b\u673a\u7684\u6f14\u793a\u3002\n\n\n\u624b\u673a\u684c\u9762\n\n\n\n\n \n\n\n\n\n\n\u6d82\u9e26\u753b\u677f\n\n\n\n\n \n\n\n\n\n\n\n\u6d82\u9e26\u753b\u677fmd\n\n\n\n\n \n\n\n\n\n\n\n\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b\n\n\n\n\n \n\n\n\n\n\n\nGAN\u98ce\u683c\u8fc1\u79fb\n\n\n\n\n \n\n\n\n\n\n\n\u6700\u540e\u7684\u4f5c\u4e1a\n\n\n\u57fa\u4e8ekivy\u548ckivymd\u5b9e\u73b0\u4e8c\u7ef4\u7801\u626b\u63cf\u8bc6\u522b\u7684\u5b89\u5353\u5e94\u7528\uff01\n\n\n\n\n \n\n\n\n\n\u9644\u4ef6\uff1a \u57fa\u4e8ePyQt5\u7684AI\u4eac\u5267\u6362\u8138\u8f6f\u4ef6\u7684\u6e90\u7801\u548c\u6f14\u793a\n\n\n\u4e3a\u4e86\u5c55\u793aPyQt5\u4e0eKivy\u7684\u533a\u522b\u548c\u8054\u7cfb\uff0c\u6211\u4eec\u5728\u6700\u540e\u9644\u4e0a\u57fa\u4e8ePyQt5\u7684AI\u4eac\u5267\u6362\u8138\u7684\u8f6f\u4ef6\u5f00\u53d1\u7684\u6e90\u7801\u548c\u6700\u540e\u5728Windows\u6253\u5305\u540e\u7684\u8fd0\u884c\u6f14\u793a\u3002\n\n\n\u8be5\u9879\u76ee\u5f00\u6e90\u5730\u5740\nhttps://github.com/DataXujing/AI-Face-changing-in-Peking-Opera-\n\u6b22\u8fcestar\u548cfork!!!\n\n\n\u57fa\u4e8ePyQt5\u7684AI\u4eac\u5267\u6362\u8138\u9879\u76ee\u5217\u8868\uff1a\n\n\n\n\n \n\n\n\n\n\u8fd9\u91cc\uff1a\n\n\n\n\npb\u6587\u4ef6\u5939\u5b58\u653e\u4e86tensorflow\u8bad\u7ec3\u7684\u4eba\u8138\u68c0\u6d4b\u6a21\u578bmtcnn\n\n\nstatic\u6587\u4ef6\u5939\u5b58\u653e\u4e86\u9879\u76ee\u9700\u8981\u7684\u56fe\u50cf\u7b49\u9759\u6001\u8d44\u6e90\u6587\u4ef6\n\n\n__init__.py\n\u662f\u5305\u6587\u4ef6\n\n\nmtcmm.py\n\u662f\u4eba\u8138\u68c0\u6d4b\u6a21\u578b\u7684\u8c03\u7528\n\n\nmy_main_ui.py\n\u662f\u69fd\u51fd\u6570\n\n\nmy_main_ui.spec\n\u662fpyinstaller\u6253\u5305\u7684\u914d\u7f6e\u6587\u4ef6\n\n\n,y_main_ui_gpu.spec\n\u662fpyinstaller\u6253\u5305\u7684\u914d\u7f6e\u6587\u4ef6(\u5728GPU\u4e0b)\n\n\nmy_pic.qrc\uff0cmy_pic.py\n\u662f\u7f16\u8bd1\u7684\u4e8c\u8fdb\u5236\u9759\u6001\u8d44\u6e90\u6587\u4ef6\n\n\nREADME.md\n\u662f\u9879\u76ee\u7684\u8bf4\u660e\u6587\u6863\n\n\nUi_my_main_ui.py\n\u662fPyQt5\u7684UI\u6587\u4ef6\n\n\n\n\n\u6211\u4eec\u5c31\u6309\u7167\u4e0a\u8ff0\u987a\u5e8f\uff0c\u5bf9\u6d89\u53ca\u5230\u7684\u4e3b\u8981py\u6587\u4ef6\u8fdb\u884c\u5c55\u793a\n\n\n\n\nmtcnn.py\n\n\n\n\nimport argparse\n\nimport tensorflow as tf\nimport cv2\n\n\n# tensorflow = 1.9.0\nclass MTCNN:\n\n    def __init__(self, model_path, min_size=40, factor=0.709, thresholds=[0.6, 0.7, 0.7]):\n        self.min_size = min_size\n        self.factor = factor\n        self.thresholds = thresholds\n\n        graph = tf.Graph()\n        with graph.as_default():\n            with open(model_path, 'rb') as f:\n                graph_def = tf.GraphDef.FromString(f.read())\n                tf.import_graph_def(graph_def, name='')\n        self.graph = graph\n        config = tf.ConfigProto(\n            allow_soft_placement=True,\n            intra_op_parallelism_threads=4,\n            inter_op_parallelism_threads=4)\n        config.gpu_options.allow_growth = True\n        self.sess = tf.Session(graph=graph, config=config)\n\n    def detect(self, img):\n        feeds = {\n            self.graph.get_operation_by_name('input').outputs[0]: img,\n            self.graph.get_operation_by_name('min_size').outputs[0]: self.min_size,\n            self.graph.get_operation_by_name('thresholds').outputs[0]: self.thresholds,\n            self.graph.get_operation_by_name('factor').outputs[0]: self.factor\n        }\n        fetches = [self.graph.get_operation_by_name('prob').outputs[0],\n                  self.graph.get_operation_by_name('landmarks').outputs[0],\n                  self.graph.get_operation_by_name('box').outputs[0]]\n        prob, landmarks, box = self.sess.run(fetches, feeds)\n        return box, prob, landmarks\n\n\ndef main(args):\n    mtcnn = MTCNN('./pb/mtcnn.pb')\n    img = cv2.imread(args.image)\n\n    bbox, scores, landmarks = mtcnn.detect(img)\n\n    print('total box:', len(bbox))\n    for box, pts in zip(bbox, landmarks):\n        box = box.astype('int32')\n        img = cv2.rectangle(img, (box[1], box[0]), (box[3], box[2]), (255, 0, 0), 3)\n\n        pts = pts.astype('int32')\n        for i in range(5):\n            img = cv2.circle(img, (pts[i+5], pts[i]), 1, (0, 255, 0), 2)\n    cv2.imshow('image', img)\n    cv2.waitKey(0)\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='tensorflow mtcnn')\n    parser.add_argument('image', help='image path')\n    args = parser.parse_args()\n    main(args)\n\n\n\n\n\n\n\n\nmy_main_ui.py\n\n\n\n\n# -*- coding: utf-8 -*-\n\n\"\"\"\nxujing\n2020-06-17\nmainwindow\n\"\"\"\n\nimport PyQt5.QtCore\nfrom PyQt5.QtCore import pyqtSlot\nfrom PyQt5.QtWidgets import QMainWindow\n\nfrom Ui_my_main_ui import Ui_MainWindow\n\nfrom PyQt5.QtCore import *\nfrom PyQt5.QtWidgets import  *\nfrom PyQt5 import *\nfrom PyQt5.QtGui import *\nimport sys\nimport time\n\nimport cv2\nimport numpy as np\nfrom PIL import Image\nfrom mtcnn import MTCNN\nfrom numba import jit, prange\n\n# import qdarkstyle\n# dark_stylesheet = qdarkstyle.load_stylesheet_pyqt5()\n\n\n# \u4eff\u5c04\u53d8\u6362\uff0c\u7528\u4e8e\u5c06\u8d34\u56fe\u70b9\u6620\u5c04\u5230\u4eba\u8138\u70b9,\u5f97\u5230\u53d8\u6362\u77e9\u9635M\ndef get_text_trans_matrix(x1, y1, x2, y2, x3, y3, tx1, ty1, tx2, ty2, tx3, ty3):\n    '''\n    src\uff1a\u539f\u59cb\u56fe\u50cf\u4e2d\u7684\u4e09\u4e2a\u70b9\u7684\u5750\u6807\n    dst\uff1a\u53d8\u6362\u540e\u7684\u8fd9\u4e09\u4e2a\u70b9\u5bf9\u5e94\u7684\u5750\u6807\n    M\uff1a\u6839\u636e\u4e09\u4e2a\u5bf9\u5e94\u70b9\u6c42\u51fa\u7684\u4eff\u5c04\u53d8\u6362\u77e9\u96352X3\n    '''\n    # \u653e\u5c04\u53d8\u6362\n    return cv2.getAffineTransform( np.float32([ [tx1, ty1], [tx2, ty2], [tx3, ty3] ]), np.float32( [ [x1, y1], [x2, y2], [x3, y3] ]) ).flatten() # \u6309\u884c\u62c9\u76f4\n    # \u900f\u89c6\u53d8\u6362\n    # return cv2.getPerspectiveTransform( np.float32([ [tx1, ty1], [tx2, ty2], [tx3, ty3] ]), np.float32( [ [x1, y1], [x2, y2], [x3, y3] ]) ).flatten()\n\n@jit(nopython=True)\ndef sticker(srcData, width, height, stride, mask, maskWidth, maskHeight, maskStride, srcFacePoints, maskFacePoints, H):\n    def CLIP3(x, a, b):\n        return min(max(a,x), b)\n    # \u7528\u4e8e\u5c06\u8d34\u56fe\u70b9\u6620\u5c04\u5230\u4eba\u8138\u70b9 \n    for i in range(height):\n    # for i in prange(height):\n        for j in range(width):\n            x = float(i)\n            y = float(j)\n            tx = (int)((H[0] * (x)+H[1] * (y)+H[2]) + 0.5)\n            ty = (int)((H[3] * (x)+H[4] * (y)+H[5]) + 0.5)\n            tx = CLIP3(tx, 0, maskHeight - 1)\n            ty = CLIP3(ty, 0, maskWidth - 1)\n\n            mr = int( mask[ int(tx), int(ty), 0 ] ) \n            mg = int( mask[ int(tx), int(ty), 1 ] ) \n            mb = int( mask[ int(tx), int(ty), 2 ] ) \n            alpha = int( mask[ int(tx), int(ty), 3 ] )  \n            #if alpha!=0:\n            #    print( '>>>', alpha )\n            b = srcData[i, j, 0]\n            g = srcData[i, j, 1]\n            r = srcData[i, j, 2]        \n            srcData[i, j, 0] =CLIP3((b * (255 - alpha) + mb * alpha) / 255, 0, 255)\n            srcData[i, j, 1] =CLIP3((g * (255 - alpha) + mg * alpha) / 255, 0, 255)\n            srcData[i, j, 2] =CLIP3((r * (255 - alpha) + mr * alpha) / 255, 0, 255)\n    return srcData\n\n\n# @jit(parallel=True,nogil=True)\n# @njit(parallel=True,nogil=True)\ndef trent_sticker(srcData, width, height, stride, mask, maskWidth, maskHeight, maskStride, srcFacePoints, maskFacePoints, ratio):\n    ret = 0\n    H = get_text_trans_matrix( maskFacePoints[0], maskFacePoints[1],maskFacePoints[2],maskFacePoints[3],maskFacePoints[4],maskFacePoints[5], srcFacePoints[0], srcFacePoints[1],srcFacePoints[2],srcFacePoints[3],srcFacePoints[4],srcFacePoints[5] )\n    #print ('H', H) \n    srcData = sticker(srcData, width, height, stride, mask, maskWidth, maskHeight, maskStride, srcFacePoints, maskFacePoints, H)\n    return srcData, ret \n\n# \u4eac\u5267\u8138\u8c31\u914d\u7f6e\nface_key_point = {\n    \"01\": [ 958.0,599.0, 958.0,1083.0, 1516.0,838.0 ],\n    \"02\": [ 182.0,155.0, 182.0,243.0, 290.0,199.0 ],\n    \"03\": [ 249.0,224.0, 247.0,342.0, 392.0,247.0 ],\n    \"04\": [ 232.0,136.0, 232.0,267.0, 378.0,200.0 ],\n    \"05\": [ 241.0,189.0, 241.0,323.0, 405.0,253.0 ],\n    \"06\": [ 237.0,159.0, 237.0,284.0, 381.0,213.0 ],\n    \"07\": [ 256.0,219.0, 256.0,342.0, 405.0,281.0 ],\n    \"08\": [ 217.0,185.0, 217.0,298.0, 356.0,243.0 ],\n    \"09\": [ 391.0,223.0, 391.0,428.0, 652.0,324.0 ],\n    \"10\": [ 197.0,203.0, 197.0,313.0, 329.0,249.0 ],\n    \"11\": [ 153.0,98.0, 153.0,164.0, 232.0,129.0 ],\n    \"12\": [ 248.0,216.0, 248.0,345.0, 402.0,280.0 ],\n    \"13\": [ 264.0,177.0, 264.0,325.0, 459.0,252.0 ],\n    \"14\": [ 290.0,171.0, 290.0,333.0, 478.0,250.0 ],\n    \"15\": [ 154.0,105.0, 154.0,196.0, 271.0,149.0]\n    }\n\n\nclass MainWindow(QMainWindow, Ui_MainWindow):\n    \"\"\"\n    Class documentation goes here.\n    \"\"\"\n    def __init__(self, parent=None):\n        \"\"\"\n        Constructor\n\n        @param parent reference to the parent widget\n        @type QWidget\n        \"\"\"\n        super(MainWindow, self).__init__(parent)\n        self.setupUi(self)\n\n        self.left_button = 0\n        self.right_button = 4\n        QToolTip.setFont(QFont('SansSerif', 40))\n\n        self.my_face_choose = \"01\"\n        self.label.mylabelSig.connect(self.label_choose)\n        self.label_2.mylabelSig.connect(self.label_2_choose)\n        self.label_3.mylabelSig.connect(self.label_3_choose)\n        self.label_4.mylabelSig.connect(self.label_4_choose)\n\n\n\n    def label_choose(self):\n        # self.label.setStyleSheet(\"\")\n        self.label_2.setText(\"\")\n        self.label_3.setText(\"\")\n        self.label_4.setText(\"\")\n\n        pe = QPalette()\n        pe.setColor(QPalette.WindowText,Qt.green)#\u8bbe\u7f6e\u5b57\u4f53\u989c\u8272\n        self.label.setPalette(pe)\n\n        self.label.setAlignment(Qt.AlignCenter)\n        self.label.setFont(QFont(\"Roman times\",20,QFont.Bold))\n\n        try:\n            self.label.setText(\"<b>\u9009\u62e9: %02d</b>\"%self.face_1[0])\n            self.my_face_choose = \"%02d\"%self.face_1[0]\n        except:\n            self.label.setText(\"<b>\u9009\u62e9: 01</b>\")\n\n    def label_2_choose(self):\n        # self.label.setStyleSheet(\"\")\n        self.label.setText(\"\")\n        self.label_3.setText(\"\")\n        self.label_4.setText(\"\")\n\n        pe = QPalette()\n        pe.setColor(QPalette.WindowText,Qt.green)#\u8bbe\u7f6e\u5b57\u4f53\u989c\u8272\n        self.label_2.setPalette(pe)\n\n        self.label_2.setAlignment(Qt.AlignCenter)\n        self.label_2.setFont(QFont(\"Roman times\",20,QFont.Bold))\n\n        try:\n            self.label_2.setText(\"<b>\u9009\u62e9: %02d</b>\"%self.face_2[0])\n            self.my_face_choose = \"%02d\"%self.face_2[0]\n        except:\n            self.label_2.setText(\"<b>\u9009\u62e9: 02</b>\")\n            self.my_face_choose = \"02\"\n\n    def label_3_choose(self):\n        # self.label.setStyleSheet(\"\")\n        self.label_2.setText(\"\")\n        self.label.setText(\"\")\n        self.label_4.setText(\"\")\n\n        pe = QPalette()\n        pe.setColor(QPalette.WindowText,Qt.green)#\u8bbe\u7f6e\u5b57\u4f53\u989c\u8272\n        self.label_3.setPalette(pe)\n\n        self.label_3.setAlignment(Qt.AlignCenter)\n        self.label_3.setFont(QFont(\"Roman times\",20,QFont.Bold))\n\n        try:\n            self.label_3.setText(\"<b>\u9009\u62e9: %02d</b>\"%self.face_3[0])\n            self.my_face_choose = \"%02d\"%self.face_3[0]\n        except:\n            self.label_3.setText(\"<b>\u9009\u62e9: 03</b>\")\n            self.my_face_choose = \"03\"\n\n    def label_4_choose(self):\n        # self.label.setStyleSheet(\"\")\n        self.label_2.setText(\"\")\n        self.label_3.setText(\"\")\n        self.label.setText(\"\")\n\n        pe = QPalette()\n        pe.setColor(QPalette.WindowText,Qt.green)#\u8bbe\u7f6e\u5b57\u4f53\u989c\u8272\n        self.label_4.setPalette(pe)\n\n        self.label_4.setAlignment(Qt.AlignCenter)\n        self.label_4.setFont(QFont(\"Roman times\",20,QFont.Bold))\n\n        try:\n            self.label_4.setText(\"<b>\u9009\u62e9: %02d</b>\"%self.face_4[0])\n            self.my_face_choose = \"%02d\"%self.face_4[0]\n        except:\n            self.label_4.setText(\"<b>\u9009\u62e9: 04</b>\")\n            self.my_face_choose = \"04\"\n\n\n\n\n    @pyqtSlot()\n    def on_pushButton_clicked(self):\n        \"\"\"\n        \u5de6\u7ffb\u9875\n        \"\"\"\n\n        if self.right_button == 4:\n            self.left_button += 1\n\n            self.face_1 = [self.left_button+1 if self.left_button <= 11 else 12]\n            self.face_2 = [self.left_button+2 if self.left_button <= 12 else 13]\n            self.face_3 = [self.left_button+3 if self.left_button <= 13 else 14]\n            self.face_4 = [self.left_button+4 if self.left_button <= 14 else 15]\n        else:\n            self.face_1 = [self.face_1[0]+1]\n            self.face_2 = [self.face_2[0]+1]\n            self.face_3 = [self.face_3[0]+1]\n            self.face_4 = [self.face_4[0]+1]\n\n\n        self.label.setStyleSheet(\"border-image: url(:/my_pic/pic/mask/%02d.png);\"%self.face_1[0])\n        self.label_2.setStyleSheet(\"border-image: url(:/my_pic/pic/mask/%02d.png);\"%self.face_2[0])\n        self.label_3.setStyleSheet(\"border-image: url(:/my_pic/pic/mask/%02d.png);\"%self.face_3[0])\n        self.label_4.setStyleSheet(\"border-image: url(:/my_pic/pic/mask/%02d.png);\"%self.face_4[0])\n\n        self.label.setToolTip(\"<b>%02d</b>\"%self.face_1[0])\n        self.label_2.setToolTip(\"<b>%02d</b>\"%self.face_2[0])\n        self.label_3.setToolTip(\"<b>%02d</b>\"%self.face_3[0])\n        self.label_4.setToolTip(\"<b>%02d</b>\"%self.face_4[0])\n\n    @pyqtSlot()\n    def on_pushButton_2_clicked(self):\n        \"\"\"\n        \"\u53f3\u7ffb\u9875\"\n        \"\"\"\n\n        if self.left_button == 0:\n            self.right_button += 1\n\n            self.face_1 = [self.right_button-4 if self.right_button > 4 else 1]\n            self.face_2 = [self.right_button-3 if self.right_button > 3 else 2]\n            self.face_3 = [self.right_button-2 if self.right_button > 2 else 3]\n            self.face_4 = [self.right_button-1 if self.right_button > 1 else 4]\n        else:\n            self.face_1 = [self.face_1[0]-1]\n            self.face_2 = [self.face_2[0]-1]\n            self.face_3 = [self.face_3[0]-1]\n            self.face_4 = [self.face_4[0]-1]\n\n\n        self.label.setStyleSheet(\"border-image: url(:/my_pic/pic/mask/%02d.png);\"%self.face_1[0])\n        self.label_2.setStyleSheet(\"border-image: url(:/my_pic/pic/mask/%02d.png);\"%self.face_2[0])\n        self.label_3.setStyleSheet(\"border-image: url(:/my_pic/pic/mask/%02d.png);\"%self.face_3[0])\n        self.label_4.setStyleSheet(\"border-image: url(:/my_pic/pic/mask/%02d.png);\"%self.face_4[0])\n\n        self.label.setToolTip(\"<b>%02d</b>\"%self.face_1[0])\n        self.label_2.setToolTip(\"<b>%02d</b>\"%self.face_2[0])\n        self.label_3.setToolTip(\"<b>%02d</b>\"%self.face_3[0])\n        self.label_4.setToolTip(\"<b>%02d</b>\"%self.face_4[0])\n\n\n\n    @pyqtSlot()\n    def on_pushButton_3_clicked(self):\n        \"\"\"\n        AI\u4eba\u8138\u8bc6\u522b + \u4eff\u5c04\u53d8\u6362\n        \"\"\"\n        jingju = self.my_face_choose\n        self.my_face_choose = \"01\"\n        self.label.setText(\"\")\n        self.label_2.setText(\"\")\n        self.label_3.setText(\"\")\n        self.label_4.setText(\"\")\n        print(jingju)\n\n        img = Image.open(\"./static/{}.png\".format(jingju)) \n\n        r,g,b,a=img.split()   #\u5206\u79bb4\u901a\u9053 \n        im_array = np.array(img) \n        # \u9ad8\u5bbd\u901a\u9053 (\u5750\u6807\u53d6\u503c\u4e3ay, x) \n        mask_h, mask_w, mask_c = im_array.shape \n\n        try:\n            # img = cv2.imread( './test_img/001.jpg' )\n            openfile_name = QFileDialog.getOpenFileName(self,'AI\u4eac\u5267\u6362\u8138','','JPEG Files(*.jpg);;PNG Files(*.png);;PGM Files(*.pgm)')\n\n            img = cv2.imread( openfile_name[0] )\n            # \u9ad8\u5bbd\u901a\u9053 (\u5750\u6807\u53d6\u503c\u4e3ay, x)\n            h, w, c = img.shape\n            bbox, scores, landmarks = mtcnn.detect(img)\n\n            for box, pts in zip(bbox, landmarks):\n                faceInfos = np.array( [ 1, box[1], box[0], box[3] - box[1], box[2] - box[0], pts[5], pts[0], pts[6], pts[1], pts[7], pts[2], pts[8], pts[3], pts[9], pts[4] ] )\n\n\n            srcFacePoints = np.array( [faceInfos[6], faceInfos[5], faceInfos[8], faceInfos[7], (faceInfos[12]+faceInfos[14])/2.0, (faceInfos[11] + faceInfos[13])/2.0 ] ) \n            print ('srcFacePoints:', srcFacePoints) \n\n\n            maskFacePoints = np.array(face_key_point[jingju]) \n            print ('maskFacePoints:', maskFacePoints)\n\n            # start_time = time.time()\n            srcData, ret  = trent_sticker( img, w, h, 3, im_array, mask_w, mask_h, 4, srcFacePoints, maskFacePoints, 100 ) \n            # print ( 'time >>>>', time.time() - start_time )\n            img_mask = np.array(srcData, dtype=np.uint8) \n            # cv2.imwrite('res.jpg', img_mask)\n\n            bytesPerLine = c * w\n\n            cv2.cvtColor(img, cv2.COLOR_BGR2RGB, img)\n            QImg = QImage(img.data, w, h,bytesPerLine, QImage.Format_RGB888)\n            self.label_6.setAlignment(Qt.AlignCenter)\n            self.label_6.setPixmap(QPixmap.fromImage(QImg).scaled(self.label_6.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation))\n\n            self.save_img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)\n        except Exception as e:\n            print(e)\n\n\n\n    @pyqtSlot()\n    def on_pushButton_5_clicked(self):\n        \"\"\"\n        TODO: \u89c6\u9891\u6d41\n        \"\"\"\n\n        QMessageBox.information(self,\n                                    \"AI\u4eac\u5267\u6362\u8138 \u6d88\u606f\",  \n                                    \"\u76ee\u524d\u4e0d\u63d0\u4f9b\u89c6\u9891\u5e94\u7528\uff01\",  \n                                    QMessageBox.Yes | QMessageBox.No)\n\n    @pyqtSlot()\n    def on_pushButton_4_clicked(self):\n        \"\"\"\n        \u4e0b\u8f7d\u56fe\u50cf\n        \"\"\"\n\n        try:\n            filename=QFileDialog.getSaveFileName(self,'AI\u4eac\u5267\u6362\u8138 \u4fdd\u5b58','','JPEG Files(*.jpg);;PNG Files(*.png);;PGM Files(*.pgm)')\n            cv2.imwrite(filename[0],self.save_img)\n        except:\n            QMessageBox.warning(self,\n                                    \"AI\u4eac\u5267\u6362\u8138 \u8b66\u544a\",  \n                                    \"\u6ca1\u6709\u9700\u8981\u4e0b\u8f7d\u4fdd\u5b58\u7684\u56fe\u7247\uff01\",  \n                                    QMessageBox.Yes | QMessageBox.No)\n\n\n\nif __name__ == \"__main__\":\n\n    app = QtWidgets.QApplication(sys.argv)\n    # app.setStyleSheet(dark_stylesheet)\n\n    splash = QSplashScreen(QtGui.QPixmap(':/my_pic/pic/face.png'))\n    # splash = MySplashScreen('./pic/face.gif', Qt.WindowStaysOnTopHint)\n    splash.show()\n    splash.showMessage('\u6e32\u67d3\u754c\u9762...')\n    # QThread.sleep(0.5)\n    time.sleep(0.5)\n    splash.showMessage('\u6b63\u5728\u521d\u59cb\u5316\u7a0b\u5e8f...')\n    mtcnn = MTCNN('./pb/mtcnn.pb')   # \u5b9e\u4f8b\u5316MTCNN\n    app. processEvents()\n    ui =MainWindow()\n    ui.show()\n    splash.finish(ui)\n    sys.exit(app.exec_())\n\n\n\n\n\n\n\nmy_mian_ui.spec\n\n\n\n\n\n# -*- mode: python ; coding: utf-8 -*-\n\nimport sys\nsys.setrecursionlimit(5000)\n\nblock_cipher = None\n\n\na = Analysis(['my_main_ui.py'],\n             pathex=['C:\\\\Users\\\\xujing.LAPTOP-LLR84L1D\\\\Desktop\\\\Face_AI'],\n             binaries=[],\n             datas=[],\n             hiddenimports=[],\n             hookspath=[],\n             runtime_hooks=[],\n             excludes=[],\n             win_no_prefer_redirects=False,\n             win_private_assemblies=False,\n             cipher=block_cipher,\n             noarchive=False)\npyz = PYZ(a.pure, a.zipped_data,\n             cipher=block_cipher)\nexe = EXE(pyz,\n          a.scripts,\n          [],\n          exclude_binaries=True,\n          name='my_main_ui',\n          debug=False,\n          bootloader_ignore_signals=False,\n          strip=False,\n          upx=True,\n          console=False , icon='icon.ico')\ncoll = COLLECT(exe,\n               a.binaries,\n               a.zipfiles,\n               a.datas,\n               strip=False,\n               upx=True,\n               upx_exclude=[],\n               name='my_main_ui')\n\n\n\n\n\n\n\nUi_my_main_ui.py\n\n\n\n\n\n\n# -*- coding: utf-8 -*-\n\n'''\nCreated by: PyQt5 UI code generator 5.15.0\n\nxujing\n2020-06-17\nui mainwindow\n'''\n\nfrom PyQt5 import QtCore, QtGui, QtWidgets\n\nfrom PyQt5 import QtCore, QtGui, QtWidgets\nfrom PyQt5.QtGui import *\nfrom PyQt5.QtCore import *\nimport sys\n\nfrom PyQt5.QtWidgets import QLabel\nfrom PyQt5.QtCore import pyqtSignal\n\n\nclass MyLabel(QLabel):\n    '''\n    \u91cd\u5199label\uff0c\u589e\u52a0\u5355\u51fb\u7684\u4fe1\u53f7\u51fd\u6570\n    '''\n    mylabelSig = pyqtSignal(str)\n    # mylabelDoubleClickSig = pyqtSignal(str)\n\n    def __int__(self):\n        super(MyLabel, self).__init__()\n\n    def mousePressEvent(self, e):    # \u5355\u51fb\n        sigContent = self.objectName()\n        self.mylabelSig.emit(sigContent)\n\nclass Ui_MainWindow(object):\n    def setupUi(self, MainWindow):\n        button_style = ''' \n         QPushButton\n         {text-align : center;\n         background-color : white;\n         font: bold;\n         border-color: gray;\n         border-width: 2px;\n         border-radius: 10px;\n         padding: 6px;\n         height : 14px;\n         border-style: outset;\n         font : 14px;}\n         QPushButton:pressed\n         {text-align : center;\n         background-color : light gray;\n         font: bold;\n         border-color: gray;\n         border-width: 2px;\n         border-radius: 10px;\n         padding: 6px;\n         height : 14px;\n         border-style: outset;\n         font : 14px;}\n        '''\n\n        MainWindow.setObjectName(\"MainWindow\")\n        MainWindow.resize(967, 787)\n        icon = QtGui.QIcon()\n        icon.addPixmap(QtGui.QPixmap(\":/my_pic/pic/\u8138\u8c31.png\"), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n        MainWindow.setWindowIcon(icon)\n        self.centralWidget = QtWidgets.QWidget(MainWindow)\n        self.centralWidget.setObjectName(\"centralWidget\")\n        self.gridLayout = QtWidgets.QGridLayout(self.centralWidget)\n        self.gridLayout.setObjectName(\"gridLayout\")\n        self.horizontalLayout = QtWidgets.QHBoxLayout()\n        self.horizontalLayout.setObjectName(\"horizontalLayout\")\n        self.pushButton = QtWidgets.QPushButton(self.centralWidget)\n        self.pushButton.setMinimumSize(QtCore.QSize(149, 200))\n        self.pushButton.setStyleSheet(\"border-image: url(:/my_pic/pic/\u5de6\u7ffb\u9875.png);\")\n        self.pushButton.setText(\"\")\n        self.pushButton.setObjectName(\"pushButton\")\n        self.horizontalLayout.addWidget(self.pushButton)\n        # self.label = QtWidgets.QLabel(self.centralWidget)\n        self.label = MyLabel()\n        self.label.setMinimumSize(QtCore.QSize(131, 179))\n        self.label.setMaximumSize(QtCore.QSize(262, 682))\n        self.label.setStyleSheet(\"border-image: url(:/my_pic/pic/mask/01.png);\")\n        self.label.setText(\"\")\n        self.label.setObjectName(\"label\")\n        self.horizontalLayout.addWidget(self.label)\n        # self.label_2 = QtWidgets.QLabel(self.centralWidget)\n        self.label_2 = MyLabel()\n        self.label_2.setMaximumSize(QtCore.QSize(298, 682))\n        self.label_2.setStyleSheet(\"border-image: url(:/my_pic/pic/mask/02.png);\")\n        self.label_2.setText(\"\")\n        self.label_2.setObjectName(\"label_2\")\n        self.horizontalLayout.addWidget(self.label_2)\n        # self.label_3 = QtWidgets.QLabel(self.centralWidget)\n        self.label_3 = MyLabel()\n        self.label_3.setMaximumSize(QtCore.QSize(298, 682))\n        self.label_3.setStyleSheet(\"border-image: url(:/my_pic/pic/mask/03.png);\")\n        self.label_3.setText(\"\")\n        self.label_3.setObjectName(\"label_3\")\n        self.horizontalLayout.addWidget(self.label_3)\n        # self.label_4 = QtWidgets.QLabel(self.centralWidget)\n        self.label_4 = MyLabel()\n        self.label_4.setMaximumSize(QtCore.QSize(298, 682))\n        self.label_4.setStyleSheet(\"border-image: url(:/my_pic/pic/mask/04.png);\")\n        self.label_4.setText(\"\")\n        self.label_4.setObjectName(\"label_4\")\n        self.horizontalLayout.addWidget(self.label_4)\n        self.pushButton_2 = QtWidgets.QPushButton(self.centralWidget)\n        self.pushButton_2.setMinimumSize(QtCore.QSize(149, 200))\n        self.pushButton_2.setStyleSheet(\"border-image: url(:/my_pic/pic/\u53f3\u7ffb\u9875.png);\")\n        self.pushButton_2.setText(\"\")\n        self.pushButton_2.setObjectName(\"pushButton_2\")\n        self.horizontalLayout.addWidget(self.pushButton_2)\n        self.gridLayout.addLayout(self.horizontalLayout, 0, 0, 1, 3)\n        self.line = QtWidgets.QFrame(self.centralWidget)\n        self.line.setFrameShape(QtWidgets.QFrame.HLine)\n        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)\n        self.line.setObjectName(\"line\")\n        self.gridLayout.addWidget(self.line, 1, 0, 1, 3)\n        self.label_6 = QtWidgets.QLabel(self.centralWidget)\n        self.label_6.setMaximumSize(QtCore.QSize(1882, 684))\n        self.label_6.setStyleSheet(\"image: url(:/my_pic/pic/face.png);\")\n        self.label_6.setText(\"\")\n        self.label_6.setObjectName(\"label_6\")\n        self.gridLayout.addWidget(self.label_6, 2, 0, 1, 3)\n        self.pushButton_3 = QtWidgets.QPushButton(self.centralWidget)\n        self.pushButton_3.setStyleSheet(button_style)\n        self.pushButton_3.setMinimumSize(QtCore.QSize(200, 40))\n        icon1 = QtGui.QIcon()\n        icon1.addPixmap(QtGui.QPixmap(\":/my_pic/pic/\u56fe\u7247.png\"), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n        self.pushButton_3.setIcon(icon1)\n        self.pushButton_3.setObjectName(\"pushButton_3\")\n        self.gridLayout.addWidget(self.pushButton_3, 4, 0, 1, 1)\n        self.pushButton_5 = QtWidgets.QPushButton(self.centralWidget)\n        self.pushButton_5.setStyleSheet(button_style)\n        self.pushButton_5.setMinimumSize(QtCore.QSize(200, 40))\n        icon2 = QtGui.QIcon()\n        icon2.addPixmap(QtGui.QPixmap(\":/my_pic/pic/\u89c6\u9891.png\"), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n        self.pushButton_5.setIcon(icon2)\n        self.pushButton_5.setObjectName(\"pushButton_5\")\n        self.gridLayout.addWidget(self.pushButton_5, 4, 2, 1, 1)\n        self.line_2 = QtWidgets.QFrame(self.centralWidget)\n        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)\n        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)\n        self.line_2.setObjectName(\"line_2\")\n        self.gridLayout.addWidget(self.line_2, 3, 0, 1, 3)\n        self.pushButton_4 = QtWidgets.QPushButton(self.centralWidget)\n        self.pushButton_4.setStyleSheet(button_style)\n        self.pushButton_4.setMinimumSize(QtCore.QSize(200, 40))\n        icon3 = QtGui.QIcon()\n        icon3.addPixmap(QtGui.QPixmap(\":/my_pic/pic/\u4e0b\u8f7d \u7eff\u8272.png\"), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n        self.pushButton_4.setIcon(icon3)\n        self.pushButton_4.setObjectName(\"pushButton_4\")\n        self.gridLayout.addWidget(self.pushButton_4, 4, 1, 1, 1)\n        MainWindow.setCentralWidget(self.centralWidget)\n\n        self.retranslateUi(MainWindow)\n        QtCore.QMetaObject.connectSlotsByName(MainWindow)\n\n    def retranslateUi(self, MainWindow):\n        _translate = QtCore.QCoreApplication.translate\n        MainWindow.setWindowTitle(_translate(\"MainWindow\", \"AI\u4eac\u5267\u6362\u8138\"))\n        self.pushButton_3.setText(_translate(\"MainWindow\", \"\u52a0\u8f7d\u56fe\u50cf\"))\n        self.pushButton_5.setText(_translate(\"MainWindow\", \"\u52a0\u8f7d\u89c6\u9891\"))\n        self.pushButton_4.setText(_translate(\"MainWindow\", \"\u4fdd\u5b58\u56fe\u50cf\"))\nimport my_pic_rc\n\n\nif __name__ == \"__main__\":\n    import sys\n    app = QtWidgets.QApplication(sys.argv)\n    MainWindow = QtWidgets.QMainWindow()\n    ui = Ui_MainWindow()\n    ui.setupUi(MainWindow)\n    MainWindow.show()\n    sys.exit(app.exec_())\n\n\n\n\n\n\u6309\u7167\u7b2c6\u7ae0\u548c\u7b2c7\u7ae0\u7684\u6253\u5305\u65b9\u5f0f\uff0c\u6253\u5305\u5b89\u88c5\u540e\u7684\u8fd0\u884c\u6548\u679c\uff1a\n\n\n\u67e5\u770b\u5728\u7535\u8111\u7684\u5b89\u88c5\u60c5\u51b5\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\u8fd0\u884c\uff1a\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\u4fdd\u5b58\u7684\u56fe\u7247\uff1a",
            "title": "\u7b2c\u5341\u7ae0 \u603b\u7ed3\u53ca\u9879\u76ee\u5c55\u793a"
        },
        {
            "location": "/chapter10/#_1",
            "text": "\u672c\u8bfe\u7a0b\u4e2d\u6211\u4eec\u4e3b\u8981\u6d89\u53ca\u5230\u4e864\u4e2a\u9879\u76ee\uff1a   \u57fa\u4e8ePyQt5\u7684AI\u4eac\u5267\u6362\u8138\u8f6f\u4ef6\u5f00\u53d1  \u57fa\u4e8ekivy(kivymd)\u7684\u6d82\u9e26\u753b\u677f\u8f6f\u4ef6\u5f00\u53d1  \u57fa\u4e8ekivy\u7684\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4bAPP\u5f00\u53d1  \u57fa\u4e8ekivymd\u7684GAN\u4e00\u952e\u73b0\u5b9e\u8f6c\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fbAPP\u5f00\u53d1   \u6211\u4eec\u8be6\u7ec6\u7684\u5206\u6b65\u9aa4\u4ecb\u7ecd\u4e86\u6bcf\u4e2a\u9879\u76ee\u7684\u5f00\u53d1\u8fc7\u7a0b\u53ca\u5728windows\u548candroid\u4e0b\u7684\u6253\u5305\u8fc7\u7a0b\uff0c\u6700\u540e\u6211\u4eec\u5728\u672c\u6b21\u8bfe\u5c06\u8be6\u7ec6\u7684\u6f14\u793a\u6211\u4eec\u4e0a\u8ff0\u6d89\u53ca\u7684\u9879\u76ee\u5728\u5b89\u5353\u624b\u673a\u7684\u6f14\u793a\u3002  \u624b\u673a\u684c\u9762       \u6d82\u9e26\u753b\u677f       \u6d82\u9e26\u753b\u677fmd       \u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b       GAN\u98ce\u683c\u8fc1\u79fb",
            "title": "\u7b2c\u5341\u7ae0 \u603b\u7ed3\u52a0\u9879\u76ee\u5c55\u793a"
        },
        {
            "location": "/chapter10/#_2",
            "text": "\u57fa\u4e8ekivy\u548ckivymd\u5b9e\u73b0\u4e8c\u7ef4\u7801\u626b\u63cf\u8bc6\u522b\u7684\u5b89\u5353\u5e94\u7528\uff01",
            "title": "\u6700\u540e\u7684\u4f5c\u4e1a"
        },
        {
            "location": "/chapter10/#pyqt5ai",
            "text": "\u4e3a\u4e86\u5c55\u793aPyQt5\u4e0eKivy\u7684\u533a\u522b\u548c\u8054\u7cfb\uff0c\u6211\u4eec\u5728\u6700\u540e\u9644\u4e0a\u57fa\u4e8ePyQt5\u7684AI\u4eac\u5267\u6362\u8138\u7684\u8f6f\u4ef6\u5f00\u53d1\u7684\u6e90\u7801\u548c\u6700\u540e\u5728Windows\u6253\u5305\u540e\u7684\u8fd0\u884c\u6f14\u793a\u3002  \u8be5\u9879\u76ee\u5f00\u6e90\u5730\u5740 https://github.com/DataXujing/AI-Face-changing-in-Peking-Opera- \u6b22\u8fcestar\u548cfork!!!  \u57fa\u4e8ePyQt5\u7684AI\u4eac\u5267\u6362\u8138\u9879\u76ee\u5217\u8868\uff1a      \u8fd9\u91cc\uff1a   pb\u6587\u4ef6\u5939\u5b58\u653e\u4e86tensorflow\u8bad\u7ec3\u7684\u4eba\u8138\u68c0\u6d4b\u6a21\u578bmtcnn  static\u6587\u4ef6\u5939\u5b58\u653e\u4e86\u9879\u76ee\u9700\u8981\u7684\u56fe\u50cf\u7b49\u9759\u6001\u8d44\u6e90\u6587\u4ef6  __init__.py \u662f\u5305\u6587\u4ef6  mtcmm.py \u662f\u4eba\u8138\u68c0\u6d4b\u6a21\u578b\u7684\u8c03\u7528  my_main_ui.py \u662f\u69fd\u51fd\u6570  my_main_ui.spec \u662fpyinstaller\u6253\u5305\u7684\u914d\u7f6e\u6587\u4ef6  ,y_main_ui_gpu.spec \u662fpyinstaller\u6253\u5305\u7684\u914d\u7f6e\u6587\u4ef6(\u5728GPU\u4e0b)  my_pic.qrc\uff0cmy_pic.py \u662f\u7f16\u8bd1\u7684\u4e8c\u8fdb\u5236\u9759\u6001\u8d44\u6e90\u6587\u4ef6  README.md \u662f\u9879\u76ee\u7684\u8bf4\u660e\u6587\u6863  Ui_my_main_ui.py \u662fPyQt5\u7684UI\u6587\u4ef6   \u6211\u4eec\u5c31\u6309\u7167\u4e0a\u8ff0\u987a\u5e8f\uff0c\u5bf9\u6d89\u53ca\u5230\u7684\u4e3b\u8981py\u6587\u4ef6\u8fdb\u884c\u5c55\u793a   mtcnn.py   import argparse\n\nimport tensorflow as tf\nimport cv2\n\n\n# tensorflow = 1.9.0\nclass MTCNN:\n\n    def __init__(self, model_path, min_size=40, factor=0.709, thresholds=[0.6, 0.7, 0.7]):\n        self.min_size = min_size\n        self.factor = factor\n        self.thresholds = thresholds\n\n        graph = tf.Graph()\n        with graph.as_default():\n            with open(model_path, 'rb') as f:\n                graph_def = tf.GraphDef.FromString(f.read())\n                tf.import_graph_def(graph_def, name='')\n        self.graph = graph\n        config = tf.ConfigProto(\n            allow_soft_placement=True,\n            intra_op_parallelism_threads=4,\n            inter_op_parallelism_threads=4)\n        config.gpu_options.allow_growth = True\n        self.sess = tf.Session(graph=graph, config=config)\n\n    def detect(self, img):\n        feeds = {\n            self.graph.get_operation_by_name('input').outputs[0]: img,\n            self.graph.get_operation_by_name('min_size').outputs[0]: self.min_size,\n            self.graph.get_operation_by_name('thresholds').outputs[0]: self.thresholds,\n            self.graph.get_operation_by_name('factor').outputs[0]: self.factor\n        }\n        fetches = [self.graph.get_operation_by_name('prob').outputs[0],\n                  self.graph.get_operation_by_name('landmarks').outputs[0],\n                  self.graph.get_operation_by_name('box').outputs[0]]\n        prob, landmarks, box = self.sess.run(fetches, feeds)\n        return box, prob, landmarks\n\n\ndef main(args):\n    mtcnn = MTCNN('./pb/mtcnn.pb')\n    img = cv2.imread(args.image)\n\n    bbox, scores, landmarks = mtcnn.detect(img)\n\n    print('total box:', len(bbox))\n    for box, pts in zip(bbox, landmarks):\n        box = box.astype('int32')\n        img = cv2.rectangle(img, (box[1], box[0]), (box[3], box[2]), (255, 0, 0), 3)\n\n        pts = pts.astype('int32')\n        for i in range(5):\n            img = cv2.circle(img, (pts[i+5], pts[i]), 1, (0, 255, 0), 2)\n    cv2.imshow('image', img)\n    cv2.waitKey(0)\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='tensorflow mtcnn')\n    parser.add_argument('image', help='image path')\n    args = parser.parse_args()\n    main(args)   my_main_ui.py   # -*- coding: utf-8 -*-\n\n\"\"\"\nxujing\n2020-06-17\nmainwindow\n\"\"\"\n\nimport PyQt5.QtCore\nfrom PyQt5.QtCore import pyqtSlot\nfrom PyQt5.QtWidgets import QMainWindow\n\nfrom Ui_my_main_ui import Ui_MainWindow\n\nfrom PyQt5.QtCore import *\nfrom PyQt5.QtWidgets import  *\nfrom PyQt5 import *\nfrom PyQt5.QtGui import *\nimport sys\nimport time\n\nimport cv2\nimport numpy as np\nfrom PIL import Image\nfrom mtcnn import MTCNN\nfrom numba import jit, prange\n\n# import qdarkstyle\n# dark_stylesheet = qdarkstyle.load_stylesheet_pyqt5()\n\n\n# \u4eff\u5c04\u53d8\u6362\uff0c\u7528\u4e8e\u5c06\u8d34\u56fe\u70b9\u6620\u5c04\u5230\u4eba\u8138\u70b9,\u5f97\u5230\u53d8\u6362\u77e9\u9635M\ndef get_text_trans_matrix(x1, y1, x2, y2, x3, y3, tx1, ty1, tx2, ty2, tx3, ty3):\n    '''\n    src\uff1a\u539f\u59cb\u56fe\u50cf\u4e2d\u7684\u4e09\u4e2a\u70b9\u7684\u5750\u6807\n    dst\uff1a\u53d8\u6362\u540e\u7684\u8fd9\u4e09\u4e2a\u70b9\u5bf9\u5e94\u7684\u5750\u6807\n    M\uff1a\u6839\u636e\u4e09\u4e2a\u5bf9\u5e94\u70b9\u6c42\u51fa\u7684\u4eff\u5c04\u53d8\u6362\u77e9\u96352X3\n    '''\n    # \u653e\u5c04\u53d8\u6362\n    return cv2.getAffineTransform( np.float32([ [tx1, ty1], [tx2, ty2], [tx3, ty3] ]), np.float32( [ [x1, y1], [x2, y2], [x3, y3] ]) ).flatten() # \u6309\u884c\u62c9\u76f4\n    # \u900f\u89c6\u53d8\u6362\n    # return cv2.getPerspectiveTransform( np.float32([ [tx1, ty1], [tx2, ty2], [tx3, ty3] ]), np.float32( [ [x1, y1], [x2, y2], [x3, y3] ]) ).flatten()\n\n@jit(nopython=True)\ndef sticker(srcData, width, height, stride, mask, maskWidth, maskHeight, maskStride, srcFacePoints, maskFacePoints, H):\n    def CLIP3(x, a, b):\n        return min(max(a,x), b)\n    # \u7528\u4e8e\u5c06\u8d34\u56fe\u70b9\u6620\u5c04\u5230\u4eba\u8138\u70b9 \n    for i in range(height):\n    # for i in prange(height):\n        for j in range(width):\n            x = float(i)\n            y = float(j)\n            tx = (int)((H[0] * (x)+H[1] * (y)+H[2]) + 0.5)\n            ty = (int)((H[3] * (x)+H[4] * (y)+H[5]) + 0.5)\n            tx = CLIP3(tx, 0, maskHeight - 1)\n            ty = CLIP3(ty, 0, maskWidth - 1)\n\n            mr = int( mask[ int(tx), int(ty), 0 ] ) \n            mg = int( mask[ int(tx), int(ty), 1 ] ) \n            mb = int( mask[ int(tx), int(ty), 2 ] ) \n            alpha = int( mask[ int(tx), int(ty), 3 ] )  \n            #if alpha!=0:\n            #    print( '>>>', alpha )\n            b = srcData[i, j, 0]\n            g = srcData[i, j, 1]\n            r = srcData[i, j, 2]        \n            srcData[i, j, 0] =CLIP3((b * (255 - alpha) + mb * alpha) / 255, 0, 255)\n            srcData[i, j, 1] =CLIP3((g * (255 - alpha) + mg * alpha) / 255, 0, 255)\n            srcData[i, j, 2] =CLIP3((r * (255 - alpha) + mr * alpha) / 255, 0, 255)\n    return srcData\n\n\n# @jit(parallel=True,nogil=True)\n# @njit(parallel=True,nogil=True)\ndef trent_sticker(srcData, width, height, stride, mask, maskWidth, maskHeight, maskStride, srcFacePoints, maskFacePoints, ratio):\n    ret = 0\n    H = get_text_trans_matrix( maskFacePoints[0], maskFacePoints[1],maskFacePoints[2],maskFacePoints[3],maskFacePoints[4],maskFacePoints[5], srcFacePoints[0], srcFacePoints[1],srcFacePoints[2],srcFacePoints[3],srcFacePoints[4],srcFacePoints[5] )\n    #print ('H', H) \n    srcData = sticker(srcData, width, height, stride, mask, maskWidth, maskHeight, maskStride, srcFacePoints, maskFacePoints, H)\n    return srcData, ret \n\n# \u4eac\u5267\u8138\u8c31\u914d\u7f6e\nface_key_point = {\n    \"01\": [ 958.0,599.0, 958.0,1083.0, 1516.0,838.0 ],\n    \"02\": [ 182.0,155.0, 182.0,243.0, 290.0,199.0 ],\n    \"03\": [ 249.0,224.0, 247.0,342.0, 392.0,247.0 ],\n    \"04\": [ 232.0,136.0, 232.0,267.0, 378.0,200.0 ],\n    \"05\": [ 241.0,189.0, 241.0,323.0, 405.0,253.0 ],\n    \"06\": [ 237.0,159.0, 237.0,284.0, 381.0,213.0 ],\n    \"07\": [ 256.0,219.0, 256.0,342.0, 405.0,281.0 ],\n    \"08\": [ 217.0,185.0, 217.0,298.0, 356.0,243.0 ],\n    \"09\": [ 391.0,223.0, 391.0,428.0, 652.0,324.0 ],\n    \"10\": [ 197.0,203.0, 197.0,313.0, 329.0,249.0 ],\n    \"11\": [ 153.0,98.0, 153.0,164.0, 232.0,129.0 ],\n    \"12\": [ 248.0,216.0, 248.0,345.0, 402.0,280.0 ],\n    \"13\": [ 264.0,177.0, 264.0,325.0, 459.0,252.0 ],\n    \"14\": [ 290.0,171.0, 290.0,333.0, 478.0,250.0 ],\n    \"15\": [ 154.0,105.0, 154.0,196.0, 271.0,149.0]\n    }\n\n\nclass MainWindow(QMainWindow, Ui_MainWindow):\n    \"\"\"\n    Class documentation goes here.\n    \"\"\"\n    def __init__(self, parent=None):\n        \"\"\"\n        Constructor\n\n        @param parent reference to the parent widget\n        @type QWidget\n        \"\"\"\n        super(MainWindow, self).__init__(parent)\n        self.setupUi(self)\n\n        self.left_button = 0\n        self.right_button = 4\n        QToolTip.setFont(QFont('SansSerif', 40))\n\n        self.my_face_choose = \"01\"\n        self.label.mylabelSig.connect(self.label_choose)\n        self.label_2.mylabelSig.connect(self.label_2_choose)\n        self.label_3.mylabelSig.connect(self.label_3_choose)\n        self.label_4.mylabelSig.connect(self.label_4_choose)\n\n\n\n    def label_choose(self):\n        # self.label.setStyleSheet(\"\")\n        self.label_2.setText(\"\")\n        self.label_3.setText(\"\")\n        self.label_4.setText(\"\")\n\n        pe = QPalette()\n        pe.setColor(QPalette.WindowText,Qt.green)#\u8bbe\u7f6e\u5b57\u4f53\u989c\u8272\n        self.label.setPalette(pe)\n\n        self.label.setAlignment(Qt.AlignCenter)\n        self.label.setFont(QFont(\"Roman times\",20,QFont.Bold))\n\n        try:\n            self.label.setText(\"<b>\u9009\u62e9: %02d</b>\"%self.face_1[0])\n            self.my_face_choose = \"%02d\"%self.face_1[0]\n        except:\n            self.label.setText(\"<b>\u9009\u62e9: 01</b>\")\n\n    def label_2_choose(self):\n        # self.label.setStyleSheet(\"\")\n        self.label.setText(\"\")\n        self.label_3.setText(\"\")\n        self.label_4.setText(\"\")\n\n        pe = QPalette()\n        pe.setColor(QPalette.WindowText,Qt.green)#\u8bbe\u7f6e\u5b57\u4f53\u989c\u8272\n        self.label_2.setPalette(pe)\n\n        self.label_2.setAlignment(Qt.AlignCenter)\n        self.label_2.setFont(QFont(\"Roman times\",20,QFont.Bold))\n\n        try:\n            self.label_2.setText(\"<b>\u9009\u62e9: %02d</b>\"%self.face_2[0])\n            self.my_face_choose = \"%02d\"%self.face_2[0]\n        except:\n            self.label_2.setText(\"<b>\u9009\u62e9: 02</b>\")\n            self.my_face_choose = \"02\"\n\n    def label_3_choose(self):\n        # self.label.setStyleSheet(\"\")\n        self.label_2.setText(\"\")\n        self.label.setText(\"\")\n        self.label_4.setText(\"\")\n\n        pe = QPalette()\n        pe.setColor(QPalette.WindowText,Qt.green)#\u8bbe\u7f6e\u5b57\u4f53\u989c\u8272\n        self.label_3.setPalette(pe)\n\n        self.label_3.setAlignment(Qt.AlignCenter)\n        self.label_3.setFont(QFont(\"Roman times\",20,QFont.Bold))\n\n        try:\n            self.label_3.setText(\"<b>\u9009\u62e9: %02d</b>\"%self.face_3[0])\n            self.my_face_choose = \"%02d\"%self.face_3[0]\n        except:\n            self.label_3.setText(\"<b>\u9009\u62e9: 03</b>\")\n            self.my_face_choose = \"03\"\n\n    def label_4_choose(self):\n        # self.label.setStyleSheet(\"\")\n        self.label_2.setText(\"\")\n        self.label_3.setText(\"\")\n        self.label.setText(\"\")\n\n        pe = QPalette()\n        pe.setColor(QPalette.WindowText,Qt.green)#\u8bbe\u7f6e\u5b57\u4f53\u989c\u8272\n        self.label_4.setPalette(pe)\n\n        self.label_4.setAlignment(Qt.AlignCenter)\n        self.label_4.setFont(QFont(\"Roman times\",20,QFont.Bold))\n\n        try:\n            self.label_4.setText(\"<b>\u9009\u62e9: %02d</b>\"%self.face_4[0])\n            self.my_face_choose = \"%02d\"%self.face_4[0]\n        except:\n            self.label_4.setText(\"<b>\u9009\u62e9: 04</b>\")\n            self.my_face_choose = \"04\"\n\n\n\n\n    @pyqtSlot()\n    def on_pushButton_clicked(self):\n        \"\"\"\n        \u5de6\u7ffb\u9875\n        \"\"\"\n\n        if self.right_button == 4:\n            self.left_button += 1\n\n            self.face_1 = [self.left_button+1 if self.left_button <= 11 else 12]\n            self.face_2 = [self.left_button+2 if self.left_button <= 12 else 13]\n            self.face_3 = [self.left_button+3 if self.left_button <= 13 else 14]\n            self.face_4 = [self.left_button+4 if self.left_button <= 14 else 15]\n        else:\n            self.face_1 = [self.face_1[0]+1]\n            self.face_2 = [self.face_2[0]+1]\n            self.face_3 = [self.face_3[0]+1]\n            self.face_4 = [self.face_4[0]+1]\n\n\n        self.label.setStyleSheet(\"border-image: url(:/my_pic/pic/mask/%02d.png);\"%self.face_1[0])\n        self.label_2.setStyleSheet(\"border-image: url(:/my_pic/pic/mask/%02d.png);\"%self.face_2[0])\n        self.label_3.setStyleSheet(\"border-image: url(:/my_pic/pic/mask/%02d.png);\"%self.face_3[0])\n        self.label_4.setStyleSheet(\"border-image: url(:/my_pic/pic/mask/%02d.png);\"%self.face_4[0])\n\n        self.label.setToolTip(\"<b>%02d</b>\"%self.face_1[0])\n        self.label_2.setToolTip(\"<b>%02d</b>\"%self.face_2[0])\n        self.label_3.setToolTip(\"<b>%02d</b>\"%self.face_3[0])\n        self.label_4.setToolTip(\"<b>%02d</b>\"%self.face_4[0])\n\n    @pyqtSlot()\n    def on_pushButton_2_clicked(self):\n        \"\"\"\n        \"\u53f3\u7ffb\u9875\"\n        \"\"\"\n\n        if self.left_button == 0:\n            self.right_button += 1\n\n            self.face_1 = [self.right_button-4 if self.right_button > 4 else 1]\n            self.face_2 = [self.right_button-3 if self.right_button > 3 else 2]\n            self.face_3 = [self.right_button-2 if self.right_button > 2 else 3]\n            self.face_4 = [self.right_button-1 if self.right_button > 1 else 4]\n        else:\n            self.face_1 = [self.face_1[0]-1]\n            self.face_2 = [self.face_2[0]-1]\n            self.face_3 = [self.face_3[0]-1]\n            self.face_4 = [self.face_4[0]-1]\n\n\n        self.label.setStyleSheet(\"border-image: url(:/my_pic/pic/mask/%02d.png);\"%self.face_1[0])\n        self.label_2.setStyleSheet(\"border-image: url(:/my_pic/pic/mask/%02d.png);\"%self.face_2[0])\n        self.label_3.setStyleSheet(\"border-image: url(:/my_pic/pic/mask/%02d.png);\"%self.face_3[0])\n        self.label_4.setStyleSheet(\"border-image: url(:/my_pic/pic/mask/%02d.png);\"%self.face_4[0])\n\n        self.label.setToolTip(\"<b>%02d</b>\"%self.face_1[0])\n        self.label_2.setToolTip(\"<b>%02d</b>\"%self.face_2[0])\n        self.label_3.setToolTip(\"<b>%02d</b>\"%self.face_3[0])\n        self.label_4.setToolTip(\"<b>%02d</b>\"%self.face_4[0])\n\n\n\n    @pyqtSlot()\n    def on_pushButton_3_clicked(self):\n        \"\"\"\n        AI\u4eba\u8138\u8bc6\u522b + \u4eff\u5c04\u53d8\u6362\n        \"\"\"\n        jingju = self.my_face_choose\n        self.my_face_choose = \"01\"\n        self.label.setText(\"\")\n        self.label_2.setText(\"\")\n        self.label_3.setText(\"\")\n        self.label_4.setText(\"\")\n        print(jingju)\n\n        img = Image.open(\"./static/{}.png\".format(jingju)) \n\n        r,g,b,a=img.split()   #\u5206\u79bb4\u901a\u9053 \n        im_array = np.array(img) \n        # \u9ad8\u5bbd\u901a\u9053 (\u5750\u6807\u53d6\u503c\u4e3ay, x) \n        mask_h, mask_w, mask_c = im_array.shape \n\n        try:\n            # img = cv2.imread( './test_img/001.jpg' )\n            openfile_name = QFileDialog.getOpenFileName(self,'AI\u4eac\u5267\u6362\u8138','','JPEG Files(*.jpg);;PNG Files(*.png);;PGM Files(*.pgm)')\n\n            img = cv2.imread( openfile_name[0] )\n            # \u9ad8\u5bbd\u901a\u9053 (\u5750\u6807\u53d6\u503c\u4e3ay, x)\n            h, w, c = img.shape\n            bbox, scores, landmarks = mtcnn.detect(img)\n\n            for box, pts in zip(bbox, landmarks):\n                faceInfos = np.array( [ 1, box[1], box[0], box[3] - box[1], box[2] - box[0], pts[5], pts[0], pts[6], pts[1], pts[7], pts[2], pts[8], pts[3], pts[9], pts[4] ] )\n\n\n            srcFacePoints = np.array( [faceInfos[6], faceInfos[5], faceInfos[8], faceInfos[7], (faceInfos[12]+faceInfos[14])/2.0, (faceInfos[11] + faceInfos[13])/2.0 ] ) \n            print ('srcFacePoints:', srcFacePoints) \n\n\n            maskFacePoints = np.array(face_key_point[jingju]) \n            print ('maskFacePoints:', maskFacePoints)\n\n            # start_time = time.time()\n            srcData, ret  = trent_sticker( img, w, h, 3, im_array, mask_w, mask_h, 4, srcFacePoints, maskFacePoints, 100 ) \n            # print ( 'time >>>>', time.time() - start_time )\n            img_mask = np.array(srcData, dtype=np.uint8) \n            # cv2.imwrite('res.jpg', img_mask)\n\n            bytesPerLine = c * w\n\n            cv2.cvtColor(img, cv2.COLOR_BGR2RGB, img)\n            QImg = QImage(img.data, w, h,bytesPerLine, QImage.Format_RGB888)\n            self.label_6.setAlignment(Qt.AlignCenter)\n            self.label_6.setPixmap(QPixmap.fromImage(QImg).scaled(self.label_6.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation))\n\n            self.save_img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)\n        except Exception as e:\n            print(e)\n\n\n\n    @pyqtSlot()\n    def on_pushButton_5_clicked(self):\n        \"\"\"\n        TODO: \u89c6\u9891\u6d41\n        \"\"\"\n\n        QMessageBox.information(self,\n                                    \"AI\u4eac\u5267\u6362\u8138 \u6d88\u606f\",  \n                                    \"\u76ee\u524d\u4e0d\u63d0\u4f9b\u89c6\u9891\u5e94\u7528\uff01\",  \n                                    QMessageBox.Yes | QMessageBox.No)\n\n    @pyqtSlot()\n    def on_pushButton_4_clicked(self):\n        \"\"\"\n        \u4e0b\u8f7d\u56fe\u50cf\n        \"\"\"\n\n        try:\n            filename=QFileDialog.getSaveFileName(self,'AI\u4eac\u5267\u6362\u8138 \u4fdd\u5b58','','JPEG Files(*.jpg);;PNG Files(*.png);;PGM Files(*.pgm)')\n            cv2.imwrite(filename[0],self.save_img)\n        except:\n            QMessageBox.warning(self,\n                                    \"AI\u4eac\u5267\u6362\u8138 \u8b66\u544a\",  \n                                    \"\u6ca1\u6709\u9700\u8981\u4e0b\u8f7d\u4fdd\u5b58\u7684\u56fe\u7247\uff01\",  \n                                    QMessageBox.Yes | QMessageBox.No)\n\n\n\nif __name__ == \"__main__\":\n\n    app = QtWidgets.QApplication(sys.argv)\n    # app.setStyleSheet(dark_stylesheet)\n\n    splash = QSplashScreen(QtGui.QPixmap(':/my_pic/pic/face.png'))\n    # splash = MySplashScreen('./pic/face.gif', Qt.WindowStaysOnTopHint)\n    splash.show()\n    splash.showMessage('\u6e32\u67d3\u754c\u9762...')\n    # QThread.sleep(0.5)\n    time.sleep(0.5)\n    splash.showMessage('\u6b63\u5728\u521d\u59cb\u5316\u7a0b\u5e8f...')\n    mtcnn = MTCNN('./pb/mtcnn.pb')   # \u5b9e\u4f8b\u5316MTCNN\n    app. processEvents()\n    ui =MainWindow()\n    ui.show()\n    splash.finish(ui)\n    sys.exit(app.exec_())   my_mian_ui.spec   \n# -*- mode: python ; coding: utf-8 -*-\n\nimport sys\nsys.setrecursionlimit(5000)\n\nblock_cipher = None\n\n\na = Analysis(['my_main_ui.py'],\n             pathex=['C:\\\\Users\\\\xujing.LAPTOP-LLR84L1D\\\\Desktop\\\\Face_AI'],\n             binaries=[],\n             datas=[],\n             hiddenimports=[],\n             hookspath=[],\n             runtime_hooks=[],\n             excludes=[],\n             win_no_prefer_redirects=False,\n             win_private_assemblies=False,\n             cipher=block_cipher,\n             noarchive=False)\npyz = PYZ(a.pure, a.zipped_data,\n             cipher=block_cipher)\nexe = EXE(pyz,\n          a.scripts,\n          [],\n          exclude_binaries=True,\n          name='my_main_ui',\n          debug=False,\n          bootloader_ignore_signals=False,\n          strip=False,\n          upx=True,\n          console=False , icon='icon.ico')\ncoll = COLLECT(exe,\n               a.binaries,\n               a.zipfiles,\n               a.datas,\n               strip=False,\n               upx=True,\n               upx_exclude=[],\n               name='my_main_ui')   Ui_my_main_ui.py   \n\n# -*- coding: utf-8 -*-\n\n'''\nCreated by: PyQt5 UI code generator 5.15.0\n\nxujing\n2020-06-17\nui mainwindow\n'''\n\nfrom PyQt5 import QtCore, QtGui, QtWidgets\n\nfrom PyQt5 import QtCore, QtGui, QtWidgets\nfrom PyQt5.QtGui import *\nfrom PyQt5.QtCore import *\nimport sys\n\nfrom PyQt5.QtWidgets import QLabel\nfrom PyQt5.QtCore import pyqtSignal\n\n\nclass MyLabel(QLabel):\n    '''\n    \u91cd\u5199label\uff0c\u589e\u52a0\u5355\u51fb\u7684\u4fe1\u53f7\u51fd\u6570\n    '''\n    mylabelSig = pyqtSignal(str)\n    # mylabelDoubleClickSig = pyqtSignal(str)\n\n    def __int__(self):\n        super(MyLabel, self).__init__()\n\n    def mousePressEvent(self, e):    # \u5355\u51fb\n        sigContent = self.objectName()\n        self.mylabelSig.emit(sigContent)\n\nclass Ui_MainWindow(object):\n    def setupUi(self, MainWindow):\n        button_style = ''' \n         QPushButton\n         {text-align : center;\n         background-color : white;\n         font: bold;\n         border-color: gray;\n         border-width: 2px;\n         border-radius: 10px;\n         padding: 6px;\n         height : 14px;\n         border-style: outset;\n         font : 14px;}\n         QPushButton:pressed\n         {text-align : center;\n         background-color : light gray;\n         font: bold;\n         border-color: gray;\n         border-width: 2px;\n         border-radius: 10px;\n         padding: 6px;\n         height : 14px;\n         border-style: outset;\n         font : 14px;}\n        '''\n\n        MainWindow.setObjectName(\"MainWindow\")\n        MainWindow.resize(967, 787)\n        icon = QtGui.QIcon()\n        icon.addPixmap(QtGui.QPixmap(\":/my_pic/pic/\u8138\u8c31.png\"), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n        MainWindow.setWindowIcon(icon)\n        self.centralWidget = QtWidgets.QWidget(MainWindow)\n        self.centralWidget.setObjectName(\"centralWidget\")\n        self.gridLayout = QtWidgets.QGridLayout(self.centralWidget)\n        self.gridLayout.setObjectName(\"gridLayout\")\n        self.horizontalLayout = QtWidgets.QHBoxLayout()\n        self.horizontalLayout.setObjectName(\"horizontalLayout\")\n        self.pushButton = QtWidgets.QPushButton(self.centralWidget)\n        self.pushButton.setMinimumSize(QtCore.QSize(149, 200))\n        self.pushButton.setStyleSheet(\"border-image: url(:/my_pic/pic/\u5de6\u7ffb\u9875.png);\")\n        self.pushButton.setText(\"\")\n        self.pushButton.setObjectName(\"pushButton\")\n        self.horizontalLayout.addWidget(self.pushButton)\n        # self.label = QtWidgets.QLabel(self.centralWidget)\n        self.label = MyLabel()\n        self.label.setMinimumSize(QtCore.QSize(131, 179))\n        self.label.setMaximumSize(QtCore.QSize(262, 682))\n        self.label.setStyleSheet(\"border-image: url(:/my_pic/pic/mask/01.png);\")\n        self.label.setText(\"\")\n        self.label.setObjectName(\"label\")\n        self.horizontalLayout.addWidget(self.label)\n        # self.label_2 = QtWidgets.QLabel(self.centralWidget)\n        self.label_2 = MyLabel()\n        self.label_2.setMaximumSize(QtCore.QSize(298, 682))\n        self.label_2.setStyleSheet(\"border-image: url(:/my_pic/pic/mask/02.png);\")\n        self.label_2.setText(\"\")\n        self.label_2.setObjectName(\"label_2\")\n        self.horizontalLayout.addWidget(self.label_2)\n        # self.label_3 = QtWidgets.QLabel(self.centralWidget)\n        self.label_3 = MyLabel()\n        self.label_3.setMaximumSize(QtCore.QSize(298, 682))\n        self.label_3.setStyleSheet(\"border-image: url(:/my_pic/pic/mask/03.png);\")\n        self.label_3.setText(\"\")\n        self.label_3.setObjectName(\"label_3\")\n        self.horizontalLayout.addWidget(self.label_3)\n        # self.label_4 = QtWidgets.QLabel(self.centralWidget)\n        self.label_4 = MyLabel()\n        self.label_4.setMaximumSize(QtCore.QSize(298, 682))\n        self.label_4.setStyleSheet(\"border-image: url(:/my_pic/pic/mask/04.png);\")\n        self.label_4.setText(\"\")\n        self.label_4.setObjectName(\"label_4\")\n        self.horizontalLayout.addWidget(self.label_4)\n        self.pushButton_2 = QtWidgets.QPushButton(self.centralWidget)\n        self.pushButton_2.setMinimumSize(QtCore.QSize(149, 200))\n        self.pushButton_2.setStyleSheet(\"border-image: url(:/my_pic/pic/\u53f3\u7ffb\u9875.png);\")\n        self.pushButton_2.setText(\"\")\n        self.pushButton_2.setObjectName(\"pushButton_2\")\n        self.horizontalLayout.addWidget(self.pushButton_2)\n        self.gridLayout.addLayout(self.horizontalLayout, 0, 0, 1, 3)\n        self.line = QtWidgets.QFrame(self.centralWidget)\n        self.line.setFrameShape(QtWidgets.QFrame.HLine)\n        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)\n        self.line.setObjectName(\"line\")\n        self.gridLayout.addWidget(self.line, 1, 0, 1, 3)\n        self.label_6 = QtWidgets.QLabel(self.centralWidget)\n        self.label_6.setMaximumSize(QtCore.QSize(1882, 684))\n        self.label_6.setStyleSheet(\"image: url(:/my_pic/pic/face.png);\")\n        self.label_6.setText(\"\")\n        self.label_6.setObjectName(\"label_6\")\n        self.gridLayout.addWidget(self.label_6, 2, 0, 1, 3)\n        self.pushButton_3 = QtWidgets.QPushButton(self.centralWidget)\n        self.pushButton_3.setStyleSheet(button_style)\n        self.pushButton_3.setMinimumSize(QtCore.QSize(200, 40))\n        icon1 = QtGui.QIcon()\n        icon1.addPixmap(QtGui.QPixmap(\":/my_pic/pic/\u56fe\u7247.png\"), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n        self.pushButton_3.setIcon(icon1)\n        self.pushButton_3.setObjectName(\"pushButton_3\")\n        self.gridLayout.addWidget(self.pushButton_3, 4, 0, 1, 1)\n        self.pushButton_5 = QtWidgets.QPushButton(self.centralWidget)\n        self.pushButton_5.setStyleSheet(button_style)\n        self.pushButton_5.setMinimumSize(QtCore.QSize(200, 40))\n        icon2 = QtGui.QIcon()\n        icon2.addPixmap(QtGui.QPixmap(\":/my_pic/pic/\u89c6\u9891.png\"), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n        self.pushButton_5.setIcon(icon2)\n        self.pushButton_5.setObjectName(\"pushButton_5\")\n        self.gridLayout.addWidget(self.pushButton_5, 4, 2, 1, 1)\n        self.line_2 = QtWidgets.QFrame(self.centralWidget)\n        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)\n        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)\n        self.line_2.setObjectName(\"line_2\")\n        self.gridLayout.addWidget(self.line_2, 3, 0, 1, 3)\n        self.pushButton_4 = QtWidgets.QPushButton(self.centralWidget)\n        self.pushButton_4.setStyleSheet(button_style)\n        self.pushButton_4.setMinimumSize(QtCore.QSize(200, 40))\n        icon3 = QtGui.QIcon()\n        icon3.addPixmap(QtGui.QPixmap(\":/my_pic/pic/\u4e0b\u8f7d \u7eff\u8272.png\"), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n        self.pushButton_4.setIcon(icon3)\n        self.pushButton_4.setObjectName(\"pushButton_4\")\n        self.gridLayout.addWidget(self.pushButton_4, 4, 1, 1, 1)\n        MainWindow.setCentralWidget(self.centralWidget)\n\n        self.retranslateUi(MainWindow)\n        QtCore.QMetaObject.connectSlotsByName(MainWindow)\n\n    def retranslateUi(self, MainWindow):\n        _translate = QtCore.QCoreApplication.translate\n        MainWindow.setWindowTitle(_translate(\"MainWindow\", \"AI\u4eac\u5267\u6362\u8138\"))\n        self.pushButton_3.setText(_translate(\"MainWindow\", \"\u52a0\u8f7d\u56fe\u50cf\"))\n        self.pushButton_5.setText(_translate(\"MainWindow\", \"\u52a0\u8f7d\u89c6\u9891\"))\n        self.pushButton_4.setText(_translate(\"MainWindow\", \"\u4fdd\u5b58\u56fe\u50cf\"))\nimport my_pic_rc\n\n\nif __name__ == \"__main__\":\n    import sys\n    app = QtWidgets.QApplication(sys.argv)\n    MainWindow = QtWidgets.QMainWindow()\n    ui = Ui_MainWindow()\n    ui.setupUi(MainWindow)\n    MainWindow.show()\n    sys.exit(app.exec_())  \u6309\u7167\u7b2c6\u7ae0\u548c\u7b2c7\u7ae0\u7684\u6253\u5305\u65b9\u5f0f\uff0c\u6253\u5305\u5b89\u88c5\u540e\u7684\u8fd0\u884c\u6548\u679c\uff1a  \u67e5\u770b\u5728\u7535\u8111\u7684\u5b89\u88c5\u60c5\u51b5            \u8fd0\u884c\uff1a                           \u4fdd\u5b58\u7684\u56fe\u7247\uff1a",
            "title": "\u9644\u4ef6\uff1a \u57fa\u4e8ePyQt5\u7684AI\u4eac\u5267\u6362\u8138\u8f6f\u4ef6\u7684\u6e90\u7801\u548c\u6f14\u793a"
        }
    ]
}