{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u524d\u8a00 \u8bfe\u7a0b\u7279\u70b9\uff1a \u5b8c\u5168\u57fa\u4e8ePython,\u5feb\u901f\u5b9e\u73b0Windows,Linux, MacOs, ios, Android\u8de8\u5e73\u53f0GUI\uff0cNUI APP\u5f00\u53d1 \u878d\u5408\u673a\u5668\u5b66\u4e60\uff0c\u6df1\u5ea6\u5b66\u4e60\uff0c\u8ba1\u7b97\u673a\u89c6\u89c9\u9879\u76ee\u5b9e\u6218 \u9002\u5408\u4eba\u7fa4\uff1a \u6709\u4e00\u5b9a\u7684C++,Python\u7f16\u7a0b\u57fa\u7840\uff0c\u5bf9GUI\u5f00\u53d1\u6709\u57fa\u7840\u7684\u4e86\u89e3 \u719f\u6089\u673a\u5668\u5b66\u4e60\uff0c\u6df1\u5ea6\u5b66\u4e60\uff0c\u7279\u522b\u662f\u5bf9\u6df1\u5ea6\u5b66\u4e60\u7684\u76f8\u5173\u6846\u67b6\u548c\u7b97\u6cd5\u6709\u4e00\u5b9a\u7684\u4e86\u89e3\uff0c\u672c\u8bfe\u7a0b\u8bbe\u53ca\u6846\u67b6TensorFlow,Pytorch \u4e86\u89e3\u8ba1\u7b97\u673a\u89c6\u89c9\u76f8\u5173\u7b97\u6cd5\uff0c\u672c\u8bfe\u7a0b\u9879\u76ee\u8bbe\u53ca\uff1a \u4eba\u8138\u68c0\u6d4b\uff0c\u7269\u4f53\u8fb9\u7f18\u68c0\u6d4b\uff0c\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\uff0c\u53caOpenCV\u7684\u76f8\u5173\u7b97\u6cd5 \u8bfe\u7a0b\u76ee\u6807\uff1a \u5b9e\u73b0\u57fa\u4e8eKivy\u7684APP\u5feb\u901f\u5f00\u53d1 \u8bfe\u7a0b\u8bbe\u53ca\u5b9e\u6218\u9879\u76ee\uff1a \u57fa\u4e8ePyQt5\u7684AI\u4eac\u5267\u6362\u8138\u8f6f\u4ef6\u5f00\u53d1 \u57fa\u4e8eKivy(kivymd)\u7684\u6d82\u9e26\u753b\u677f\u8f6f\u4ef6\u5f00\u53d1 \u57fa\u4e8ekivy\u7684\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4bAPP\u5f00\u53d1 \u57fa\u4e8ekivymd\u7684GAN\u4e00\u952e\u73b0\u5b9e\u8f6c\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fbAPP\u5f00\u53d1 kivy\u7684\u5b89\u5353apk\u6253\u5305\u548cWindow\u53ef\u6267\u884c\u6587\u4ef6\u6253\u5305","title":"\u524d\u8a00"},{"location":"#_1","text":"\u8bfe\u7a0b\u7279\u70b9\uff1a \u5b8c\u5168\u57fa\u4e8ePython,\u5feb\u901f\u5b9e\u73b0Windows,Linux, MacOs, ios, Android\u8de8\u5e73\u53f0GUI\uff0cNUI APP\u5f00\u53d1 \u878d\u5408\u673a\u5668\u5b66\u4e60\uff0c\u6df1\u5ea6\u5b66\u4e60\uff0c\u8ba1\u7b97\u673a\u89c6\u89c9\u9879\u76ee\u5b9e\u6218 \u9002\u5408\u4eba\u7fa4\uff1a \u6709\u4e00\u5b9a\u7684C++,Python\u7f16\u7a0b\u57fa\u7840\uff0c\u5bf9GUI\u5f00\u53d1\u6709\u57fa\u7840\u7684\u4e86\u89e3 \u719f\u6089\u673a\u5668\u5b66\u4e60\uff0c\u6df1\u5ea6\u5b66\u4e60\uff0c\u7279\u522b\u662f\u5bf9\u6df1\u5ea6\u5b66\u4e60\u7684\u76f8\u5173\u6846\u67b6\u548c\u7b97\u6cd5\u6709\u4e00\u5b9a\u7684\u4e86\u89e3\uff0c\u672c\u8bfe\u7a0b\u8bbe\u53ca\u6846\u67b6TensorFlow,Pytorch \u4e86\u89e3\u8ba1\u7b97\u673a\u89c6\u89c9\u76f8\u5173\u7b97\u6cd5\uff0c\u672c\u8bfe\u7a0b\u9879\u76ee\u8bbe\u53ca\uff1a \u4eba\u8138\u68c0\u6d4b\uff0c\u7269\u4f53\u8fb9\u7f18\u68c0\u6d4b\uff0c\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\uff0c\u53caOpenCV\u7684\u76f8\u5173\u7b97\u6cd5 \u8bfe\u7a0b\u76ee\u6807\uff1a \u5b9e\u73b0\u57fa\u4e8eKivy\u7684APP\u5feb\u901f\u5f00\u53d1 \u8bfe\u7a0b\u8bbe\u53ca\u5b9e\u6218\u9879\u76ee\uff1a \u57fa\u4e8ePyQt5\u7684AI\u4eac\u5267\u6362\u8138\u8f6f\u4ef6\u5f00\u53d1 \u57fa\u4e8eKivy(kivymd)\u7684\u6d82\u9e26\u753b\u677f\u8f6f\u4ef6\u5f00\u53d1 \u57fa\u4e8ekivy\u7684\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4bAPP\u5f00\u53d1 \u57fa\u4e8ekivymd\u7684GAN\u4e00\u952e\u73b0\u5b9e\u8f6c\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fbAPP\u5f00\u53d1 kivy\u7684\u5b89\u5353apk\u6253\u5305\u548cWindow\u53ef\u6267\u884c\u6587\u4ef6\u6253\u5305","title":"\u524d\u8a00"},{"location":"about/","text":"\u5173\u4e8e\u6211 \u5f90\u9759 \uff1a\uff08 dataxujing \uff09 \u5c0f\u767d\u4e00\u4e2a\uff0cAI\u56fe\u50cf\u7b97\u6cd5\u7814\u53d1\u5de5\u7a0b\u5e08\uff0c\u6570\u636e\u79d1\u5b66\u7231\u597d\u8005\uff0c\u559c\u6b22R, Python, C++ \u5173\u6ce8\u673a\u5668\u5b66\u4e60\uff0c\u6df1\u5ea6\u5b66\u4e60\u7b49AI\u9886\u57df\uff1b \u559c\u6b22\u7f51\u7edc\u722c\u866b\uff0c\u5173\u6ce8\u524d\u7aef\u53ef\u89c6\u5316; \u5bf9ASR(\u8bed\u97f3\u8bc6\u522b)\uff0cNLP(\u81ea\u7136\u8bed\u8a00\u5904\u7406)\uff0cCV(\u8ba1\u7b97\u673a\u89c6\u89c9)\u5747\u6709\u6d89\u730e\uff1b \u76ee\u524d\u4ece\u4e8b\u533b\u7597\u5f71\u50cfAI\u7b97\u6cd5\u7684\u7814\u7a76\u548c\u843d\u5730\u5de5\u4f5c\u3002\u719f\u6089Python\u7684GUI,Web\u5f00\u53d1\u3002 \u5173\u4e8e\u8bfe\u7a0b \u8bfe\u7a0b\u7279\u70b9\uff1a \u5b8c\u5168\u57fa\u4e8ePython,\u5feb\u901f\u5b9e\u73b0Windows,Linux, MacOs, ios, Android\u8de8\u5e73\u53f0GUI\uff0cNUI APP\u5f00\u53d1 \u878d\u5408\u673a\u5668\u5b66\u4e60\uff0c\u6df1\u5ea6\u5b66\u4e60\uff0c\u8ba1\u7b97\u673a\u89c6\u89c9\u9879\u76ee\u5b9e\u6218 \u9002\u5408\u4eba\u7fa4\uff1a \u6709\u4e00\u5b9a\u7684C++,Python\u7f16\u7a0b\u57fa\u7840\uff0c\u5bf9GUI\u5f00\u53d1\u6709\u57fa\u7840\u7684\u4e86\u89e3 \u719f\u6089\u673a\u5668\u5b66\u4e60\uff0c\u6df1\u5ea6\u5b66\u4e60\uff0c\u7279\u522b\u662f\u5bf9\u6df1\u5ea6\u5b66\u4e60\u7684\u76f8\u5173\u6846\u67b6\u548c\u7b97\u6cd5\u6709\u4e00\u5b9a\u7684\u4e86\u89e3\uff0c\u672c\u8bfe\u7a0b\u8bbe\u53ca\u6846\u67b6TensorFlow,Pytorch \u4e86\u89e3\u8ba1\u7b97\u673a\u89c6\u89c9\u76f8\u5173\u7b97\u6cd5\uff0c\u672c\u8bfe\u7a0b\u9879\u76ee\u8bbe\u53ca\uff1a \u4eba\u8138\u68c0\u6d4b\uff0c\u7269\u4f53\u8fb9\u7f18\u68c0\u6d4b\uff0c\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\uff0c\u53caOpenCV\u7684\u76f8\u5173\u7b97\u6cd5 \u8bfe\u7a0b\u76ee\u6807\uff1a \u5b9e\u73b0\u57fa\u4e8eKivy\u7684APP\u5feb\u901f\u5f00\u53d1 \u8bfe\u7a0b\u8bbe\u53ca\u5b9e\u6218\u9879\u76ee\uff1a \u57fa\u4e8ePyQt5\u7684AI\u4eac\u5267\u6362\u8138\u8f6f\u4ef6\u5f00\u53d1 \u57fa\u4e8eKivy(kivymd)\u7684\u6d82\u9e26\u753b\u677f\u8f6f\u4ef6\u5f00\u53d1 \u57fa\u4e8ekivy\u7684\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4bAPP\u5f00\u53d1 \u57fa\u4e8ekivymd\u7684GAN\u4e00\u952e\u73b0\u5b9e\u8f6c\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fbAPP\u5f00\u53d1 kivy\u7684\u5b89\u5353apk\u6253\u5305\u548cWindow\u53ef\u6267\u884c\u6587\u4ef6\u6253\u5305","title":"\u5173\u4e8e"},{"location":"about/#_1","text":"\u5f90\u9759 \uff1a\uff08 dataxujing \uff09 \u5c0f\u767d\u4e00\u4e2a\uff0cAI\u56fe\u50cf\u7b97\u6cd5\u7814\u53d1\u5de5\u7a0b\u5e08\uff0c\u6570\u636e\u79d1\u5b66\u7231\u597d\u8005\uff0c\u559c\u6b22R, Python, C++ \u5173\u6ce8\u673a\u5668\u5b66\u4e60\uff0c\u6df1\u5ea6\u5b66\u4e60\u7b49AI\u9886\u57df\uff1b \u559c\u6b22\u7f51\u7edc\u722c\u866b\uff0c\u5173\u6ce8\u524d\u7aef\u53ef\u89c6\u5316; \u5bf9ASR(\u8bed\u97f3\u8bc6\u522b)\uff0cNLP(\u81ea\u7136\u8bed\u8a00\u5904\u7406)\uff0cCV(\u8ba1\u7b97\u673a\u89c6\u89c9)\u5747\u6709\u6d89\u730e\uff1b \u76ee\u524d\u4ece\u4e8b\u533b\u7597\u5f71\u50cfAI\u7b97\u6cd5\u7684\u7814\u7a76\u548c\u843d\u5730\u5de5\u4f5c\u3002\u719f\u6089Python\u7684GUI,Web\u5f00\u53d1\u3002","title":"\u5173\u4e8e\u6211"},{"location":"about/#_2","text":"\u8bfe\u7a0b\u7279\u70b9\uff1a \u5b8c\u5168\u57fa\u4e8ePython,\u5feb\u901f\u5b9e\u73b0Windows,Linux, MacOs, ios, Android\u8de8\u5e73\u53f0GUI\uff0cNUI APP\u5f00\u53d1 \u878d\u5408\u673a\u5668\u5b66\u4e60\uff0c\u6df1\u5ea6\u5b66\u4e60\uff0c\u8ba1\u7b97\u673a\u89c6\u89c9\u9879\u76ee\u5b9e\u6218 \u9002\u5408\u4eba\u7fa4\uff1a \u6709\u4e00\u5b9a\u7684C++,Python\u7f16\u7a0b\u57fa\u7840\uff0c\u5bf9GUI\u5f00\u53d1\u6709\u57fa\u7840\u7684\u4e86\u89e3 \u719f\u6089\u673a\u5668\u5b66\u4e60\uff0c\u6df1\u5ea6\u5b66\u4e60\uff0c\u7279\u522b\u662f\u5bf9\u6df1\u5ea6\u5b66\u4e60\u7684\u76f8\u5173\u6846\u67b6\u548c\u7b97\u6cd5\u6709\u4e00\u5b9a\u7684\u4e86\u89e3\uff0c\u672c\u8bfe\u7a0b\u8bbe\u53ca\u6846\u67b6TensorFlow,Pytorch \u4e86\u89e3\u8ba1\u7b97\u673a\u89c6\u89c9\u76f8\u5173\u7b97\u6cd5\uff0c\u672c\u8bfe\u7a0b\u9879\u76ee\u8bbe\u53ca\uff1a \u4eba\u8138\u68c0\u6d4b\uff0c\u7269\u4f53\u8fb9\u7f18\u68c0\u6d4b\uff0c\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\uff0c\u53caOpenCV\u7684\u76f8\u5173\u7b97\u6cd5 \u8bfe\u7a0b\u76ee\u6807\uff1a \u5b9e\u73b0\u57fa\u4e8eKivy\u7684APP\u5feb\u901f\u5f00\u53d1 \u8bfe\u7a0b\u8bbe\u53ca\u5b9e\u6218\u9879\u76ee\uff1a \u57fa\u4e8ePyQt5\u7684AI\u4eac\u5267\u6362\u8138\u8f6f\u4ef6\u5f00\u53d1 \u57fa\u4e8eKivy(kivymd)\u7684\u6d82\u9e26\u753b\u677f\u8f6f\u4ef6\u5f00\u53d1 \u57fa\u4e8ekivy\u7684\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4bAPP\u5f00\u53d1 \u57fa\u4e8ekivymd\u7684GAN\u4e00\u952e\u73b0\u5b9e\u8f6c\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fbAPP\u5f00\u53d1 kivy\u7684\u5b89\u5353apk\u6253\u5305\u548cWindow\u53ef\u6267\u884c\u6587\u4ef6\u6253\u5305","title":"\u5173\u4e8e\u8bfe\u7a0b"},{"location":"chapter1/","text":"\u7b2c\u4e00\u7ae0 Kivy\u7b80\u4ecb \u56fe1-1\uff1aKivy logo 1.kivy\u6846\u67b6\u4ecb\u7ecd\u53cakivy\u4e0ePyQt5 \u5728Python\u4e2d\u7ecf\u5e38\u7528\u4e8eGUI\u5f00\u53d1\u7684\u63a7\u4ef6\u96c6\u6709PyQt,Tkinter,wxPython,Kivy,PyGUI\u548cLibavg. kivy(NUI): Kivy \u662f\u4e00\u4e2a\u5f00\u6e90\u7684 Python \u6846\u67b6(2011\u5e74)\uff0c\u7528\u4e8e\u5feb\u901f\u5f00\u53d1\u5e94\u7528\uff0c\u5b9e\u73b0\u5404\u79cd\u5f53\u524d\u6d41\u884c\u7684\u7528\u6237\u754c\u9762\uff0c\u6bd4\u5982\u591a\u70b9 \u89e6\u6478\u7b49\u7b49\u3002 Kivy \u53ef\u4ee5\u8fd0\u884c\u4e8e Windows\uff0c Linux\uff0c MacOS\uff0c Android\uff0c iOS \u7b49\u5f53\u524d\u7edd\u5927\u90e8\u5206\u4e3b\u6d41\u684c\u9762/\u79fb \u52a8\u7aef\u64cd\u4f5c\u7cfb\u7edf\u3002 Kivy \u57fa\u4e8e Python\uff0c\u754c\u9762UI\u6587\u4ef6\u548c\u7a0b\u5e8f\u6587\u4ef6\u76f8\u4e92\u5206\u79bb\u7684\u8bbe\u8ba1\u601d\u8def\uff0c\u8bbe\u8ba1\u7b80\u6d01\u4f18\u96c5\uff0c\u8bed\u6cd5\u6613\u5b66\uff0c\u9002\u5408\u65b0 \u4eba\u5165\u95e8\u3002 \u76ee\u524d Kivy \u7684\u5b98\u65b9\u6587\u6863\u8fd8\u7b97\u5f88\u5b8c\u5584\u3002 PyQt5(GUI): PyQt5\u662f\u4e00\u4e2a\u7528\u4e8e\u521b\u5efaGUI\u5e94\u7528\u7a0b\u5e8f\u7684\u8de8\u5e73\u53f0\u7684\u5de5\u5177\u5305\uff0c\u5b83\u5c06Python\u7f16\u7a0b\u8bed\u8a00\u548cQt\u5e93\u6210\u529f\u878d\u5408\u5728\u4e00\u8d77\uff0cPyQt5\u662f\u7531Phil Thompson\u5f00\u53d1\u7684\uff0c\u5b9e\u73b0\u4e86\u4e00\u4e2aPython\u6a21\u5757\u96c6\uff0cPyQt5\u62e5\u6709620\u591a\u4e2a\u7c7b\uff0c\u5c06\u8fd16000\u4e2a\u51fd\u6570\uff0cPyQt\u4e5f\u53ef\u4ee5\u8fd0\u884c\u5728\u6240\u6709\u7684\u4e3b\u6d41\u64cd\u4f5c\u7cfb\u7edf\u4e0a,\u5305\u62ecUNIX,Windows\u548cMacOS \u5982\u679c\u4f60\u5f00\u53d1\u4e00\u4e2a\u57fa\u4e8ePC\u7684\u5e94\u7528\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528kivy\u548cPyQt5\u5747\u53ef\u4ee5\uff0c\u5982\u679c\u4f60\u5f00\u53d1\u4e00\u4e2a\u57fa\u4e8eiOS\u6216Android\u7684\u5e94\u7528\uff0c\u5efa\u8bae\u4f60\u4f7f\u7528kivy. \u6211\u4eec\u5c06\u5728\u672c\u8282\u8bfe\u7684\u7ed3\u675f\u6f14\u793a\u4e24\u79cd\u5f00\u53d1\u5de5\u5177\u5f00\u53d1\u7684\u7b80\u5355\u7684\u5e94\u7528\u3002 2.kivy\u5b66\u4e60\u8d44\u6e90\u4ecb\u7ecd(\u5305\u62ec \u5b98\u7f51\uff0c\u4e2d\u6587\u6587\u6863\uff0c\u4e66\u7c4d\uff0cB\u7ad9\u8d44\u6e90\u5206\u4eab\uff09 \u63a8\u8350\u4e66\u7c4d \u63a8\u8350\u7535\u5b50\u4e66 Kivy\u4e2d\u6587\u7f16\u7a0b\u6307\u53570 Kivy\u5b98\u65b9\u6587\u6863\u7ffb\u8bd1 kivy\u4e2d\u6587\u7f16\u7a0b\u6307\u5357 kivy\u5b98\u65b9\u6587\u6863 kivymd\u5b98\u65b9\u6587\u6863 kivymd\u5b98\u65b9demo B\u7ad9\u8d44\u6e90 python\u5236\u4f5cAPP\uff0ckivy\u6559\u7a0b(\u4e2d\u6587\u5b57\u5e55) \u4f7f\u7528python\u5f00\u53d1\u79fb\u52a8\u5e94\u7528 Kivy Tutorial - \u4f7f\u7528python\u7f16\u5199\u79fb\u52a8\u7aefapp Building a POS System with Python and Kivy 3.kivymd\u7684\u7b80\u5355\u4ecb\u7ecd kivymd\u662f\u4e0eKivy\u8de8\u5e73\u53f0\u56fe\u5f62\u6846\u67b6\u4e00\u8d77\u4f7f\u7528\u7684\u4e0eMaterial Design\uff08\u6750\u6599\u8bbe\u8ba1\u8bed\u8a00\uff09\u517c\u5bb9\u7684\u7a97\u53e3\u5c0f\u90e8\u4ef6\u7684\u96c6\u5408\uff0c \u8be5\u6846\u67b6\u662f\u7528\u4e8e\u8de8\u5e73\u53f0\uff0c\u542f\u7528\u89e6\u6478\u7684\u56fe\u5f62\u5e94\u7528\u7a0b\u5e8f\u7684\u6846\u67b6\u3002\u76ee\u6807\u662f\u5728\u4e0d\u727a\u7272\u6613\u7528\u6027\u6216\u5e94\u7528\u7a0b\u5e8f\u6027\u80fd\u7684\u524d\u63d0\u4e0b\uff0c\u5c3d\u53ef\u80fd\u63a5\u8fd1Google\u7684Material Design\u89c4\u8303\u3002 \u4f7f\u7528kivymd\u53ef\u4ee5\u4f7f\u5f97\u5728\u5b9e\u73b0\u70ab\u9177\u7684\u5e94\u7528\u7684\u540c\u65f6\u4e0d\u4f1a\u589e\u52a0\u989d\u5916\u7684\u4ee3\u7801\u91cf\u3002 4.\u8bfe\u7a0b\u5b9e\u73b0APP\u6548\u679c\u5c55\u793a\uff08\u5305\u62ecPyQt5\u7a0b\u5e8f\u548c\u672c\u8bfe\u7a0b\u7684\u7a0b\u5e8f) PyQt5\uff1a AI\u4eac\u5267\u6362\u8138\u9879\u76ee kivy: \u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b\u9879\u76ee kivymd: \u4e8c\u6b21\u5143\u573a\u666f\u8fc1\u79fb\u9879\u76ee 5.\u6253\u5305\u65b9\u5f0f\uff1a3\u79cdandroid\u6253\u5305\u65b9\u5f0f\uff0cpyinstaller\u548cnuitka\u6253\u5305\u53ca\u5176\u4ed6\u4eec\u7684\u4f18\u7f3a\u70b9 Android\u6253\u5305\uff1a kivy Launcher(\u4e0d\u80fd\u751f\u6210apk\u5b89\u88c5\u5305\uff0c\u6211\u5c1d\u8bd5\u4e86\u5f88\u591a\u5b98\u65b9\u7684\u4f8b\u5b50\u90fd\u6ca1\u6709\u6210\u529f\uff0c\u6211\u4eec\u4e5f\u4f1a\u4e3a\u5927\u5bb6\u63d0\u4f9b\u5b89\u5353\u5305) buildozer(\u5b98\u65b9\u63a8\u8350\u7684\u6253\u5305\u65b9\u5f0f\uff0c\u57fa\u4e8ep4a) p4a PC\u6253\u5305\uff1a pyinstaller nuitka","title":"\u7b2c\u4e00\u7ae0 Kivy\u7b80\u4ecb"},{"location":"chapter1/#kivy","text":"\u56fe1-1\uff1aKivy logo","title":"\u7b2c\u4e00\u7ae0 Kivy\u7b80\u4ecb"},{"location":"chapter1/#1kivykivypyqt5","text":"\u5728Python\u4e2d\u7ecf\u5e38\u7528\u4e8eGUI\u5f00\u53d1\u7684\u63a7\u4ef6\u96c6\u6709PyQt,Tkinter,wxPython,Kivy,PyGUI\u548cLibavg. kivy(NUI): Kivy \u662f\u4e00\u4e2a\u5f00\u6e90\u7684 Python \u6846\u67b6(2011\u5e74)\uff0c\u7528\u4e8e\u5feb\u901f\u5f00\u53d1\u5e94\u7528\uff0c\u5b9e\u73b0\u5404\u79cd\u5f53\u524d\u6d41\u884c\u7684\u7528\u6237\u754c\u9762\uff0c\u6bd4\u5982\u591a\u70b9 \u89e6\u6478\u7b49\u7b49\u3002 Kivy \u53ef\u4ee5\u8fd0\u884c\u4e8e Windows\uff0c Linux\uff0c MacOS\uff0c Android\uff0c iOS \u7b49\u5f53\u524d\u7edd\u5927\u90e8\u5206\u4e3b\u6d41\u684c\u9762/\u79fb \u52a8\u7aef\u64cd\u4f5c\u7cfb\u7edf\u3002 Kivy \u57fa\u4e8e Python\uff0c\u754c\u9762UI\u6587\u4ef6\u548c\u7a0b\u5e8f\u6587\u4ef6\u76f8\u4e92\u5206\u79bb\u7684\u8bbe\u8ba1\u601d\u8def\uff0c\u8bbe\u8ba1\u7b80\u6d01\u4f18\u96c5\uff0c\u8bed\u6cd5\u6613\u5b66\uff0c\u9002\u5408\u65b0 \u4eba\u5165\u95e8\u3002 \u76ee\u524d Kivy \u7684\u5b98\u65b9\u6587\u6863\u8fd8\u7b97\u5f88\u5b8c\u5584\u3002 PyQt5(GUI): PyQt5\u662f\u4e00\u4e2a\u7528\u4e8e\u521b\u5efaGUI\u5e94\u7528\u7a0b\u5e8f\u7684\u8de8\u5e73\u53f0\u7684\u5de5\u5177\u5305\uff0c\u5b83\u5c06Python\u7f16\u7a0b\u8bed\u8a00\u548cQt\u5e93\u6210\u529f\u878d\u5408\u5728\u4e00\u8d77\uff0cPyQt5\u662f\u7531Phil Thompson\u5f00\u53d1\u7684\uff0c\u5b9e\u73b0\u4e86\u4e00\u4e2aPython\u6a21\u5757\u96c6\uff0cPyQt5\u62e5\u6709620\u591a\u4e2a\u7c7b\uff0c\u5c06\u8fd16000\u4e2a\u51fd\u6570\uff0cPyQt\u4e5f\u53ef\u4ee5\u8fd0\u884c\u5728\u6240\u6709\u7684\u4e3b\u6d41\u64cd\u4f5c\u7cfb\u7edf\u4e0a,\u5305\u62ecUNIX,Windows\u548cMacOS \u5982\u679c\u4f60\u5f00\u53d1\u4e00\u4e2a\u57fa\u4e8ePC\u7684\u5e94\u7528\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528kivy\u548cPyQt5\u5747\u53ef\u4ee5\uff0c\u5982\u679c\u4f60\u5f00\u53d1\u4e00\u4e2a\u57fa\u4e8eiOS\u6216Android\u7684\u5e94\u7528\uff0c\u5efa\u8bae\u4f60\u4f7f\u7528kivy. \u6211\u4eec\u5c06\u5728\u672c\u8282\u8bfe\u7684\u7ed3\u675f\u6f14\u793a\u4e24\u79cd\u5f00\u53d1\u5de5\u5177\u5f00\u53d1\u7684\u7b80\u5355\u7684\u5e94\u7528\u3002","title":"1.kivy\u6846\u67b6\u4ecb\u7ecd\u53cakivy\u4e0ePyQt5"},{"location":"chapter1/#2kivy-b","text":"\u63a8\u8350\u4e66\u7c4d \u63a8\u8350\u7535\u5b50\u4e66 Kivy\u4e2d\u6587\u7f16\u7a0b\u6307\u53570 Kivy\u5b98\u65b9\u6587\u6863\u7ffb\u8bd1 kivy\u4e2d\u6587\u7f16\u7a0b\u6307\u5357 kivy\u5b98\u65b9\u6587\u6863 kivymd\u5b98\u65b9\u6587\u6863 kivymd\u5b98\u65b9demo B\u7ad9\u8d44\u6e90 python\u5236\u4f5cAPP\uff0ckivy\u6559\u7a0b(\u4e2d\u6587\u5b57\u5e55) \u4f7f\u7528python\u5f00\u53d1\u79fb\u52a8\u5e94\u7528 Kivy Tutorial - \u4f7f\u7528python\u7f16\u5199\u79fb\u52a8\u7aefapp Building a POS System with Python and Kivy","title":"2.kivy\u5b66\u4e60\u8d44\u6e90\u4ecb\u7ecd(\u5305\u62ec \u5b98\u7f51\uff0c\u4e2d\u6587\u6587\u6863\uff0c\u4e66\u7c4d\uff0cB\u7ad9\u8d44\u6e90\u5206\u4eab\uff09"},{"location":"chapter1/#3kivymd","text":"kivymd\u662f\u4e0eKivy\u8de8\u5e73\u53f0\u56fe\u5f62\u6846\u67b6\u4e00\u8d77\u4f7f\u7528\u7684\u4e0eMaterial Design\uff08\u6750\u6599\u8bbe\u8ba1\u8bed\u8a00\uff09\u517c\u5bb9\u7684\u7a97\u53e3\u5c0f\u90e8\u4ef6\u7684\u96c6\u5408\uff0c \u8be5\u6846\u67b6\u662f\u7528\u4e8e\u8de8\u5e73\u53f0\uff0c\u542f\u7528\u89e6\u6478\u7684\u56fe\u5f62\u5e94\u7528\u7a0b\u5e8f\u7684\u6846\u67b6\u3002\u76ee\u6807\u662f\u5728\u4e0d\u727a\u7272\u6613\u7528\u6027\u6216\u5e94\u7528\u7a0b\u5e8f\u6027\u80fd\u7684\u524d\u63d0\u4e0b\uff0c\u5c3d\u53ef\u80fd\u63a5\u8fd1Google\u7684Material Design\u89c4\u8303\u3002 \u4f7f\u7528kivymd\u53ef\u4ee5\u4f7f\u5f97\u5728\u5b9e\u73b0\u70ab\u9177\u7684\u5e94\u7528\u7684\u540c\u65f6\u4e0d\u4f1a\u589e\u52a0\u989d\u5916\u7684\u4ee3\u7801\u91cf\u3002","title":"3.kivymd\u7684\u7b80\u5355\u4ecb\u7ecd"},{"location":"chapter1/#4apppyqt5","text":"PyQt5\uff1a AI\u4eac\u5267\u6362\u8138\u9879\u76ee kivy: \u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b\u9879\u76ee kivymd: \u4e8c\u6b21\u5143\u573a\u666f\u8fc1\u79fb\u9879\u76ee","title":"4.\u8bfe\u7a0b\u5b9e\u73b0APP\u6548\u679c\u5c55\u793a\uff08\u5305\u62ecPyQt5\u7a0b\u5e8f\u548c\u672c\u8bfe\u7a0b\u7684\u7a0b\u5e8f)"},{"location":"chapter1/#53androidpyinstallernuitka","text":"Android\u6253\u5305\uff1a kivy Launcher(\u4e0d\u80fd\u751f\u6210apk\u5b89\u88c5\u5305\uff0c\u6211\u5c1d\u8bd5\u4e86\u5f88\u591a\u5b98\u65b9\u7684\u4f8b\u5b50\u90fd\u6ca1\u6709\u6210\u529f\uff0c\u6211\u4eec\u4e5f\u4f1a\u4e3a\u5927\u5bb6\u63d0\u4f9b\u5b89\u5353\u5305) buildozer(\u5b98\u65b9\u63a8\u8350\u7684\u6253\u5305\u65b9\u5f0f\uff0c\u57fa\u4e8ep4a) p4a PC\u6253\u5305\uff1a pyinstaller nuitka","title":"5.\u6253\u5305\u65b9\u5f0f\uff1a3\u79cdandroid\u6253\u5305\u65b9\u5f0f\uff0cpyinstaller\u548cnuitka\u6253\u5305\u53ca\u5176\u4ed6\u4eec\u7684\u4f18\u7f3a\u70b9"},{"location":"chapter10/","text":"\u7b2c\u5341\u7ae0 \u603b\u7ed3\u52a0\u9879\u76ee\u5c55\u793a \u672c\u8bfe\u7a0b\u4e2d\u6211\u4eec\u4e3b\u8981\u6d89\u53ca\u5230\u4e864\u4e2a\u9879\u76ee\uff1a \u57fa\u4e8ePyQt5\u7684AI\u4eac\u5267\u6362\u8138\u8f6f\u4ef6\u5f00\u53d1 \u57fa\u4e8ekivy(kivymd)\u7684\u6d82\u9e26\u753b\u677f\u8f6f\u4ef6\u5f00\u53d1 \u57fa\u4e8ekivy\u7684\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4bAPP\u5f00\u53d1 \u57fa\u4e8ekivymd\u7684GAN\u4e00\u952e\u73b0\u5b9e\u8f6c\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fbAPP\u5f00\u53d1 \u6211\u4eec\u8be6\u7ec6\u7684\u5206\u6b65\u9aa4\u4ecb\u7ecd\u4e86\u6bcf\u4e2a\u9879\u76ee\u7684\u5f00\u53d1\u8fc7\u7a0b\u53ca\u5728windows\u548candroid\u4e0b\u7684\u6253\u5305\u8fc7\u7a0b\uff0c\u6700\u540e\u6211\u4eec\u5728\u672c\u6b21\u8bfe\u5c06\u8be6\u7ec6\u7684\u6f14\u793a\u6211\u4eec\u4e0a\u8ff0\u8bbe\u53ca\u7684\u9879\u76ee\u5728\u771f\u662f\u7684\u5b89\u5353\u6a21\u62df\u5668\u548c\u5b89\u5353\u624b\u673a\u7684\u6f14\u793a\u3002 \u6f14\u793a\u6548\u679c\u5982\u4e0b\uff1a \u5b89\u5353\u6a21\u62df\u5668\uff1a \u5b89\u5353\u624b\u673a\uff1a \u6700\u540e\u7684\u4f5c\u4e1a \u57fa\u4e8ekivy\u548ckivymd\u5b9e\u73b0\u4e8c\u7ef4\u7801\u626b\u63cf\u8bc6\u522b\u7684\u5b89\u5353\u5e94\u7528\uff01","title":"\u7b2c\u5341\u7ae0 \u603b\u7ed3\u53ca\u9879\u76ee\u5c55\u793a"},{"location":"chapter10/#_1","text":"\u672c\u8bfe\u7a0b\u4e2d\u6211\u4eec\u4e3b\u8981\u6d89\u53ca\u5230\u4e864\u4e2a\u9879\u76ee\uff1a \u57fa\u4e8ePyQt5\u7684AI\u4eac\u5267\u6362\u8138\u8f6f\u4ef6\u5f00\u53d1 \u57fa\u4e8ekivy(kivymd)\u7684\u6d82\u9e26\u753b\u677f\u8f6f\u4ef6\u5f00\u53d1 \u57fa\u4e8ekivy\u7684\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4bAPP\u5f00\u53d1 \u57fa\u4e8ekivymd\u7684GAN\u4e00\u952e\u73b0\u5b9e\u8f6c\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fbAPP\u5f00\u53d1 \u6211\u4eec\u8be6\u7ec6\u7684\u5206\u6b65\u9aa4\u4ecb\u7ecd\u4e86\u6bcf\u4e2a\u9879\u76ee\u7684\u5f00\u53d1\u8fc7\u7a0b\u53ca\u5728windows\u548candroid\u4e0b\u7684\u6253\u5305\u8fc7\u7a0b\uff0c\u6700\u540e\u6211\u4eec\u5728\u672c\u6b21\u8bfe\u5c06\u8be6\u7ec6\u7684\u6f14\u793a\u6211\u4eec\u4e0a\u8ff0\u8bbe\u53ca\u7684\u9879\u76ee\u5728\u771f\u662f\u7684\u5b89\u5353\u6a21\u62df\u5668\u548c\u5b89\u5353\u624b\u673a\u7684\u6f14\u793a\u3002 \u6f14\u793a\u6548\u679c\u5982\u4e0b\uff1a \u5b89\u5353\u6a21\u62df\u5668\uff1a \u5b89\u5353\u624b\u673a\uff1a","title":"\u7b2c\u5341\u7ae0 \u603b\u7ed3\u52a0\u9879\u76ee\u5c55\u793a"},{"location":"chapter10/#_2","text":"\u57fa\u4e8ekivy\u548ckivymd\u5b9e\u73b0\u4e8c\u7ef4\u7801\u626b\u63cf\u8bc6\u522b\u7684\u5b89\u5353\u5e94\u7528\uff01","title":"\u6700\u540e\u7684\u4f5c\u4e1a"},{"location":"chapter2/","text":"\u7b2c\u4e8c\u7ae0 \u6d82\u9e26\u753b\u677f\u9879\u76ee\u57fa\u4e8ekivy\u5b9e\u73b0 1.\u9879\u76ee\u5c55\u793a\u4e0e\u663e\u793a\u753b\u7b14\u7684\u8f68\u8ff9 \u60f3\u8981\u663e\u793a\u7ed8\u56fe\u7684\u8f68\u8ff9\uff0c\u9996\u5148\u9700\u8981\u6784\u9020\u51fa\u4e00\u4e2a\u7a97\u53e3\uff0c\u8ba9\u5176\u52a0\u8f7d .kv \u6587\u4ef6\uff0c\u5e76\u5728 .kv \u6587\u4ef6\u4e2d\u628a\u9875\u9762\u80cc\u666f\u8bbe\u7f6e\u4e3a\u767d\u8272 step1: \u65b0\u5efa\u4e00\u4e2a main.py \u6587\u4ef6\uff0c\u5728\u5176\u4e2d\u5148\u7b80\u5355\u7684\u52a0\u8f7d .kv \u6587\u4ef6\uff0c\u5177\u4f53\u4ee3\u7801\u5982\u4e0b from kivy.app import App from kivy.graphics import Line, Color from kivy.uix.widget import Widget class DrawCanvasWidget(Widget): def __init__(self,**kwargs): super().__init__(**kwargs) class PaintApp(App): def build(self): self.draw_canvas_widget = DrawCanvasWidget() return self.draw_canvas_widget # \u8fd4\u56deroot\u63a7\u4ef6 if __name__ == \"__main__\": PaintApp().run() \u8fd9\u65f6\u5019\u8fd0\u884c\u6548\u679c(\u4ec0\u4e48\u4e5f\u6ca1\u6709\uff0c\u4ee5\u4e3a\u6211\u4eec\u5e76\u6ca1\u6709\u5b9a\u4e49\u4efb\u4f55\u63a7\u4ef6\u548c\u7ed8\u56fe\u5728\u754c\u9762\uff09\uff1a step2: \u521b\u5efa\u548cAPP\u540c\u540d\u7684 .kv \u6587\u4ef6,\u8bbe\u7f6e\u7a97\u53e3\u7684\u4e00\u4e9b\u5c5e\u6027 # \u6ce8\u610fpaint.kv\u6587\u4ef6\u4e2d\u4e0d\u80fd\u51fa\u73b0\u4e2d\u6587\u548c\u7c7b\u4f3c\u4e8epython\u7684\u6ce8\u91ca <DrawCanvasWidget> # \u5b9a\u4e49\u9875\u9762 canvas.before: Color: # \u989c\u8272 rgba: [1,1,1,1] Rectangle: #\u5f62\u72b6 pos: self.pos size: self.size step3\uff1a\u76d1\u542c\u5c4f\u5e55\u7684\u70b9\u51fb\u548c\u79fb\u52a8\u89e6\u53d1\u4e8b\u4ef6 from kivy.app import App from kivy.graphics import Line, Color from kivy.uix.widget import Widget class DrawCanvasWidget(Widget): def __init__(self,**kwargs): super().__init__(**kwargs) # \u9ed8\u8ba4\u5212\u7ebf\u7684\u989c\u8272 self.canvas.add(Color(rgb=[0,0,0])) self.line_width = 2 def on_touch_down(self,touch): if Widget.on_touch_down(self,touch): return with self.canvas: #User data dictionary. Use this dictionary to save your own data on the touch touc.ud['current_line'] = Line(points=(touch.x,touch.y),width=self.line_width) def on_touch_move(self,touch): if 'current_line' in touch.ud: touch.ud['current_line'].points += (touch.x,touch.y) class PaintApp(App): def build(self): self.draw_canvas_widget = DrawCanvasWidget() return self.draw_canvas_widget # \u8fd4\u56deroot\u63a7\u4ef6 if __name__ == \"__main__\": PaintApp().run() 2.\u8bbe\u7f6e\u989c\u8272\u7684Button \u8be5\u90e8\u5206\u6211\u4eec\u901a\u8fc7button\u5b9e\u73b0\u70b9\u51fbbutton\u5207\u6362\u5212\u7ebf\u7684\u989c\u8272\uff0c\u4e0a\u4e00\u8282\u4e2d\u6211\u4eec\u4ec5\u4ec5\u5b9a\u4e49\u4e86\u4e86\u9ed8\u8ba4\u7684\u753b\u677f\u989c\u8272\u3002 \u9996\u5148\u6211\u4eec\u5728 paint.kv \u4e2d\u6dfb\u52a012\u79cd\u989c\u8272\u7684button #: import C kivy.utils.get_color_from_hex <BottomColorButton@ToggleButton>: group: 'color' border: (3,3,3,3) on_release: app.draw_canvas_widget.change_color(self.background_color) <DrawCanvasWidget>: canvas.before: Color: rgba: [1,1,1,1] Rectangle: pos: self.pos size: self.size BoxLayout: id: bottom_box orientation: \"horizontal\" padding: 2 spacing: 2 size: root.width,40 BottomColorButton: background_color: C(\"#19caad\") state: 'down' BottomColorButton: background_color: C(\"#8cc7b5\") BottomColorButton: background_color: C(\"#a0eee1\") BottomColorButton: background_color: C(\"#bee7e9\") BottomColorButton: background_color: C(\"#beedc7\") BottomColorButton: background_color: C(\"#d6d5b7\") BottomColorButton: background_color: C(\"#d1ba74\") BottomColorButton: background_color: C(\"#e6ceac\") BottomColorButton: background_color: C(\"#ecad9e\") BottomColorButton: background_color: C(\"#f4606c\") BottomColorButton: background_color: C(\"#3498db\") BottomColorButton: background_color: C(\"#1abc9c\") from kivy.app import App from kivy.graphics import Line, Color from kivy.uix.widget import Widget from kivy.uix.behaviors import ToggleButtonBehavior from kivy.uix.togglebutton import ToggleButton class DrawCanvasWidget(Widget): def __init__(self,**kwargs): super().__init__(**kwargs) # \u9ed8\u8ba4\u5212\u7ebf\u7684\u989c\u8272 self.canvas.add(Color(rgb=[0,0,0])) self.line_width = 2 def on_touch_down(self,touch): if Widget.on_touch_down(self,touch): return with self.canvas: touch.ud['current_line'] = Line(points=(touch.x,touch.y),width=self.line_width) def on_touch_move(self,touch): if 'current_line' in touch.ud: touch.ud['current_line'].points += (touch.x,touch.y) # \u589e\u52a0\u8be5\u65b9\u6cd5\u6539\u53d8\u989c\u8272 def change_color(self,new_color): self.canvas.add(Color(*new_color)) class PaintApp(App): def build(self): self.draw_canvas_widget = DrawCanvasWidget() return self.draw_canvas_widget # \u8fd4\u56deroot\u63a7\u4ef6 if __name__ == \"__main__\": PaintApp().run() 3.\u8bbe\u7f6e\u7ebf\u5bbd\u7684Button \u76ee\u524d\u7ebf\u5bbd\u4ec5\u4ec5\u5728\u521d\u59cb\u5316\u65f6\u4f5c\u4e86\u8bbe\u7f6e\uff0c\u6539\u53d8\u7ebf\u5bbd\u548c\u6539\u53d8\u989c\u8272\u8bbe\u7f6e\u65b9\u5f0f\u4e00\u81f4\uff0c\u5728root\u63a7\u4ef6\u4e2d\u521b\u5efa\u4e00\u4e2a\u6539\u53d8\u7ebf\u5bbd\u7684\u65b9\u6cd5 from kivy.app import App from kivy.graphics import Line, Color from kivy.uix.widget import Widget from kivy.uix.behaviors import ToggleButtonBehavior from kivy.uix.togglebutton import ToggleButton from kivy.utils import get_color_from_hex class DrawCanvasWidget(Widget): def __init__(self,**kwargs): super().__init__(**kwargs) # \u9ed8\u8ba4\u5212\u7ebf\u7684\u989c\u8272 self.canvas.add(Color(rgb=[0,0,0])) self.line_width = 2 def on_touch_down(self,touch): if Widget.on_touch_down(self,touch): return with self.canvas: touch.ud['current_line'] = Line(points=(touch.x,touch.y),width=self.line_width) def on_touch_move(self,touch): if 'current_line' in touch.ud: touch.ud['current_line'].points += (touch.x,touch.y) def change_color(self,new_color): self.canvas.add(Color(*new_color)) # \u589e\u52a0\u8be5\u65b9\u6cd5\uff0c\u6539\u53d8\u7ebf\u5bbd def change_line_width(self,line_width=\"Normal\"): self.line_width = {\"Thin\":1,\"Normal\":2,\"Thick\":4}[line_width] class PaintApp(App): def build(self): self.draw_canvas_widget = DrawCanvasWidget() return self.draw_canvas_widget # \u8fd4\u56deroot\u63a7\u4ef6 if __name__ == \"__main__\": PaintApp().run() \u7136\u540e\u6211\u4eec\u5728 paint.kv \u4e2d\u8bbe\u7f6e\u6539\u53d8\u7ebf\u5bbd\u7684button #: import C kivy.utils.get_color_from_hex <BottomColorButton@ToggleButton>: group: 'color' background_normal: '' # \u6807\u51c6\u80cc\u666f\u989c\u8272 background_down: '' # \u9009\u4e2d\u540e\u7684\u80cc\u666f\u989c\u8272 border: (3,3,3,3) on_release: app.draw_canvas_widget.change_color(self.background_color) <LineWidthButton@ToggleButton>: group: \"line_width\" color: C(\"#2c3e50\") background_color: C(\"#ecf0f1\") background_normal: '' background_down: '' border: (3,3,3,3) on_release: app.draw_canvas_widget.change_line_width(self.text) <DrawCanvasWidget>: canvas.before: Color: rgba: [1,1,1,1] Rectangle: pos: self.pos size: self.size BoxLayout: orientation: \"horizontal\" padding: 2 spacing: 2 x: 0 top: root.top size_hint: None,None size: 280,44 LineWidthButton: text: \"Thin\" LineWidthButton: text: \"Normal\" state: \"down\" LineWidthButton: text: \"Thick\" BoxLayout: id: bottom_box orientation: \"horizontal\" padding: 2 spacing: 2 size: root.width,40 BottomColorButton: background_color: C(\"#19caad\") state: 'down' BottomColorButton: background_color: C(\"#8cc7b5\") BottomColorButton: background_color: C(\"#a0eee1\") BottomColorButton: background_color: C(\"#bee7e9\") BottomColorButton: background_color: C(\"#beedc7\") BottomColorButton: background_color: C(\"#d6d5b7\") BottomColorButton: background_color: C(\"#d1ba74\") BottomColorButton: background_color: C(\"#e6ceac\") BottomColorButton: background_color: C(\"#ecad9e\") BottomColorButton: background_color: C(\"#f4606c\") BottomColorButton: background_color: C(\"#3498db\") BottomColorButton: background_color: C(\"#1abc9c\") 4.\u6309\u94ae\u8fb9\u6846\u7684\u8bbe\u7f6e \u9009\u4e2d\u4e86\u989c\u8272\u548c\u7ebf\u5bbd\u540e\uff0c\u6211\u4eec\u65e0\u6cd5\u77e5\u9053\u6211\u4eec\u76ee\u524d\u5230\u5e95\u9009\u4e2d\u7684\u662f\u54ea\u4e2a\u989c\u8272\uff0c\u662f\u54ea\u4e2a\u7ebf\u5bbd\uff0c\u56e0\u6b64\u6211\u4eec\u4e3a\u9009\u4e2d\u7684button\u6dfb\u52a0\u4e00\u4e9b\u6837\u5f0f\uff0c\u8fd9\u91cc\u6211\u4eec\u7ed9\u9009\u4e2d\u7684butoon\u5916\u9762\u6dfb\u52a0\u4e00\u4e2a\u8fb9\u6846\u3002 \u4fee\u6539 paint.kv #: import C kivy.utils.get_color_from_hex <BottomColorButton@ToggleButton>: group: 'color' background_normal: 'radio_background_normal.png' # \u672a\u9009\u4e2d\u65f6\u7684\u6837\u5f0f background_down: 'radio_background_down.png' # \u9009\u4e2d\u540e\u7684\u6837\u5f0f border: (3,3,3,3) on_release: app.draw_canvas_widget.change_color(self.background_color) <LineWidthButton@ToggleButton>: group: \"line_width\" color: C(\"#2c3e50\") background_color: C(\"#ecf0f1\") background_normal: 'radio_background_normal.png' background_down: 'radio_background_down.png' border: (3,3,3,3) on_release: app.draw_canvas_widget.change_line_width(self.text) <DrawCanvasWidget>: canvas.before: Color: rgba: [1,1,1,1] Rectangle: pos: self.pos size: self.size BoxLayout: orientation: \"horizontal\" padding: 2 spacing: 2 x: 0 top: root.top size_hint: None,None size: 280,44 LineWidthButton: text: \"Thin\" LineWidthButton: text: \"Normal\" state: \"down\" LineWidthButton: text: \"Thick\" BoxLayout: id: bottom_box orientation: \"horizontal\" padding: 2 spacing: 2 size: root.width,40 BottomColorButton: background_color: C(\"#19caad\") state: 'down' BottomColorButton: background_color: C(\"#8cc7b5\") BottomColorButton: background_color: C(\"#a0eee1\") BottomColorButton: background_color: C(\"#bee7e9\") BottomColorButton: background_color: C(\"#beedc7\") BottomColorButton: background_color: C(\"#d6d5b7\") BottomColorButton: background_color: C(\"#d1ba74\") BottomColorButton: background_color: C(\"#e6ceac\") BottomColorButton: background_color: C(\"#ecad9e\") BottomColorButton: background_color: C(\"#f4606c\") BottomColorButton: background_color: C(\"#3498db\") BottomColorButton: background_color: C(\"#1abc9c\") 5.\u5c4f\u5e55\u6e05\u9664\u529f\u80fd\u7684\u5b9e\u73b0 \u753b\u5728\u753b\u677f\u7684\u5185\u5bb9\u6211\u4eec\u9700\u8981\u6e05\u9664\uff0c\u4e0b\u9762\u6211\u4eec\u5b9e\u73b0\u6e05\u9664\u753b\u677f\u7684\u529f\u80fd\uff0c\u9996\u5148\u6211\u4eec\u5728 paint.kv \u4e2d\u5b9e\u73b0\u4e00\u4e2a\u6e05\u9664\u7684button #: import C kivy.utils.get_color_from_hex <BottomColorButton@ToggleButton>: group: 'color' background_normal: 'radio_background_normal.png' background_down: 'radio_background_down.png' border: (3,3,3,3) on_release: app.draw_canvas_widget.change_color(self.background_color) <LineWidthButton@ToggleButton>: group: \"line_width\" color: C(\"#2c3e50\") background_color: C(\"#ecf0f1\") background_normal: 'radio_background_normal.png' background_down: 'radio_background_down.png' border: (3,3,3,3) on_release: app.draw_canvas_widget.change_line_width(self.text) <DrawCanvasWidget>: canvas.before: Color: rgba: [1,1,1,1] Rectangle: pos: self.pos size: self.size BoxLayout: orientation: \"horizontal\" padding: 2 spacing: 2 x: 0 top: root.top size_hint: None,None size: 280,44 LineWidthButton: text: \"Thin\" LineWidthButton: text: \"Normal\" state: \"down\" LineWidthButton: text: \"Thick\" # \u8fd9\u4e2abutton\u7528\u6765\u6e05\u9664\u753b\u677f Button: text: 'Clear' on_release: root.draw_canvas_widget.clean_canvas() BoxLayout: id: bottom_box orientation: \"horizontal\" padding: 2 spacing: 2 size: root.width,40 BottomColorButton: background_color: C(\"#19caad\") state: 'down' BottomColorButton: background_color: C(\"#8cc7b5\") BottomColorButton: background_color: C(\"#a0eee1\") BottomColorButton: background_color: C(\"#bee7e9\") BottomColorButton: background_color: C(\"#beedc7\") BottomColorButton: background_color: C(\"#d6d5b7\") BottomColorButton: background_color: C(\"#d1ba74\") BottomColorButton: background_color: C(\"#e6ceac\") BottomColorButton: background_color: C(\"#ecad9e\") BottomColorButton: background_color: C(\"#f4606c\") BottomColorButton: background_color: C(\"#3498db\") BottomColorButton: background_color: C(\"#1abc9c\") \u5728 main.py \u4e2d\u5b9e\u73b0\u6e05\u9664\u7684\u65b9\u6cd5 from kivy.app import App from kivy.graphics import Line, Color from kivy.uix.widget import Widget from kivy.uix.behaviors import ToggleButtonBehavior from kivy.uix.togglebutton import ToggleButton from kivy.utils import get_color_from_hex class DrawCanvasWidget(Widget): def __init__(self,**kwargs): super().__init__(**kwargs) # \u9ed8\u8ba4\u5212\u7ebf\u7684\u989c\u8272 # self.canvas.add(Color(rgb=[0,0,0])) self.change_color(get_color_from_hex('#19caad')) # \u4fee\u6539\u9ed8\u8ba4\u5212\u7ebf\u7ebf\u989c\u8272 self.line_width = 2 def on_touch_down(self,touch): if Widget.on_touch_down(self,touch): return with self.canvas: touch.ud['current_line'] = Line(points=(touch.x,touch.y),width=self.line_width) def on_touch_move(self,touch): if 'current_line' in touch.ud: touch.ud['current_line'].points += (touch.x,touch.y) def change_color(self,new_color): self.last_color = new_color # \u5728\u6e05\u9664\u753b\u677f\u65f6\u4f7f\u7528 self.canvas.add(Color(*new_color)) def change_line_width(self,line_width=\"Normal\"): self.line_width = {\"Thin\":1,\"Normal\":2,\"Thick\":4}[line_width] def clean_canvas(self): saved = self.children[:] # \u4fdd\u7559root\u63a7\u4ef6\u4e0a\u7684\u5b50\u63a7\u4ef6\uff08button) self.clear_widgets() # \u6e05\u9664\u6240\u6709\u63a7\u4ef6\u95f4 self.canvas.clear() # \u6e05\u9664canvas for widget in saved: # \u5c06\u6e05\u9664\u7684\u5b50\u63a7\u4ef6\u518d\u753b\u4e0a self.add_widget(widget) self.change_color(self.last_color) class PaintApp(App): def build(self): self.draw_canvas_widget = DrawCanvasWidget() return self.draw_canvas_widget # \u8fd4\u56deroot\u63a7\u4ef6 if __name__ == \"__main__\": PaintApp().run() 6.\u4e2d\u6587\u663e\u793a\u95ee\u9898\u53ca\u66ff\u6362icon\u548ctitle \u9996\u5148\u6211\u4eec\u89e3\u51b3\u4e2d\u6587\u663e\u793a\u7684\u95ee\u9898\uff0ckivy\u5bf9\u4e8e\u4e2d\u6587\u7684\u652f\u6301\u5e76\u4e0d\u662f\u5f88\u5b8c\u7f8e\uff0c\u8fd9\u4e5f\u53ef\u80fd\u662fkivy\u5728\u56fd\u5185\u63a8\u5e7f\u4e0d\u662f\u5f88\u987a\u5229\u7684\u539f\u56e0\uff0c\u5bf9\u4e8e\u5728kv\u8bed\u8a00\u4e2d\u4f7f\u7528\u4e2d\u6587\u9700\u8981\u5bfc\u5165\u4e2d\u6587\u5b57\u5e93\u548c\u628a\u4e2d\u6587\u7f16\u7801\u6210unicode,\u800c\u5728kivy\u7684main\u811a\u672c\u4e2d\uff0c\u9700\u8981\u5728\u63a7\u4ef6\u4e2d\u901a\u8fc7font_name\u8fd9\u4e2a\u53c2\u6570\u5bfc\u5165\u4e2d\u6587\u5b57\u5e93\u3002 \u5bf9\u4e8e\u66ff\u6362icon\u548ctitle\u6211\u4eec\u53ea\u9700\u8981\u5728build\u65b9\u6cd5\u4e2d\u5b9e\u73b0\u5c31\u53ef\u4ee5\u4e86 \u9996\u5148\u6211\u4eec\u4fee\u6539 paint.kv \u4f7f\u5176\u652f\u6301\u4e2d\u6587 #: import C kivy.utils.get_color_from_hex <BottomColorButton@ToggleButton>: group: 'color' background_normal: 'radio_background_normal.png' background_down: 'radio_background_down.png' border: (3,3,3,3) on_release: app.draw_canvas_widget.change_color(self.background_color) <LineWidthButton@ToggleButton>: group: \"line_width\" color: C(\"#2c3e50\") background_color: C(\"#ecf0f1\") background_normal: 'radio_background_normal.png' background_down: 'radio_background_down.png' border: (3,3,3,3) on_release: app.draw_canvas_widget.change_line_width(self.text) <DrawCanvasWidget>: canvas.before: Color: rgba: [1,1,1,1] Rectangle: pos: self.pos size: self.size BoxLayout: orientation: \"horizontal\" padding: 2 spacing: 2 x: 0 top: root.top size_hint: None,None size: 280,44 LineWidthButton: # \u8fd9\u91cc\u6211\u4eec\u4fee\u6539\u652f\u6301\u4e2d\u6587 text: \"\\u53d8\\u7ec6\" font_name: \"./DroidSansFallback.ttf\" LineWidthButton: text: \"\\u6b63\\u5e38\" font_name: \"./DroidSansFallback.ttf\" state: \"down\" LineWidthButton: text: \"\\u52a0\\u7c97\" font_name: \"./DroidSansFallback.ttf\" Button: text: '\\u6e05\\u9664' on_release: app.draw_canvas_widget.clean_canvas() font_name: \"./DroidSansFallback.ttf\" BoxLayout: id: bottom_box orientation: \"horizontal\" padding: 2 spacing: 2 size: root.width,40 BottomColorButton: background_color: C(\"#19caad\") state: 'down' BottomColorButton: background_color: C(\"#8cc7b5\") BottomColorButton: background_color: C(\"#a0eee1\") BottomColorButton: background_color: C(\"#bee7e9\") BottomColorButton: background_color: C(\"#beedc7\") BottomColorButton: background_color: C(\"#d6d5b7\") BottomColorButton: background_color: C(\"#d1ba74\") BottomColorButton: background_color: C(\"#e6ceac\") BottomColorButton: background_color: C(\"#ecad9e\") BottomColorButton: background_color: C(\"#f4606c\") BottomColorButton: background_color: C(\"#3498db\") BottomColorButton: background_color: C(\"#1abc9c\") \u5176\u6b21\u6211\u4eec\u4fee\u6539icon\u548ctitle from kivy.app import App from kivy.graphics import Line, Color from kivy.uix.widget import Widget from kivy.uix.behaviors import ToggleButtonBehavior from kivy.uix.togglebutton import ToggleButton from kivy.utils import get_color_from_hex class DrawCanvasWidget(Widget): def __init__(self,**kwargs): super().__init__(**kwargs) # \u9ed8\u8ba4\u5212\u7ebf\u7684\u989c\u8272 # self.canvas.add(Color(rgb=[0,0,0])) self.change_color(get_color_from_hex('#19caad')) # \u4fee\u6539\u9ed8\u8ba4\u5212\u7ebf\u7ebf\u989c\u8272 self.line_width = 2 def on_touch_down(self,touch): if Widget.on_touch_down(self,touch): return with self.canvas: touch.ud['current_line'] = Line(points=(touch.x,touch.y),width=self.line_width) def on_touch_move(self,touch): if 'current_line' in touch.ud: touch.ud['current_line'].points += (touch.x,touch.y) def change_color(self,new_color): self.last_color = new_color # \u5728\u6e05\u9664\u753b\u677f\u65f6\u4f7f\u7528 self.canvas.add(Color(*new_color)) def change_line_width(self,line_width=\"\u6b63\u5e38\"): # \u6539\u53d8\u4e2d\u6587\u65f6\u8fd9\u4e2a\u4f4d\u7f6e\u4e5f\u8981\u4fee\u6539 self.line_width = {\"\u53d8\u7ec6\":1,\"\u6b63\u5e38\":2,\"\u52a0\u7c97\":4}[line_width] def clean_canvas(self): saved = self.children[:] # \u4fdd\u7559root\u63a7\u4ef6\u4e0a\u7684\u5b50\u63a7\u4ef6\uff08button) self.clear_widgets() # \u6e05\u9664\u6240\u6709\u63a7\u4ef6\u95f4 self.canvas.clear() # \u6e05\u9664canvas for widget in saved: # \u5c06\u6e05\u9664\u7684\u5b50\u63a7\u4ef6\u518d\u753b\u4e0a self.add_widget(widget) self.change_color(self.last_color) class PaintApp(App): def build(self): self.icon = \"icon.ico\" self.title = \"\u6d82\u9e26\u753b\u677f v1.0.0\" self.draw_canvas_widget = DrawCanvasWidget() return self.draw_canvas_widget # \u8fd4\u56deroot\u63a7\u4ef6 if __name__ == \"__main__\": PaintApp().run() 7.\u9879\u76ee\u603b\u7ed3 \u5173\u4e8e\u6d82\u9e26\u753b\u677f\u9879\u76ee\u7684Android\u6253\u5305\u8be6\u89c1\u7b2c\u516b\u7ae0\u3002","title":"\u7b2c\u4e8c\u7ae0 \u6d82\u9e26\u753b\u677f\u9879\u76ee\u57fa\u4e8ekivy\u5b9e\u73b0"},{"location":"chapter2/#kivy","text":"","title":"\u7b2c\u4e8c\u7ae0 \u6d82\u9e26\u753b\u677f\u9879\u76ee\u57fa\u4e8ekivy\u5b9e\u73b0"},{"location":"chapter2/#1","text":"\u60f3\u8981\u663e\u793a\u7ed8\u56fe\u7684\u8f68\u8ff9\uff0c\u9996\u5148\u9700\u8981\u6784\u9020\u51fa\u4e00\u4e2a\u7a97\u53e3\uff0c\u8ba9\u5176\u52a0\u8f7d .kv \u6587\u4ef6\uff0c\u5e76\u5728 .kv \u6587\u4ef6\u4e2d\u628a\u9875\u9762\u80cc\u666f\u8bbe\u7f6e\u4e3a\u767d\u8272 step1: \u65b0\u5efa\u4e00\u4e2a main.py \u6587\u4ef6\uff0c\u5728\u5176\u4e2d\u5148\u7b80\u5355\u7684\u52a0\u8f7d .kv \u6587\u4ef6\uff0c\u5177\u4f53\u4ee3\u7801\u5982\u4e0b from kivy.app import App from kivy.graphics import Line, Color from kivy.uix.widget import Widget class DrawCanvasWidget(Widget): def __init__(self,**kwargs): super().__init__(**kwargs) class PaintApp(App): def build(self): self.draw_canvas_widget = DrawCanvasWidget() return self.draw_canvas_widget # \u8fd4\u56deroot\u63a7\u4ef6 if __name__ == \"__main__\": PaintApp().run() \u8fd9\u65f6\u5019\u8fd0\u884c\u6548\u679c(\u4ec0\u4e48\u4e5f\u6ca1\u6709\uff0c\u4ee5\u4e3a\u6211\u4eec\u5e76\u6ca1\u6709\u5b9a\u4e49\u4efb\u4f55\u63a7\u4ef6\u548c\u7ed8\u56fe\u5728\u754c\u9762\uff09\uff1a step2: \u521b\u5efa\u548cAPP\u540c\u540d\u7684 .kv \u6587\u4ef6,\u8bbe\u7f6e\u7a97\u53e3\u7684\u4e00\u4e9b\u5c5e\u6027 # \u6ce8\u610fpaint.kv\u6587\u4ef6\u4e2d\u4e0d\u80fd\u51fa\u73b0\u4e2d\u6587\u548c\u7c7b\u4f3c\u4e8epython\u7684\u6ce8\u91ca <DrawCanvasWidget> # \u5b9a\u4e49\u9875\u9762 canvas.before: Color: # \u989c\u8272 rgba: [1,1,1,1] Rectangle: #\u5f62\u72b6 pos: self.pos size: self.size step3\uff1a\u76d1\u542c\u5c4f\u5e55\u7684\u70b9\u51fb\u548c\u79fb\u52a8\u89e6\u53d1\u4e8b\u4ef6 from kivy.app import App from kivy.graphics import Line, Color from kivy.uix.widget import Widget class DrawCanvasWidget(Widget): def __init__(self,**kwargs): super().__init__(**kwargs) # \u9ed8\u8ba4\u5212\u7ebf\u7684\u989c\u8272 self.canvas.add(Color(rgb=[0,0,0])) self.line_width = 2 def on_touch_down(self,touch): if Widget.on_touch_down(self,touch): return with self.canvas: #User data dictionary. Use this dictionary to save your own data on the touch touc.ud['current_line'] = Line(points=(touch.x,touch.y),width=self.line_width) def on_touch_move(self,touch): if 'current_line' in touch.ud: touch.ud['current_line'].points += (touch.x,touch.y) class PaintApp(App): def build(self): self.draw_canvas_widget = DrawCanvasWidget() return self.draw_canvas_widget # \u8fd4\u56deroot\u63a7\u4ef6 if __name__ == \"__main__\": PaintApp().run()","title":"1.\u9879\u76ee\u5c55\u793a\u4e0e\u663e\u793a\u753b\u7b14\u7684\u8f68\u8ff9"},{"location":"chapter2/#2button","text":"\u8be5\u90e8\u5206\u6211\u4eec\u901a\u8fc7button\u5b9e\u73b0\u70b9\u51fbbutton\u5207\u6362\u5212\u7ebf\u7684\u989c\u8272\uff0c\u4e0a\u4e00\u8282\u4e2d\u6211\u4eec\u4ec5\u4ec5\u5b9a\u4e49\u4e86\u4e86\u9ed8\u8ba4\u7684\u753b\u677f\u989c\u8272\u3002 \u9996\u5148\u6211\u4eec\u5728 paint.kv \u4e2d\u6dfb\u52a012\u79cd\u989c\u8272\u7684button #: import C kivy.utils.get_color_from_hex <BottomColorButton@ToggleButton>: group: 'color' border: (3,3,3,3) on_release: app.draw_canvas_widget.change_color(self.background_color) <DrawCanvasWidget>: canvas.before: Color: rgba: [1,1,1,1] Rectangle: pos: self.pos size: self.size BoxLayout: id: bottom_box orientation: \"horizontal\" padding: 2 spacing: 2 size: root.width,40 BottomColorButton: background_color: C(\"#19caad\") state: 'down' BottomColorButton: background_color: C(\"#8cc7b5\") BottomColorButton: background_color: C(\"#a0eee1\") BottomColorButton: background_color: C(\"#bee7e9\") BottomColorButton: background_color: C(\"#beedc7\") BottomColorButton: background_color: C(\"#d6d5b7\") BottomColorButton: background_color: C(\"#d1ba74\") BottomColorButton: background_color: C(\"#e6ceac\") BottomColorButton: background_color: C(\"#ecad9e\") BottomColorButton: background_color: C(\"#f4606c\") BottomColorButton: background_color: C(\"#3498db\") BottomColorButton: background_color: C(\"#1abc9c\") from kivy.app import App from kivy.graphics import Line, Color from kivy.uix.widget import Widget from kivy.uix.behaviors import ToggleButtonBehavior from kivy.uix.togglebutton import ToggleButton class DrawCanvasWidget(Widget): def __init__(self,**kwargs): super().__init__(**kwargs) # \u9ed8\u8ba4\u5212\u7ebf\u7684\u989c\u8272 self.canvas.add(Color(rgb=[0,0,0])) self.line_width = 2 def on_touch_down(self,touch): if Widget.on_touch_down(self,touch): return with self.canvas: touch.ud['current_line'] = Line(points=(touch.x,touch.y),width=self.line_width) def on_touch_move(self,touch): if 'current_line' in touch.ud: touch.ud['current_line'].points += (touch.x,touch.y) # \u589e\u52a0\u8be5\u65b9\u6cd5\u6539\u53d8\u989c\u8272 def change_color(self,new_color): self.canvas.add(Color(*new_color)) class PaintApp(App): def build(self): self.draw_canvas_widget = DrawCanvasWidget() return self.draw_canvas_widget # \u8fd4\u56deroot\u63a7\u4ef6 if __name__ == \"__main__\": PaintApp().run()","title":"2.\u8bbe\u7f6e\u989c\u8272\u7684Button"},{"location":"chapter2/#3button","text":"\u76ee\u524d\u7ebf\u5bbd\u4ec5\u4ec5\u5728\u521d\u59cb\u5316\u65f6\u4f5c\u4e86\u8bbe\u7f6e\uff0c\u6539\u53d8\u7ebf\u5bbd\u548c\u6539\u53d8\u989c\u8272\u8bbe\u7f6e\u65b9\u5f0f\u4e00\u81f4\uff0c\u5728root\u63a7\u4ef6\u4e2d\u521b\u5efa\u4e00\u4e2a\u6539\u53d8\u7ebf\u5bbd\u7684\u65b9\u6cd5 from kivy.app import App from kivy.graphics import Line, Color from kivy.uix.widget import Widget from kivy.uix.behaviors import ToggleButtonBehavior from kivy.uix.togglebutton import ToggleButton from kivy.utils import get_color_from_hex class DrawCanvasWidget(Widget): def __init__(self,**kwargs): super().__init__(**kwargs) # \u9ed8\u8ba4\u5212\u7ebf\u7684\u989c\u8272 self.canvas.add(Color(rgb=[0,0,0])) self.line_width = 2 def on_touch_down(self,touch): if Widget.on_touch_down(self,touch): return with self.canvas: touch.ud['current_line'] = Line(points=(touch.x,touch.y),width=self.line_width) def on_touch_move(self,touch): if 'current_line' in touch.ud: touch.ud['current_line'].points += (touch.x,touch.y) def change_color(self,new_color): self.canvas.add(Color(*new_color)) # \u589e\u52a0\u8be5\u65b9\u6cd5\uff0c\u6539\u53d8\u7ebf\u5bbd def change_line_width(self,line_width=\"Normal\"): self.line_width = {\"Thin\":1,\"Normal\":2,\"Thick\":4}[line_width] class PaintApp(App): def build(self): self.draw_canvas_widget = DrawCanvasWidget() return self.draw_canvas_widget # \u8fd4\u56deroot\u63a7\u4ef6 if __name__ == \"__main__\": PaintApp().run() \u7136\u540e\u6211\u4eec\u5728 paint.kv \u4e2d\u8bbe\u7f6e\u6539\u53d8\u7ebf\u5bbd\u7684button #: import C kivy.utils.get_color_from_hex <BottomColorButton@ToggleButton>: group: 'color' background_normal: '' # \u6807\u51c6\u80cc\u666f\u989c\u8272 background_down: '' # \u9009\u4e2d\u540e\u7684\u80cc\u666f\u989c\u8272 border: (3,3,3,3) on_release: app.draw_canvas_widget.change_color(self.background_color) <LineWidthButton@ToggleButton>: group: \"line_width\" color: C(\"#2c3e50\") background_color: C(\"#ecf0f1\") background_normal: '' background_down: '' border: (3,3,3,3) on_release: app.draw_canvas_widget.change_line_width(self.text) <DrawCanvasWidget>: canvas.before: Color: rgba: [1,1,1,1] Rectangle: pos: self.pos size: self.size BoxLayout: orientation: \"horizontal\" padding: 2 spacing: 2 x: 0 top: root.top size_hint: None,None size: 280,44 LineWidthButton: text: \"Thin\" LineWidthButton: text: \"Normal\" state: \"down\" LineWidthButton: text: \"Thick\" BoxLayout: id: bottom_box orientation: \"horizontal\" padding: 2 spacing: 2 size: root.width,40 BottomColorButton: background_color: C(\"#19caad\") state: 'down' BottomColorButton: background_color: C(\"#8cc7b5\") BottomColorButton: background_color: C(\"#a0eee1\") BottomColorButton: background_color: C(\"#bee7e9\") BottomColorButton: background_color: C(\"#beedc7\") BottomColorButton: background_color: C(\"#d6d5b7\") BottomColorButton: background_color: C(\"#d1ba74\") BottomColorButton: background_color: C(\"#e6ceac\") BottomColorButton: background_color: C(\"#ecad9e\") BottomColorButton: background_color: C(\"#f4606c\") BottomColorButton: background_color: C(\"#3498db\") BottomColorButton: background_color: C(\"#1abc9c\")","title":"3.\u8bbe\u7f6e\u7ebf\u5bbd\u7684Button"},{"location":"chapter2/#4","text":"\u9009\u4e2d\u4e86\u989c\u8272\u548c\u7ebf\u5bbd\u540e\uff0c\u6211\u4eec\u65e0\u6cd5\u77e5\u9053\u6211\u4eec\u76ee\u524d\u5230\u5e95\u9009\u4e2d\u7684\u662f\u54ea\u4e2a\u989c\u8272\uff0c\u662f\u54ea\u4e2a\u7ebf\u5bbd\uff0c\u56e0\u6b64\u6211\u4eec\u4e3a\u9009\u4e2d\u7684button\u6dfb\u52a0\u4e00\u4e9b\u6837\u5f0f\uff0c\u8fd9\u91cc\u6211\u4eec\u7ed9\u9009\u4e2d\u7684butoon\u5916\u9762\u6dfb\u52a0\u4e00\u4e2a\u8fb9\u6846\u3002 \u4fee\u6539 paint.kv #: import C kivy.utils.get_color_from_hex <BottomColorButton@ToggleButton>: group: 'color' background_normal: 'radio_background_normal.png' # \u672a\u9009\u4e2d\u65f6\u7684\u6837\u5f0f background_down: 'radio_background_down.png' # \u9009\u4e2d\u540e\u7684\u6837\u5f0f border: (3,3,3,3) on_release: app.draw_canvas_widget.change_color(self.background_color) <LineWidthButton@ToggleButton>: group: \"line_width\" color: C(\"#2c3e50\") background_color: C(\"#ecf0f1\") background_normal: 'radio_background_normal.png' background_down: 'radio_background_down.png' border: (3,3,3,3) on_release: app.draw_canvas_widget.change_line_width(self.text) <DrawCanvasWidget>: canvas.before: Color: rgba: [1,1,1,1] Rectangle: pos: self.pos size: self.size BoxLayout: orientation: \"horizontal\" padding: 2 spacing: 2 x: 0 top: root.top size_hint: None,None size: 280,44 LineWidthButton: text: \"Thin\" LineWidthButton: text: \"Normal\" state: \"down\" LineWidthButton: text: \"Thick\" BoxLayout: id: bottom_box orientation: \"horizontal\" padding: 2 spacing: 2 size: root.width,40 BottomColorButton: background_color: C(\"#19caad\") state: 'down' BottomColorButton: background_color: C(\"#8cc7b5\") BottomColorButton: background_color: C(\"#a0eee1\") BottomColorButton: background_color: C(\"#bee7e9\") BottomColorButton: background_color: C(\"#beedc7\") BottomColorButton: background_color: C(\"#d6d5b7\") BottomColorButton: background_color: C(\"#d1ba74\") BottomColorButton: background_color: C(\"#e6ceac\") BottomColorButton: background_color: C(\"#ecad9e\") BottomColorButton: background_color: C(\"#f4606c\") BottomColorButton: background_color: C(\"#3498db\") BottomColorButton: background_color: C(\"#1abc9c\")","title":"4.\u6309\u94ae\u8fb9\u6846\u7684\u8bbe\u7f6e"},{"location":"chapter2/#5","text":"\u753b\u5728\u753b\u677f\u7684\u5185\u5bb9\u6211\u4eec\u9700\u8981\u6e05\u9664\uff0c\u4e0b\u9762\u6211\u4eec\u5b9e\u73b0\u6e05\u9664\u753b\u677f\u7684\u529f\u80fd\uff0c\u9996\u5148\u6211\u4eec\u5728 paint.kv \u4e2d\u5b9e\u73b0\u4e00\u4e2a\u6e05\u9664\u7684button #: import C kivy.utils.get_color_from_hex <BottomColorButton@ToggleButton>: group: 'color' background_normal: 'radio_background_normal.png' background_down: 'radio_background_down.png' border: (3,3,3,3) on_release: app.draw_canvas_widget.change_color(self.background_color) <LineWidthButton@ToggleButton>: group: \"line_width\" color: C(\"#2c3e50\") background_color: C(\"#ecf0f1\") background_normal: 'radio_background_normal.png' background_down: 'radio_background_down.png' border: (3,3,3,3) on_release: app.draw_canvas_widget.change_line_width(self.text) <DrawCanvasWidget>: canvas.before: Color: rgba: [1,1,1,1] Rectangle: pos: self.pos size: self.size BoxLayout: orientation: \"horizontal\" padding: 2 spacing: 2 x: 0 top: root.top size_hint: None,None size: 280,44 LineWidthButton: text: \"Thin\" LineWidthButton: text: \"Normal\" state: \"down\" LineWidthButton: text: \"Thick\" # \u8fd9\u4e2abutton\u7528\u6765\u6e05\u9664\u753b\u677f Button: text: 'Clear' on_release: root.draw_canvas_widget.clean_canvas() BoxLayout: id: bottom_box orientation: \"horizontal\" padding: 2 spacing: 2 size: root.width,40 BottomColorButton: background_color: C(\"#19caad\") state: 'down' BottomColorButton: background_color: C(\"#8cc7b5\") BottomColorButton: background_color: C(\"#a0eee1\") BottomColorButton: background_color: C(\"#bee7e9\") BottomColorButton: background_color: C(\"#beedc7\") BottomColorButton: background_color: C(\"#d6d5b7\") BottomColorButton: background_color: C(\"#d1ba74\") BottomColorButton: background_color: C(\"#e6ceac\") BottomColorButton: background_color: C(\"#ecad9e\") BottomColorButton: background_color: C(\"#f4606c\") BottomColorButton: background_color: C(\"#3498db\") BottomColorButton: background_color: C(\"#1abc9c\") \u5728 main.py \u4e2d\u5b9e\u73b0\u6e05\u9664\u7684\u65b9\u6cd5 from kivy.app import App from kivy.graphics import Line, Color from kivy.uix.widget import Widget from kivy.uix.behaviors import ToggleButtonBehavior from kivy.uix.togglebutton import ToggleButton from kivy.utils import get_color_from_hex class DrawCanvasWidget(Widget): def __init__(self,**kwargs): super().__init__(**kwargs) # \u9ed8\u8ba4\u5212\u7ebf\u7684\u989c\u8272 # self.canvas.add(Color(rgb=[0,0,0])) self.change_color(get_color_from_hex('#19caad')) # \u4fee\u6539\u9ed8\u8ba4\u5212\u7ebf\u7ebf\u989c\u8272 self.line_width = 2 def on_touch_down(self,touch): if Widget.on_touch_down(self,touch): return with self.canvas: touch.ud['current_line'] = Line(points=(touch.x,touch.y),width=self.line_width) def on_touch_move(self,touch): if 'current_line' in touch.ud: touch.ud['current_line'].points += (touch.x,touch.y) def change_color(self,new_color): self.last_color = new_color # \u5728\u6e05\u9664\u753b\u677f\u65f6\u4f7f\u7528 self.canvas.add(Color(*new_color)) def change_line_width(self,line_width=\"Normal\"): self.line_width = {\"Thin\":1,\"Normal\":2,\"Thick\":4}[line_width] def clean_canvas(self): saved = self.children[:] # \u4fdd\u7559root\u63a7\u4ef6\u4e0a\u7684\u5b50\u63a7\u4ef6\uff08button) self.clear_widgets() # \u6e05\u9664\u6240\u6709\u63a7\u4ef6\u95f4 self.canvas.clear() # \u6e05\u9664canvas for widget in saved: # \u5c06\u6e05\u9664\u7684\u5b50\u63a7\u4ef6\u518d\u753b\u4e0a self.add_widget(widget) self.change_color(self.last_color) class PaintApp(App): def build(self): self.draw_canvas_widget = DrawCanvasWidget() return self.draw_canvas_widget # \u8fd4\u56deroot\u63a7\u4ef6 if __name__ == \"__main__\": PaintApp().run()","title":"5.\u5c4f\u5e55\u6e05\u9664\u529f\u80fd\u7684\u5b9e\u73b0"},{"location":"chapter2/#6icontitle","text":"\u9996\u5148\u6211\u4eec\u89e3\u51b3\u4e2d\u6587\u663e\u793a\u7684\u95ee\u9898\uff0ckivy\u5bf9\u4e8e\u4e2d\u6587\u7684\u652f\u6301\u5e76\u4e0d\u662f\u5f88\u5b8c\u7f8e\uff0c\u8fd9\u4e5f\u53ef\u80fd\u662fkivy\u5728\u56fd\u5185\u63a8\u5e7f\u4e0d\u662f\u5f88\u987a\u5229\u7684\u539f\u56e0\uff0c\u5bf9\u4e8e\u5728kv\u8bed\u8a00\u4e2d\u4f7f\u7528\u4e2d\u6587\u9700\u8981\u5bfc\u5165\u4e2d\u6587\u5b57\u5e93\u548c\u628a\u4e2d\u6587\u7f16\u7801\u6210unicode,\u800c\u5728kivy\u7684main\u811a\u672c\u4e2d\uff0c\u9700\u8981\u5728\u63a7\u4ef6\u4e2d\u901a\u8fc7font_name\u8fd9\u4e2a\u53c2\u6570\u5bfc\u5165\u4e2d\u6587\u5b57\u5e93\u3002 \u5bf9\u4e8e\u66ff\u6362icon\u548ctitle\u6211\u4eec\u53ea\u9700\u8981\u5728build\u65b9\u6cd5\u4e2d\u5b9e\u73b0\u5c31\u53ef\u4ee5\u4e86 \u9996\u5148\u6211\u4eec\u4fee\u6539 paint.kv \u4f7f\u5176\u652f\u6301\u4e2d\u6587 #: import C kivy.utils.get_color_from_hex <BottomColorButton@ToggleButton>: group: 'color' background_normal: 'radio_background_normal.png' background_down: 'radio_background_down.png' border: (3,3,3,3) on_release: app.draw_canvas_widget.change_color(self.background_color) <LineWidthButton@ToggleButton>: group: \"line_width\" color: C(\"#2c3e50\") background_color: C(\"#ecf0f1\") background_normal: 'radio_background_normal.png' background_down: 'radio_background_down.png' border: (3,3,3,3) on_release: app.draw_canvas_widget.change_line_width(self.text) <DrawCanvasWidget>: canvas.before: Color: rgba: [1,1,1,1] Rectangle: pos: self.pos size: self.size BoxLayout: orientation: \"horizontal\" padding: 2 spacing: 2 x: 0 top: root.top size_hint: None,None size: 280,44 LineWidthButton: # \u8fd9\u91cc\u6211\u4eec\u4fee\u6539\u652f\u6301\u4e2d\u6587 text: \"\\u53d8\\u7ec6\" font_name: \"./DroidSansFallback.ttf\" LineWidthButton: text: \"\\u6b63\\u5e38\" font_name: \"./DroidSansFallback.ttf\" state: \"down\" LineWidthButton: text: \"\\u52a0\\u7c97\" font_name: \"./DroidSansFallback.ttf\" Button: text: '\\u6e05\\u9664' on_release: app.draw_canvas_widget.clean_canvas() font_name: \"./DroidSansFallback.ttf\" BoxLayout: id: bottom_box orientation: \"horizontal\" padding: 2 spacing: 2 size: root.width,40 BottomColorButton: background_color: C(\"#19caad\") state: 'down' BottomColorButton: background_color: C(\"#8cc7b5\") BottomColorButton: background_color: C(\"#a0eee1\") BottomColorButton: background_color: C(\"#bee7e9\") BottomColorButton: background_color: C(\"#beedc7\") BottomColorButton: background_color: C(\"#d6d5b7\") BottomColorButton: background_color: C(\"#d1ba74\") BottomColorButton: background_color: C(\"#e6ceac\") BottomColorButton: background_color: C(\"#ecad9e\") BottomColorButton: background_color: C(\"#f4606c\") BottomColorButton: background_color: C(\"#3498db\") BottomColorButton: background_color: C(\"#1abc9c\") \u5176\u6b21\u6211\u4eec\u4fee\u6539icon\u548ctitle from kivy.app import App from kivy.graphics import Line, Color from kivy.uix.widget import Widget from kivy.uix.behaviors import ToggleButtonBehavior from kivy.uix.togglebutton import ToggleButton from kivy.utils import get_color_from_hex class DrawCanvasWidget(Widget): def __init__(self,**kwargs): super().__init__(**kwargs) # \u9ed8\u8ba4\u5212\u7ebf\u7684\u989c\u8272 # self.canvas.add(Color(rgb=[0,0,0])) self.change_color(get_color_from_hex('#19caad')) # \u4fee\u6539\u9ed8\u8ba4\u5212\u7ebf\u7ebf\u989c\u8272 self.line_width = 2 def on_touch_down(self,touch): if Widget.on_touch_down(self,touch): return with self.canvas: touch.ud['current_line'] = Line(points=(touch.x,touch.y),width=self.line_width) def on_touch_move(self,touch): if 'current_line' in touch.ud: touch.ud['current_line'].points += (touch.x,touch.y) def change_color(self,new_color): self.last_color = new_color # \u5728\u6e05\u9664\u753b\u677f\u65f6\u4f7f\u7528 self.canvas.add(Color(*new_color)) def change_line_width(self,line_width=\"\u6b63\u5e38\"): # \u6539\u53d8\u4e2d\u6587\u65f6\u8fd9\u4e2a\u4f4d\u7f6e\u4e5f\u8981\u4fee\u6539 self.line_width = {\"\u53d8\u7ec6\":1,\"\u6b63\u5e38\":2,\"\u52a0\u7c97\":4}[line_width] def clean_canvas(self): saved = self.children[:] # \u4fdd\u7559root\u63a7\u4ef6\u4e0a\u7684\u5b50\u63a7\u4ef6\uff08button) self.clear_widgets() # \u6e05\u9664\u6240\u6709\u63a7\u4ef6\u95f4 self.canvas.clear() # \u6e05\u9664canvas for widget in saved: # \u5c06\u6e05\u9664\u7684\u5b50\u63a7\u4ef6\u518d\u753b\u4e0a self.add_widget(widget) self.change_color(self.last_color) class PaintApp(App): def build(self): self.icon = \"icon.ico\" self.title = \"\u6d82\u9e26\u753b\u677f v1.0.0\" self.draw_canvas_widget = DrawCanvasWidget() return self.draw_canvas_widget # \u8fd4\u56deroot\u63a7\u4ef6 if __name__ == \"__main__\": PaintApp().run()","title":"6.\u4e2d\u6587\u663e\u793a\u95ee\u9898\u53ca\u66ff\u6362icon\u548ctitle"},{"location":"chapter2/#7","text":"\u5173\u4e8e\u6d82\u9e26\u753b\u677f\u9879\u76ee\u7684Android\u6253\u5305\u8be6\u89c1\u7b2c\u516b\u7ae0\u3002","title":"7.\u9879\u76ee\u603b\u7ed3"},{"location":"chapter3/","text":"\u7b2c\u4e09\u7ae0 \u6d82\u9e26\u753b\u677f\u9879\u76ee\u57fa\u4e8ekivymd\u5b9e\u73b0 1.\u9879\u76ee\u5c55\u793a\u4e0e\u753b\u677f\u6574\u4f53\u754c\u9762 \u6211\u4eec\u8fdb\u4e00\u6b65\u5bf9\u6d82\u9e26\u753b\u677f\u5728\u754c\u9762\u5c42\u9762\u4e0a\u505a\u4f18\u5316\uff0c\u6211\u4eec\u4f7f\u7528kivymd\u5e93\u8fdb\u884c\u754c\u9762\u7684\u4f18\u5316\uff0ckivymd\u662f\u4e0eMaterial Desugn\u517c\u5bb9\u7684\u5c0f\u90e8\u4ef6\u7684\u96c6\u5408\uff0c\u53ef\u4e0ekivy\u4e00\u8d77\u4f7f\u7528\uff0ckivymd\u7684\u76ee\u6807\u662f\u5728\u4e0d\u727a\u7272\u6613\u7528\u6027\u6216\u5e94\u7528\u7a0b\u5e8f\u6027\u80fd\u7684\u524d\u63d0\u4e0b\uff0c\u5c3d\u53ef\u80fd\u63a5\u8fd1Google\u7684Material Design\u89c4\u8303\u3002kivymd\u7684\u539f\u4f5c\u8005\u4e09\u5e74\u524d\u505c\u6b62\u66f4\u65b0\u9879\u76ee\uff0c https://github.com/HeaTTheatR/KivyMD \u5bf9kivymd\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u5f00\u53d1\uff0c\u76ee\u524d\u8be5\u9879\u76ee\u4ecd\u7136\u5904\u4e8e\u6d4b\u8bd5\u7248\u7684\u9636\u6bb5\u3002 \u9996\u5148\u6211\u4eec\u4f7f\u7528kivymd\u6784\u5efa\u754c\u9762\uff0c\u521b\u5efa main.py from kivy.lang import Builder from kivy.graphics import Line, Color from kivy.uix.widget import Widget from kivy.uix.boxlayout import BoxLayout from kivy.properties import StringProperty from kivymd.app import MDApp from kivymd.theming import ThemableBehavior global line_width line_width = 2 # \u8fd9\u4e2a\u7c7b\u4e3b\u8981copy\u6211\u4eec\u5728\u4e0a\u4e00\u7ae0\u4e2d\u6784\u5efa\u7684\u7c7b class DrawCanvasWidget(Widget): def __init__(self,**kwargs): super().__init__(**kwargs) # \u9ed8\u8ba4\u5212\u7ebf\u7684\u989c\u8272 self.line_color = [0,0,0,1] self.canvas.add(Color(rgba=[0,0,0,1])) def on_touch_down(self,touch): if Widget.on_touch_down(self,touch): return with self.canvas: touch.ud['current_line'] = Line(points=(touch.x,touch.y),width=line_width) def on_touch_move(self,touch): if 'current_line' in touch.ud: touch.ud['current_line'].points += (touch.x,touch.y) def change_color(self,new_color): # global line_color self.line_color = new_color # \u5728\u6e05\u9664\u753b\u677f\u65f6\u4f7f\u7528 self.canvas.add(Color(rgb=self.line_color)) def change_line_width(self,line_width_ico=\"baby-face\"): global line_width line_width = {\"babel\":1,\"baby-face\":2,\"baguette\":4}[line_width_ico] def clean_canvas(self): saved = self.children[:] # \u4fdd\u7559root\u63a7\u4ef6\u4e0a\u7684\u5b50\u63a7\u4ef6\uff08button) self.clear_widgets() # \u6e05\u9664\u6240\u6709\u63a7\u4ef6\u95f4 self.canvas.clear() # \u6e05\u9664canvas for widget in saved: # \u5c06\u6e05\u9664\u7684\u5b50\u63a7\u4ef6\u518d\u753b\u4e0a self.add_widget(widget) self.change_color(self.line_color) class PaintsApp(MDApp): def build(self): self.icon = \"./icon.ico\" self.title = \"\u6d82\u9e26\u753b\u677f(kivymd\u7248)\" self.theme_cls.primary_palette = \"Blue\" return Builder.load_file(\"./paint.kv\") if __name__ == \"__main__\": PaintsApp().run() \u521b\u5efa paint.kv \u7684UI\u754c\u9762 # paint in kivymd by xu jing. # date 2020-07-09 BoxLayout: orientation: 'vertical' # toolbar MDToolbar: title: 'Paint' elevation: 10 left_action_items: [['menu', lambda x: None]] spacing: 10 padding: 10 # paint canvas DrawCanvasWidget: id: my_paint canvas.before: Color: rgba: [1,1,1,1] Rectangle: pos: self.pos size: self.size 2.\u6539\u53d8\u7ebf\u5bbdMDFloatingActionButtonSpeedDial\u7684\u5b9e\u73b0 \u901a\u8fc7kivymd\u4e2d\u7684MDFloatingActionButtonSpeedDial\u5b9e\u73b0\u7ebf\u5bbd\u7684\u6539\u53d8\uff0c\u4fee\u6539 main.py from kivy.lang import Builder from kivy.graphics import Line, Color from kivy.uix.widget import Widget from kivy.uix.boxlayout import BoxLayout from kivy.properties import StringProperty from kivymd.app import MDApp from kivymd.theming import ThemableBehavior global line_width line_width = 2 # \u8fd9\u4e2a\u7c7b\u4e3b\u8981copy\u6211\u4eec\u5728\u4e0a\u4e00\u7ae0\u4e2d\u6784\u5efa\u7684\u7c7b class DrawCanvasWidget(Widget): def __init__(self,**kwargs): super().__init__(**kwargs) # \u9ed8\u8ba4\u5212\u7ebf\u7684\u989c\u8272 self.line_color = [0,0,0,1] self.canvas.add(Color(rgba=[0,0,0,1])) def on_touch_down(self,touch): if Widget.on_touch_down(self,touch): return with self.canvas: touch.ud['current_line'] = Line(points=(touch.x,touch.y),width=line_width) def on_touch_move(self,touch): if 'current_line' in touch.ud: touch.ud['current_line'].points += (touch.x,touch.y) def change_color(self,new_color): # global line_color self.line_color = new_color # \u5728\u6e05\u9664\u753b\u677f\u65f6\u4f7f\u7528 self.canvas.add(Color(rgb=self.line_color)) def change_line_width(self,line_width_ico=\"baby-face\"): global line_width line_width = {\"babel\":1,\"baby-face\":2,\"baguette\":4}[line_width_ico] def clean_canvas(self): saved = self.children[:] # \u4fdd\u7559root\u63a7\u4ef6\u4e0a\u7684\u5b50\u63a7\u4ef6\uff08button) self.clear_widgets() # \u6e05\u9664\u6240\u6709\u63a7\u4ef6\u95f4 self.canvas.clear() # \u6e05\u9664canvas for widget in saved: # \u5c06\u6e05\u9664\u7684\u5b50\u63a7\u4ef6\u518d\u753b\u4e0a self.add_widget(widget) self.change_color(self.line_color) class PaintsApp(MDApp): # \u4fee\u6539\u7ebf\u5bbd\u7684\u529f\u80fd data = { \"babel\": \"Thin\", \"baby-face\": \"Normal\", \"baguette\": \"Thick\", } def callback(self, instance): # print(instance.icon) if instance.icon in [\"babel\",\"baby-face\",\"baguette\"]: DrawCanvasWidget().change_line_width(line_width_ico=instance.icon) # print(line_width) def build(self): self.icon = \"./icon.ico\" self.title = \"\u6d82\u9e26\u753b\u677f(kivymd\u7248)\" self.theme_cls.primary_palette = \"Blue\" return Builder.load_file(\"./paint.kv\") if __name__ == \"__main__\": PaintsApp().run() paint.kv \u589e\u52a0\u4fee\u6539\u7ebf\u5bbd\u7684\u529f\u80fd # paint in kivymd by xu jing. # date 2020-07-09 BoxLayout: orientation: 'vertical' # toolbar MDToolbar: title: 'Paint' elevation: 10 left_action_items: [['menu', lambda x: None]] spacing: 10 padding: 10 # paint canvas DrawCanvasWidget: id: my_paint canvas.before: Color: rgba: [1,1,1,1] Rectangle: pos: self.pos size: self.size # line width MDFloatingActionButtonSpeedDial: data: app.data hint_animation: True rotation_root_button: True callback: app.callback 3.\u6e05\u9664\u529f\u80fdMDFloatingActionButton\u7684\u5b9e\u73b0 \u589e\u52a0\u6e05\u9664canvas\u7684\u529f\u80fd\uff0c\u5728\u754c\u9762\u8bbe\u8ba1\u65f6\uff0c\u6211\u4eec\u5df2\u7ecf\u5728\u4e0a\u4e00\u7ae0\u4e2d\u5b9e\u73b0\u4e86\u6e05\u9664\u7684\u4e8b\u4ef6\uff0c\u4ec5\u4ec5\u5728 paint.kv \u4e2d\u5b9e\u73b0\u6e05\u9664\u7684\u63a7\u4ef6\u5373\u53ef # paint in kivymd by xu jing. # date 2020-07-09 BoxLayout: orientation: 'vertical' # toolbar MDToolbar: title: 'Paint' elevation: 10 left_action_items: [['menu', lambda x: None]] spacing: 10 padding: 10 # clean canvas MDFloatingActionButton: icon: \"./icon.ico\" opposite_colors: True elevation_normal: 8 md_bg_color: app.theme_cls.primary_color pos_hint: {\"center_x\": .5,\"center_y\": .5} on_release: root.ids.my_paint.clean_canvas() # paint canvas DrawCanvasWidget: id: my_paint canvas.before: Color: rgba: [1,1,1,1] Rectangle: pos: self.pos size: self.size # line width MDFloatingActionButtonSpeedDial: data: app.data hint_animation: True rotation_root_button: True callback: app.callback 4.\u6539\u53d8\u989c\u8272MDRoundFlatButton\u7684\u5b9e\u73b0 \u589e\u52a0canvas\u7ebf\u6761\u989c\u8272\u7684\u529f\u80fd\uff0c\u5728\u754c\u9762\u8bbe\u8ba1\u65f6\uff0c\u6211\u4eec\u5df2\u7ecf\u5728\u4e0a\u4e00\u7ae0\u4e2d\u5b9e\u73b0\u4e86\u66f4\u6539\u989c\u8272\u7684\u4e8b\u4ef6\uff0c\u4ec5\u4ec5\u5728 paint.kv \u4e2d\u5b9e\u73b0\u66f4\u6539\u989c\u8272\u7684\u63a7\u4ef6\u5373\u53ef # paint in kivymd by xu jing. # date 2020-07-09 BoxLayout: orientation: 'vertical' # toolbar MDToolbar: title: 'Paint' elevation: 10 left_action_items: [['menu', lambda x: None]] spacing: 10 padding: 10 # line color MDRoundFlatButton: text: \"Red\" elevation_normal: 2 opposite_colors: True md_bg_color: [1,0,0,1] pos_hint: {\"center_x\": .5,\"center_y\": .5} on_release: root.ids.my_paint.change_color(self.md_bg_color) MDRoundFlatButton: text: \"Green\" elevation_normal: 2 opposite_colors: True md_bg_color: [0,1,0,1] pos_hint: {\"center_x\": .5,\"center_y\": .5} on_release: root.ids.my_paint.change_color(self.md_bg_color) MDRoundFlatButton: text: \"Blue\" elevation_normal: 2 opposite_colors: True md_bg_color: [0,0,1,1] pos_hint: {\"center_x\": .5,\"center_y\": .5} on_release: root.ids.my_paint.change_color(self.md_bg_color) # clean canvas MDFloatingActionButton: icon: \"./icon.ico\" opposite_colors: True elevation_normal: 8 md_bg_color: app.theme_cls.primary_color pos_hint: {\"center_x\": .5,\"center_y\": .5} on_release: root.ids.my_paint.clean_canvas() # paint canvas DrawCanvasWidget: id: my_paint canvas.before: Color: rgba: [1,1,1,1] Rectangle: pos: self.pos size: self.size # line width MDFloatingActionButtonSpeedDial: data: app.data hint_animation: True rotation_root_button: True callback: app.callback 5.\u9879\u76ee\u603b\u7ed3 \u6211\u4eec\u4f7f\u7528kivymd\u4f18\u5316\u4e86kivy\u7684UI\u754c\u9762\uff0c\u4f7f\u5176\u770b\u8d77\u6765\u66f4\u50cf\u662f\u4e00\u4e2a\u5b89\u5353\u6216ios\u7684NUI\u5e94\u7528\uff0c\u5bf9\u4e8eUI\u65b9\u9762\u7684\u8bbe\u8ba1\u7b14\u8005\u5e76\u4e0d\u7cbe\u901a\uff0c\u5728\u771f\u6b63\u7684\u9879\u76ee\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u5bfb\u6c42\u516c\u53f8UI\u8bbe\u8ba1\u5e08\u7684\u5e2e\u52a9\uff0c\u57fa\u4e8eUI\u8bbe\u8ba1\u5e08\u5bf9\u4e8e\u63a7\u4ef6\u7684\u8bbe\u8ba1\uff0c\u6211\u4eec\u4f7f\u7528kivy\u6216kivymd\u53bb\u5b9e\u73b0\u3002 \u6211\u4eec\u4f7f\u7528buildozer\u6765\u6253\u5305\u6211\u4eec\u7684\u5b89\u5353\u5e94\u7528\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u53c2\u8003\u7b2c9\u7ae0\u7684\u4ecb\u7ecd\uff0c\u6253\u5305\u540e\u7684apk\u5728\u5b89\u5353\u6a21\u62df\u5668\u4e0a\u7684\u8fd0\u884c\u6548\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5b89\u5353\u6a21\u62df\u5668\u4e0a\u7684\u6548\u679c\uff1a \u5b89\u5353\u624b\u673a\u4e0a\u7684\u6548\u679c\uff1a","title":"\u7b2c\u4e09\u7ae0 \u6d82\u9e26\u753b\u677f\u9879\u76ee\u57fa\u4e8ekivymd\u5b9e\u73b0"},{"location":"chapter3/#kivymd","text":"","title":"\u7b2c\u4e09\u7ae0 \u6d82\u9e26\u753b\u677f\u9879\u76ee\u57fa\u4e8ekivymd\u5b9e\u73b0"},{"location":"chapter3/#1","text":"\u6211\u4eec\u8fdb\u4e00\u6b65\u5bf9\u6d82\u9e26\u753b\u677f\u5728\u754c\u9762\u5c42\u9762\u4e0a\u505a\u4f18\u5316\uff0c\u6211\u4eec\u4f7f\u7528kivymd\u5e93\u8fdb\u884c\u754c\u9762\u7684\u4f18\u5316\uff0ckivymd\u662f\u4e0eMaterial Desugn\u517c\u5bb9\u7684\u5c0f\u90e8\u4ef6\u7684\u96c6\u5408\uff0c\u53ef\u4e0ekivy\u4e00\u8d77\u4f7f\u7528\uff0ckivymd\u7684\u76ee\u6807\u662f\u5728\u4e0d\u727a\u7272\u6613\u7528\u6027\u6216\u5e94\u7528\u7a0b\u5e8f\u6027\u80fd\u7684\u524d\u63d0\u4e0b\uff0c\u5c3d\u53ef\u80fd\u63a5\u8fd1Google\u7684Material Design\u89c4\u8303\u3002kivymd\u7684\u539f\u4f5c\u8005\u4e09\u5e74\u524d\u505c\u6b62\u66f4\u65b0\u9879\u76ee\uff0c https://github.com/HeaTTheatR/KivyMD \u5bf9kivymd\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u5f00\u53d1\uff0c\u76ee\u524d\u8be5\u9879\u76ee\u4ecd\u7136\u5904\u4e8e\u6d4b\u8bd5\u7248\u7684\u9636\u6bb5\u3002 \u9996\u5148\u6211\u4eec\u4f7f\u7528kivymd\u6784\u5efa\u754c\u9762\uff0c\u521b\u5efa main.py from kivy.lang import Builder from kivy.graphics import Line, Color from kivy.uix.widget import Widget from kivy.uix.boxlayout import BoxLayout from kivy.properties import StringProperty from kivymd.app import MDApp from kivymd.theming import ThemableBehavior global line_width line_width = 2 # \u8fd9\u4e2a\u7c7b\u4e3b\u8981copy\u6211\u4eec\u5728\u4e0a\u4e00\u7ae0\u4e2d\u6784\u5efa\u7684\u7c7b class DrawCanvasWidget(Widget): def __init__(self,**kwargs): super().__init__(**kwargs) # \u9ed8\u8ba4\u5212\u7ebf\u7684\u989c\u8272 self.line_color = [0,0,0,1] self.canvas.add(Color(rgba=[0,0,0,1])) def on_touch_down(self,touch): if Widget.on_touch_down(self,touch): return with self.canvas: touch.ud['current_line'] = Line(points=(touch.x,touch.y),width=line_width) def on_touch_move(self,touch): if 'current_line' in touch.ud: touch.ud['current_line'].points += (touch.x,touch.y) def change_color(self,new_color): # global line_color self.line_color = new_color # \u5728\u6e05\u9664\u753b\u677f\u65f6\u4f7f\u7528 self.canvas.add(Color(rgb=self.line_color)) def change_line_width(self,line_width_ico=\"baby-face\"): global line_width line_width = {\"babel\":1,\"baby-face\":2,\"baguette\":4}[line_width_ico] def clean_canvas(self): saved = self.children[:] # \u4fdd\u7559root\u63a7\u4ef6\u4e0a\u7684\u5b50\u63a7\u4ef6\uff08button) self.clear_widgets() # \u6e05\u9664\u6240\u6709\u63a7\u4ef6\u95f4 self.canvas.clear() # \u6e05\u9664canvas for widget in saved: # \u5c06\u6e05\u9664\u7684\u5b50\u63a7\u4ef6\u518d\u753b\u4e0a self.add_widget(widget) self.change_color(self.line_color) class PaintsApp(MDApp): def build(self): self.icon = \"./icon.ico\" self.title = \"\u6d82\u9e26\u753b\u677f(kivymd\u7248)\" self.theme_cls.primary_palette = \"Blue\" return Builder.load_file(\"./paint.kv\") if __name__ == \"__main__\": PaintsApp().run() \u521b\u5efa paint.kv \u7684UI\u754c\u9762 # paint in kivymd by xu jing. # date 2020-07-09 BoxLayout: orientation: 'vertical' # toolbar MDToolbar: title: 'Paint' elevation: 10 left_action_items: [['menu', lambda x: None]] spacing: 10 padding: 10 # paint canvas DrawCanvasWidget: id: my_paint canvas.before: Color: rgba: [1,1,1,1] Rectangle: pos: self.pos size: self.size","title":"1.\u9879\u76ee\u5c55\u793a\u4e0e\u753b\u677f\u6574\u4f53\u754c\u9762"},{"location":"chapter3/#2mdfloatingactionbuttonspeeddial","text":"\u901a\u8fc7kivymd\u4e2d\u7684MDFloatingActionButtonSpeedDial\u5b9e\u73b0\u7ebf\u5bbd\u7684\u6539\u53d8\uff0c\u4fee\u6539 main.py from kivy.lang import Builder from kivy.graphics import Line, Color from kivy.uix.widget import Widget from kivy.uix.boxlayout import BoxLayout from kivy.properties import StringProperty from kivymd.app import MDApp from kivymd.theming import ThemableBehavior global line_width line_width = 2 # \u8fd9\u4e2a\u7c7b\u4e3b\u8981copy\u6211\u4eec\u5728\u4e0a\u4e00\u7ae0\u4e2d\u6784\u5efa\u7684\u7c7b class DrawCanvasWidget(Widget): def __init__(self,**kwargs): super().__init__(**kwargs) # \u9ed8\u8ba4\u5212\u7ebf\u7684\u989c\u8272 self.line_color = [0,0,0,1] self.canvas.add(Color(rgba=[0,0,0,1])) def on_touch_down(self,touch): if Widget.on_touch_down(self,touch): return with self.canvas: touch.ud['current_line'] = Line(points=(touch.x,touch.y),width=line_width) def on_touch_move(self,touch): if 'current_line' in touch.ud: touch.ud['current_line'].points += (touch.x,touch.y) def change_color(self,new_color): # global line_color self.line_color = new_color # \u5728\u6e05\u9664\u753b\u677f\u65f6\u4f7f\u7528 self.canvas.add(Color(rgb=self.line_color)) def change_line_width(self,line_width_ico=\"baby-face\"): global line_width line_width = {\"babel\":1,\"baby-face\":2,\"baguette\":4}[line_width_ico] def clean_canvas(self): saved = self.children[:] # \u4fdd\u7559root\u63a7\u4ef6\u4e0a\u7684\u5b50\u63a7\u4ef6\uff08button) self.clear_widgets() # \u6e05\u9664\u6240\u6709\u63a7\u4ef6\u95f4 self.canvas.clear() # \u6e05\u9664canvas for widget in saved: # \u5c06\u6e05\u9664\u7684\u5b50\u63a7\u4ef6\u518d\u753b\u4e0a self.add_widget(widget) self.change_color(self.line_color) class PaintsApp(MDApp): # \u4fee\u6539\u7ebf\u5bbd\u7684\u529f\u80fd data = { \"babel\": \"Thin\", \"baby-face\": \"Normal\", \"baguette\": \"Thick\", } def callback(self, instance): # print(instance.icon) if instance.icon in [\"babel\",\"baby-face\",\"baguette\"]: DrawCanvasWidget().change_line_width(line_width_ico=instance.icon) # print(line_width) def build(self): self.icon = \"./icon.ico\" self.title = \"\u6d82\u9e26\u753b\u677f(kivymd\u7248)\" self.theme_cls.primary_palette = \"Blue\" return Builder.load_file(\"./paint.kv\") if __name__ == \"__main__\": PaintsApp().run() paint.kv \u589e\u52a0\u4fee\u6539\u7ebf\u5bbd\u7684\u529f\u80fd # paint in kivymd by xu jing. # date 2020-07-09 BoxLayout: orientation: 'vertical' # toolbar MDToolbar: title: 'Paint' elevation: 10 left_action_items: [['menu', lambda x: None]] spacing: 10 padding: 10 # paint canvas DrawCanvasWidget: id: my_paint canvas.before: Color: rgba: [1,1,1,1] Rectangle: pos: self.pos size: self.size # line width MDFloatingActionButtonSpeedDial: data: app.data hint_animation: True rotation_root_button: True callback: app.callback","title":"2.\u6539\u53d8\u7ebf\u5bbdMDFloatingActionButtonSpeedDial\u7684\u5b9e\u73b0"},{"location":"chapter3/#3mdfloatingactionbutton","text":"\u589e\u52a0\u6e05\u9664canvas\u7684\u529f\u80fd\uff0c\u5728\u754c\u9762\u8bbe\u8ba1\u65f6\uff0c\u6211\u4eec\u5df2\u7ecf\u5728\u4e0a\u4e00\u7ae0\u4e2d\u5b9e\u73b0\u4e86\u6e05\u9664\u7684\u4e8b\u4ef6\uff0c\u4ec5\u4ec5\u5728 paint.kv \u4e2d\u5b9e\u73b0\u6e05\u9664\u7684\u63a7\u4ef6\u5373\u53ef # paint in kivymd by xu jing. # date 2020-07-09 BoxLayout: orientation: 'vertical' # toolbar MDToolbar: title: 'Paint' elevation: 10 left_action_items: [['menu', lambda x: None]] spacing: 10 padding: 10 # clean canvas MDFloatingActionButton: icon: \"./icon.ico\" opposite_colors: True elevation_normal: 8 md_bg_color: app.theme_cls.primary_color pos_hint: {\"center_x\": .5,\"center_y\": .5} on_release: root.ids.my_paint.clean_canvas() # paint canvas DrawCanvasWidget: id: my_paint canvas.before: Color: rgba: [1,1,1,1] Rectangle: pos: self.pos size: self.size # line width MDFloatingActionButtonSpeedDial: data: app.data hint_animation: True rotation_root_button: True callback: app.callback","title":"3.\u6e05\u9664\u529f\u80fdMDFloatingActionButton\u7684\u5b9e\u73b0"},{"location":"chapter3/#4mdroundflatbutton","text":"\u589e\u52a0canvas\u7ebf\u6761\u989c\u8272\u7684\u529f\u80fd\uff0c\u5728\u754c\u9762\u8bbe\u8ba1\u65f6\uff0c\u6211\u4eec\u5df2\u7ecf\u5728\u4e0a\u4e00\u7ae0\u4e2d\u5b9e\u73b0\u4e86\u66f4\u6539\u989c\u8272\u7684\u4e8b\u4ef6\uff0c\u4ec5\u4ec5\u5728 paint.kv \u4e2d\u5b9e\u73b0\u66f4\u6539\u989c\u8272\u7684\u63a7\u4ef6\u5373\u53ef # paint in kivymd by xu jing. # date 2020-07-09 BoxLayout: orientation: 'vertical' # toolbar MDToolbar: title: 'Paint' elevation: 10 left_action_items: [['menu', lambda x: None]] spacing: 10 padding: 10 # line color MDRoundFlatButton: text: \"Red\" elevation_normal: 2 opposite_colors: True md_bg_color: [1,0,0,1] pos_hint: {\"center_x\": .5,\"center_y\": .5} on_release: root.ids.my_paint.change_color(self.md_bg_color) MDRoundFlatButton: text: \"Green\" elevation_normal: 2 opposite_colors: True md_bg_color: [0,1,0,1] pos_hint: {\"center_x\": .5,\"center_y\": .5} on_release: root.ids.my_paint.change_color(self.md_bg_color) MDRoundFlatButton: text: \"Blue\" elevation_normal: 2 opposite_colors: True md_bg_color: [0,0,1,1] pos_hint: {\"center_x\": .5,\"center_y\": .5} on_release: root.ids.my_paint.change_color(self.md_bg_color) # clean canvas MDFloatingActionButton: icon: \"./icon.ico\" opposite_colors: True elevation_normal: 8 md_bg_color: app.theme_cls.primary_color pos_hint: {\"center_x\": .5,\"center_y\": .5} on_release: root.ids.my_paint.clean_canvas() # paint canvas DrawCanvasWidget: id: my_paint canvas.before: Color: rgba: [1,1,1,1] Rectangle: pos: self.pos size: self.size # line width MDFloatingActionButtonSpeedDial: data: app.data hint_animation: True rotation_root_button: True callback: app.callback","title":"4.\u6539\u53d8\u989c\u8272MDRoundFlatButton\u7684\u5b9e\u73b0"},{"location":"chapter3/#5","text":"\u6211\u4eec\u4f7f\u7528kivymd\u4f18\u5316\u4e86kivy\u7684UI\u754c\u9762\uff0c\u4f7f\u5176\u770b\u8d77\u6765\u66f4\u50cf\u662f\u4e00\u4e2a\u5b89\u5353\u6216ios\u7684NUI\u5e94\u7528\uff0c\u5bf9\u4e8eUI\u65b9\u9762\u7684\u8bbe\u8ba1\u7b14\u8005\u5e76\u4e0d\u7cbe\u901a\uff0c\u5728\u771f\u6b63\u7684\u9879\u76ee\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u5bfb\u6c42\u516c\u53f8UI\u8bbe\u8ba1\u5e08\u7684\u5e2e\u52a9\uff0c\u57fa\u4e8eUI\u8bbe\u8ba1\u5e08\u5bf9\u4e8e\u63a7\u4ef6\u7684\u8bbe\u8ba1\uff0c\u6211\u4eec\u4f7f\u7528kivy\u6216kivymd\u53bb\u5b9e\u73b0\u3002 \u6211\u4eec\u4f7f\u7528buildozer\u6765\u6253\u5305\u6211\u4eec\u7684\u5b89\u5353\u5e94\u7528\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u53c2\u8003\u7b2c9\u7ae0\u7684\u4ecb\u7ecd\uff0c\u6253\u5305\u540e\u7684apk\u5728\u5b89\u5353\u6a21\u62df\u5668\u4e0a\u7684\u8fd0\u884c\u6548\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5b89\u5353\u6a21\u62df\u5668\u4e0a\u7684\u6548\u679c\uff1a \u5b89\u5353\u624b\u673a\u4e0a\u7684\u6548\u679c\uff1a","title":"5.\u9879\u76ee\u603b\u7ed3"},{"location":"chapter4/","text":"\u7b2c\u56db\u7ae0\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b\u9879\u76ee(\u57fa\u4e8eKivy) 1.\u8f66\u9053\u7ebf\u68c0\u6d4b\u7684OpenCV\u5b9e\u73b0 \u8be5\u90e8\u5206\u5e76\u4e0d\u662f\u672c\u8bfe\u7a0b\u4ecb\u7ecd\u7684\u91cd\u70b9\uff0c\u5728\u89c6\u9891\u8bfe\u7a0b\u4e2d\u4f1a\u5bf9\u8be5\u90e8\u5206\u8fdb\u884c\u8bb2\u89e3\uff0c\u5176\u4ee3\u7801\u4fdd\u5b58\u5728 sample_lane_detection.py \u4e2d ''' xujing 2020-06-20 \u8f66\u9053\u7ebf\u68c0\u6d4b opencv 1\u3001CCD\u89c6\u9891\u6444\u50cf\u673a\u6821\u51c6 2\u3001\u8bfb\u89c6\u9891\uff0c\u8f6c\u6210\u6309\u6bcf\u4e00\u5e27\u8bfb\u53d6\uff0c\u56fe\u50cf\u9884\u5904\u7406 3\u3001\u56fe\u50cf\u7070\u5ea6\u5316 4\u3001\u9ad8\u65af\u5e73\u6ed1\uff0c\u51cf\u5c11\u8fb9\u7f18\u5e72\u6270 5\u3001\u5229\u7528canny\u7b97\u5b50\uff0c\u8fdb\u884c\u8fb9\u7f18\u68c0\u6d4b 6\u3001\u8bbe\u5b9a\u611f\u5174\u8da3\u533a\u57df\uff0c\u51cf\u5c11\u8fd0\u7b97\u91cf 7\u3001\u5229\u7528hough\u53d8\u6362\uff0c\u8fdb\u884c\u76f4\u7ebf\u68c0\u6d4b 8\u3001\u5c06\u68c0\u6d4b\u6210\u529f\u7684\u76f4\u7ebf\u548c\u539f\u56fe\u50cf\u878d\u5408 ''' import cv2 import numpy as np import time import logging #Canny\u7b97\u5b50\u6216Sobel\u7b97\u5b50\u8fdb\u884c\u8fb9\u7f18\u68c0\u6d4b def canny_func(blur_gray,canny_lthreshold=150,canny_hthreshold=250): canny_lthreshold = canny_lthreshold canny_hthreshold = canny_hthreshold edges = cv2.Canny(blur_gray,canny_lthreshold,canny_hthreshold) return edges #\u8bbe\u7f6eROI\u533a\u57df,\u5b9a\u4e49\u4e00\u4e2a\u548c\u8f93\u5165\u56fe\u50cf\u540c\u6837\u5927\u5c0f\u7684\u5168\u9ed1\u56fe\u50cfmask def roi_mask(img,vertics): mask = np.zeros_like(img) #\u6839\u636e\u8f93\u5165\u56fe\u50cf\u7684\u901a\u9053\u6570\uff0c\u5ffd\u7565\u7684\u50cf\u7d20\u70b9\u662f\u591a\u901a\u9053\u7684\u767d\u8272\uff0c\u8fd8\u662f\u5355\u901a\u9053\u7684\u767d\u8272 if len(img.shape) > 2: channel_count = img.shape[2] mask_color = (255,)*channel_count else: mask_color = 255 cv2.fillPoly(mask,[vertics],mask_color) masked_img = cv2.bitwise_and(img,mask) return masked_img # Hough\u53d8\u6362 # https://blog.csdn.net/yuyuntan/article/details/80141392 def hough_func(roi_image,rho=1,theta=np.pi/180,threshold=15,min_line_lenght=40,max_line_gap=20): rho = rho theta = theta threshold = threshold min_line_lenght = min_line_lenght max_line_gap = max_line_gap # line_img = hough_lines(roi_image,rho,theta,threshold,min_line_lenght,max_line_gap) line_img = cv2.HoughLinesP(roi_image,rho,theta,threshold,min_line_lenght,max_line_gap) return line_img # def draw_lines(img,lines,color = [0,0,255],thickness = 2): # for line in lines: # for x1,y1,x2,y2 in line: # cv2.line(img,(x1,y1),(x2,y2),color,thickness) # line_image = np.copy(img) # \u590d\u5236\u4e00\u4efd\u539f\u56fe\uff0c\u5c06\u7ebf\u6bb5\u7ed8\u5236\u5728\u8fd9\u5e45\u56fe\u4e0a # draw_lines(line_image, lines, [255, 0, 0], 6) # \u8ba1\u7b97\u5de6\u53f3\u8f66\u9053\u7ebf\u7684\u76f4\u7ebf\u65b9\u7a0b # \u6839\u636e\u6bcf\u4e2a\u7ebf\u6bb5\u5728\u56fe\u50cf\u5750\u6807\u7cfb\u4e0b\u7684\u659c\u7387\uff0c\u5224\u65ad\u7ebf\u6bb5\u4e3a\u5de6\u8f66\u9053\u7ebf\u8fd8\u662f\u53f3\u8f66\u9053\u7ebf\uff0c # \u5e76\u5b58\u4e8e\u4e0d\u540c\u7684\u53d8\u91cf\u4e2d\u3002\u968f\u540e\u5bf9\u6240\u6709\u5de6\u8f66\u9053\u7ebf\u4e0a\u7684\u70b9\u3001\u6240\u6709\u53f3\u8f66\u9053\u7ebf\u4e0a\u7684\u70b9\u505a\u4e00\u6b21\u6700\u5c0f\u4e8c\u4e58\u76f4\u7ebf\u62df\u5408\uff0c # \u5f97\u5230\u7684\u5373\u4e3a\u6700\u7ec8\u7684\u5de6\u3001\u53f3\u8f66\u9053\u7ebf\u7684\u76f4\u7ebf\u65b9\u7a0b\u3002 # \u6700\u5c0f\u4e8c\u4e58\u62df\u5408\u8bb2\u89e3\u53ef\u53c2\u8003\uff1ahttps://blog.csdn.net/nienelong3319/article/details/80894621 # np.polyfit(X, Y, 1) #\u4e00\u6b21\u591a\u9879\u5f0f\u62df\u5408\uff0c\u76f8\u5f53\u4e8e\u7ebf\u6027\u62df\u5408 # \u8ba1\u7b97\u5de6\u53f3\u8f66\u9053\u7ebf\u7684\u4e0a\u4e0b\u8fb9\u754c # \u8003\u8651\u5230\u73b0\u5b9e\u4e16\u754c\u4e2d\u5de6\u53f3\u8f66\u9053\u7ebf\u4e00\u822c\u90fd\u662f\u5e73\u884c\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u8ba4\u4e3a\u5de6\u53f3\u8f66\u9053\u7ebf\u4e0a\u6700\u4e0a\u548c\u6700\u4e0b\u7684\u70b9\u5bf9\u5e94\u7684y\u503c\uff0c # \u5c31\u662f\u5de6\u53f3\u8f66\u9053\u7ebf\u7684\u8fb9\u754c\u3002 def draw_lines(img, lines, color=[0, 0, 255], thickness=2): left_lines_x = [] left_lines_y = [] right_lines_x = [] right_lines_y = [] line_y_max = 0 line_y_min = 999 try: for line in lines: for x1,y1,x2,y2 in line: if y1 > line_y_max: line_y_max = y1 if y2 > line_y_max: line_y_max = y2 if y1 < line_y_min: line_y_min = y1 if y2 < line_y_min: line_y_min = y2 k = (y2 - y1)/(x2 - x1) if k < -0.3: left_lines_x.append(x1) left_lines_y.append(y1) left_lines_x.append(x2) left_lines_y.append(y2) elif k > 0.3: right_lines_x.append(x1) right_lines_y.append(y1) right_lines_x.append(x2) right_lines_y.append(y2) #\u6700\u5c0f\u4e8c\u4e58\u76f4\u7ebf\u62df\u5408 left_line_k, left_line_b = np.polyfit(left_lines_x, left_lines_y, 1) right_line_k, right_line_b = np.polyfit(right_lines_x, right_lines_y, 1) #\u6839\u636e\u76f4\u7ebf\u65b9\u7a0b\u548c\u6700\u5927\u3001\u6700\u5c0f\u7684y\u503c\u53cd\u7b97\u5bf9\u5e94\u7684x cv2.line(img, (int((line_y_max - left_line_b)/left_line_k), line_y_max), (int((line_y_min - left_line_b)/left_line_k), line_y_min), color, thickness) cv2.line(img, (int((line_y_max - right_line_b)/right_line_k), line_y_max), (int((line_y_min - right_line_b)/right_line_k), line_y_min), color, thickness) # plot polygon zero_img = np.zeros((img.shape), dtype=np.uint8) polygon = np.array([ [int((line_y_max - left_line_b)/left_line_k), line_y_max], [int((line_y_max - right_line_b)/right_line_k), line_y_max], [int((line_y_min - right_line_b)/right_line_k), line_y_min], [int((line_y_min - left_line_b)/left_line_k), line_y_min] ]) # \u75281\u586b\u5145\u591a\u8fb9\u5f62 cv2.fillConvexPoly(zero_img, polygon, color=(0, 255, 0)) # zero_mask = cv2.rectangle(zero_img, (int((line_y_max - left_line_b)/left_line_k), line_y_max), # (int((line_y_min - right_line_b)/right_line_k), line_y_min), # color=(0, 255, 0), thickness=-1) alpha = 1 # beta \u4e3a\u7b2c\u4e8c\u5f20\u56fe\u7247\u7684\u900f\u660e\u5ea6 beta = 0.2 gamma = 0 # cv2.addWeighted \u5c06\u539f\u59cb\u56fe\u7247\u4e0e mask \u878d\u5408 img = cv2.addWeighted(img, alpha, zero_img, beta, gamma) except Exception as e: # print(str(e)) # logging.info(\"[lane detect ] NO detection\") pass return img def detect_img(img): start = time.time() #\u53d6\u56fe\u7070\u5ea6\u5316 grap = cv2.cvtColor(img,cv2.COLOR_RGB2GRAY) blur_grap = cv2.GaussianBlur(grap,(3,3),0) canny_image = canny_func(blur_grap,canny_lthreshold=150,canny_hthreshold=250) #\u56fe\u50cf\u50cf\u7d20\u884c\u6570 rows = canny_image.shape[0] 720\u884c #\u56fe\u50cf\u50cf\u7d20\u5217\u6570 cols = canny_image.shape[1] 1280\u5217 left_bottom = [0, canny_image.shape[0]] right_bottom = [canny_image.shape[1], canny_image.shape[0]] left_top = [canny_image.shape[1]/3,canny_image.shape[0]/1.5] right_top = [canny_image.shape[1]/3*2,canny_image.shape[0]/1.5] # apex = [canny_image.shape[1]/2, 290] # vertices = np.array([ left_bottom, right_bottom, apex ], np.int32) vertices = np.array([ left_top,right_top, right_bottom, left_bottom], np.int32) roi_image = roi_mask(canny_image, vertices) # roi_image = roi_mask(img, vertices) line_img = hough_func(roi_image,rho=1,theta=np.pi/180,threshold=15,min_line_lenght=40,max_line_gap=20) img = draw_lines(img,line_img) end = time.time() detect_fps = round(1.0/(end-start+0.00001),2) font = cv2.FONT_HERSHEY_SIMPLEX img = cv2.putText(img, 'Lane detect v1.0.0 | Xu Jing | FPS: {}'.format(detect_fps), (10, 40), font, 0.7, (0,255,0), 2) return img if __name__ == \"__main__\": img = cv2.imread(\"./static/test.jpg\") img = detect_img(img) cv2.imwrite(\"output.jpg\",img) 2.\u9879\u76ee\u5c55\u793a\u53caIndex\u9875\u9762\u5f00\u53d1 \u9996\u5148\u6211\u4eec\u521b\u5efaIndex\u9875\u9762\uff0c\u6784\u5efa\u4e00\u4e2a main.py \u6587\u4ef6\uff0c\u8be5py\u6587\u4ef6\u662fkivy\u5e94\u7528\u7a0b\u5e8f\u7684\u5165\u53e3\u51fd\u6570 import kivy from kivy.app import App from kivy.uix.floatlayout import FloatLayout from kivy.uix.boxlayout import BoxLayout from kivy.uix.label import Label from kivy.uix.button import Button from kivy.uix.filechooser import FileChooserIconView from kivy.properties import ObjectProperty from kivy.uix.popup import Popup from kivy.factory import Factory from kivy.uix.screenmanager import Screen, ScreenManager # from kivy.clock import Clock from kivy.graphics.texture import Texture from kivy.uix.camera import Camera from kivy.properties import BooleanProperty, NumericProperty import os import cv2 import numpy as np import logging from sample_lane_detection import * # import win32timezone # Index page class IndexPage(FloatLayout): ''' \u6b22\u8fce\u9875\u9762 ''' def __init__(self,**kwargs): super().__init__(**kwargs) @staticmethod def page_go(*args): App.get_running_app().screen_manager.current=\"Image_page\" App.get_running_app().screen_manager.transition.direction = 'left' class LaneDetectApp(App): def build(self): self.icon = \"./static/icon.ico\" self.title = \"\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4bApp\" self.load_kv(\"./index.kv\") # \u9700\u8981\u521b\u5efa\u4e00\u4e2aindex.kv self.screen_manager = ScreenManager() pages = {\"Index_page\":IndexPage()} for item,page in pages.items(): self.default_page = page # \u6dfb\u52a0\u9875\u9762 screen = Screen(name=item) screen.add_widget(self.default_page) # \u5411\u5c4f\u5e55\u7ba1\u7406\u5668\u6dfb\u52a0\u9875\u9762 self.screen_manager.add_widget(screen) return self.screen_manager if __name__ == \"__main__\": LaneDetectApp().run() \u6211\u4eec\u5c06UI\u63a7\u4ef6\u901a\u8fc7kvlang\u5b9e\u73b0\uff0c\u521b\u5efa index.kv \u6587\u4ef6 # xujing # index page #: import C kivy.utils.get_color_from_hex <IndexPage>: canvas.before: Color: rgba: [1,1,1,1] Rectangle: pos: self.pos size: self.size source: './static/index.jpg' Label: id: 'title_label' text: '[ref=\"click\"][b]\\u6b22\\u8fce\\u4f7f\\u7528\\u8f66\\u9053\\u7ebf\\u68c0\\u6d4b\\u0041\\u0070\\u0070[/b][/ref]' color: C('#FFFF00') font_name: './static/DroidSansFallback.ttf' font_size: 72 # 24 pos_hint: {\"center_x\":0.5,\"y\":0.2} markup: True on_ref_press: root.page_go() Label: text: '[b]v1.0.0[/b]' color: C('#FFFF00') font_name: './static/DroidSansFallback.ttf' font_size: 54 #18 pos_hint: {\"center_x\":0.5,\"y\":0.1} markup: True Label: text: '[b]\\u5f00\\u53d1\\u8005\\uff1a\\u0020\\u5f90\\u9759[/b]' color: C('#FFFF00') font_name: './static/DroidSansFallback.ttf' font_size: 54 #18 pos_hint: {\"center_x\":0.5,\"y\":0.05} markup: True 3.\u56fe\u50cf\u8f66\u9053\u7ebf\u68c0\u6d4b\u9875\u9762\u5f00\u53d1 \u7ee7\u7eed\u5b8c\u5584\u8f66\u9053\u7ebf\u68c0\u6d4b\u4e2d\u57fa\u4e8e\u56fe\u50cf\u7684\u8f66\u9053\u7ebf\u68c0\u6d4b\u9875\u9762\u7684\u5f00\u53d1\uff0c\u5728\u539f\u6709\u7684index\u9875\u9762\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u9875\u9762 ''' xujing 2020-06-26 \u8f66\u9053\u7ebf\u52a0\u6d4b\u7684\u8de8\u5e73\u53f0GUI\u5b9e\u73b0(\u57fa\u4e8ekivy) \u652f\u6301Windows, Linux, MacOS, ios, Andriod\u6253\u5305 ''' import kivy from kivy.app import App from kivy.uix.floatlayout import FloatLayout from kivy.uix.boxlayout import BoxLayout from kivy.uix.label import Label from kivy.uix.button import Button from kivy.uix.filechooser import FileChooserIconView from kivy.properties import ObjectProperty from kivy.uix.popup import Popup from kivy.factory import Factory from kivy.uix.screenmanager import Screen, ScreenManager # from kivy.clock import Clock from kivy.graphics.texture import Texture from kivy.uix.camera import Camera from kivy.properties import BooleanProperty, NumericProperty import os import cv2 import numpy as np import logging from sample_lane_detection import * # import win32timezone def cv_imread(filePath): ''' opencv\u8bfb\u53d6\u5e26\u4e2d\u6587\u8def\u5f84\u7684\u56fe\u7247 ''' with open(filePath,mode=\"rb\") as f: img_buff = np.frombuffer(f.read(),dtype=np.uint8) cv_img = cv2.imdecode(img_buff,-1) #cv_img = cv2.imdecode(np.fromfile(filePath,dtype=np.uint8),-1) # Android error: stderr: OSError: could not seek in file return cv_img # Index page class IndexPage(FloatLayout): ''' \u6b22\u8fce\u9875\u9762 ''' def __init__(self,**kwargs): super().__init__(**kwargs) @staticmethod def page_go(*args): App.get_running_app().screen_manager.current=\"Image_page\" App.get_running_app().screen_manager.transition.direction = 'left' # Image page class LoadDialog(FloatLayout): ''' \u5f39\u7a97\u7684\u52a0\u8f7d\u548c\u53d6\u6d88\u5c5e\u6027\u5b9a\u4e49 ''' load = ObjectProperty(None) cancel = ObjectProperty(None) cwdir = ObjectProperty(None) Factory.register(\"LoadDialog\",cls=LoadDialog) class ImagePage(BoxLayout): ''' \u5355\u5e27\u56fe\u50cf\u7684\u8f66\u9053\u7ebf\u76d1\u6d4b ''' def __init__(self,**kwargs): super().__init__(**kwargs) @staticmethod def back_index(*args): App.get_running_app().screen_manager.current=\"Index_page\" App.get_running_app().screen_manager.transition.direction = 'right' def back_video(self,*args): App.get_running_app().screen_manager.current=\"Video_page\" App.get_running_app().screen_manager.transition.direction = 'left' def dismiss_popup(self): ''' \u5173\u95ed\u5f39\u7a97 ''' self._popup.dismiss() def show_load(self): # \u7ed1\u5b9a\u52a0\u8f7d\u548c\u53d6\u6d88\u7684\u65b9\u6cd5 content = LoadDialog(load=self._load,cancel=self.dismiss_popup,cwdir=os.getcwd()) # content = LoadDialog(load=self._load,cancel=self.dismiss_popup,cwdir=\"/storage/emulated/0/kivy\") self._popup = Popup(title=\"Load Image\",content=content,size_hint=(.9,.9)) # open self._popup.open() def _load(self,path,filename): print(path,filename) self.dismiss_popup() logging.info(\"path:{},filename:{}\".format(path,filename)) # img = cv2.imread(filename) img= cv_imread(filename) img = detect_img(img) img = cv2.cvtColor(img, cv2.COLOR_BGR2RGBA) img = cv2.flip(img, 0) # \u65cb\u8f6c img_buff = img.tostring() img_texture = Texture.create(size=(img.shape[1], img.shape[0]), colorfmt='rgba') img_texture.blit_buffer(img_buff, colorfmt='rgba', bufferfmt='ubyte') self.ids.img_det.texture = img_texture class LaneDetectApp(App): def build(self): self.icon = \"./static/icon.ico\" self.title = \"\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4bApp\" self.load_kv(\"./index.kv\") self.load_kv(\"./image.kv\") self.screen_manager = ScreenManager() pages = {\"Index_page\":IndexPage(),\"Image_page\":ImagePage(),} for item,page in pages.items(): self.default_page = page # \u6dfb\u52a0\u9875\u9762 screen = Screen(name=item) screen.add_widget(self.default_page) # \u5411\u5c4f\u5e55\u7ba1\u7406\u5668\u6dfb\u52a0\u9875\u9762 self.screen_manager.add_widget(screen) return self.screen_manager if __name__ == \"__main__\": LaneDetectApp().run() \u589e\u52a0 image.kv <ImagePage>: orientation: 'vertical' Image: id: img_det source: \"./static/example.jpg\" size_hint: (1.0,.9) size_height_y: None width: 100 allow_stretch: True BoxLayout: orientation: 'horizontal' size_hint: (1,.1) spacing: 25 padding: 10 Button: text: \"[b]\\u8fd4\\u56de\\u4e3b\\u9875[/b]\" font_name: './static/DroidSansFallback.ttf' markup: True on_press:root.back_index() Button: text: \"[b]\\u52a0\\u8f7d\\u56fe\\u50cf[/b]\" font_name: './static/DroidSansFallback.ttf' markup: True on_release: root.show_load() Button: text: \"[b]\\u63a5\\u5165\\u89c6\\u9891[/b]\" font_name: './static/DroidSansFallback.ttf' markup: True on_press:root.back_video() <LoadDialog>: BoxLayout: size: root.size pos: root.pos orientation: \"vertical\" FileChooserIconView: id: filechooser rootpath: root.cwdir filters: ['*.jpg',\"*.png\",\"*.bmp\",\"*.jpeg\"] on_selection: text_input.text = self.selection and self.selection[0] or '' TextInput: id: text_input size_hint_y: .1 multiline: False BoxLayout: size_hint_y: .1 spacing: 30 Button: text: \"[b]\\u52a0\\u8f7d[/b]\" on_release: root.load(filechooser.path,text_input.text) markup: True font_name: './static/DroidSansFallback.ttf' Button: text: \"[b]\\u53d6\\u6d88[/b]\" on_release: root.cancel() markup: True font_name: './static/DroidSansFallback.ttf' 4.\u624b\u673a\u6444\u50cf\u5934\u89c6\u9891\u6d41\u8f66\u9053\u68c0\u6d4b\u5f00\u53d1 \u7ee7\u7eed\u589e\u52a0\u5bf9\u4e8e\u624b\u673a\u6444\u50cf\u5934\u7684\u652f\u6301 ''' xujing 2020-06-26 \u8f66\u9053\u7ebf\u52a0\u6d4b\u7684\u8de8\u5e73\u53f0GUI\u5b9e\u73b0(\u57fa\u4e8ekivy) \u652f\u6301Windows, Linux, MacOS, ios, Andriod\u6253\u5305 ''' import kivy from kivy.app import App from kivy.uix.floatlayout import FloatLayout from kivy.uix.boxlayout import BoxLayout from kivy.uix.label import Label from kivy.uix.button import Button from kivy.uix.filechooser import FileChooserIconView from kivy.properties import ObjectProperty from kivy.uix.popup import Popup from kivy.factory import Factory from kivy.uix.screenmanager import Screen, ScreenManager # from kivy.clock import Clock from kivy.graphics.texture import Texture from kivy.uix.camera import Camera from kivy.properties import BooleanProperty, NumericProperty import os import cv2 import numpy as np import logging from sample_lane_detection import * # import win32timezone def cv_imread(filePath): ''' opencv\u8bfb\u53d6\u5e26\u4e2d\u6587\u8def\u5f84\u7684\u56fe\u7247 ''' with open(filePath,mode=\"rb\") as f: img_buff = np.frombuffer(f.read(),dtype=np.uint8) cv_img = cv2.imdecode(img_buff,-1) #cv_img = cv2.imdecode(np.fromfile(filePath,dtype=np.uint8),-1) # Android error: stderr: OSError: could not seek in file return cv_img # Index page class IndexPage(FloatLayout): ''' \u6b22\u8fce\u9875\u9762 ''' def __init__(self,**kwargs): super().__init__(**kwargs) @staticmethod def page_go(*args): App.get_running_app().screen_manager.current=\"Image_page\" App.get_running_app().screen_manager.transition.direction = 'left' # Image page class LoadDialog(FloatLayout): ''' \u5f39\u7a97\u7684\u52a0\u8f7d\u548c\u53d6\u6d88\u5c5e\u6027\u5b9a\u4e49 ''' load = ObjectProperty(None) cancel = ObjectProperty(None) cwdir = ObjectProperty(None) Factory.register(\"LoadDialog\",cls=LoadDialog) class ImagePage(BoxLayout): ''' \u5355\u5e27\u56fe\u50cf\u7684\u8f66\u9053\u7ebf\u76d1\u6d4b ''' def __init__(self,**kwargs): super().__init__(**kwargs) @staticmethod def back_index(*args): App.get_running_app().screen_manager.current=\"Index_page\" App.get_running_app().screen_manager.transition.direction = 'right' def back_video(self,*args): App.get_running_app().screen_manager.current=\"Video_page\" App.get_running_app().screen_manager.transition.direction = 'left' def dismiss_popup(self): ''' \u5173\u95ed\u5f39\u7a97 ''' self._popup.dismiss() def show_load(self): # \u7ed1\u5b9a\u52a0\u8f7d\u548c\u53d6\u6d88\u7684\u65b9\u6cd5 #content = LoadDialog(load=self._load,cancel=self.dismiss_popup,cwdir=os.getcwd()) content = LoadDialog(load=self._load,cancel=self.dismiss_popup,cwdir=\"/storage/emulated/0/kivy\") self._popup = Popup(title=\"Load Image\",content=content,size_hint=(.9,.9)) # open self._popup.open() def _load(self,path,filename): print(path,filename) self.dismiss_popup() logging.info(\"path:{},filename:{}\".format(path,filename)) # img = cv2.imread(filename) img= cv_imread(filename) img = detect_img(img) img = cv2.cvtColor(img, cv2.COLOR_BGR2RGBA) img = cv2.flip(img, 0) # \u65cb\u8f6c img_buff = img.tostring() img_texture = Texture.create(size=(img.shape[1], img.shape[0]), colorfmt='rgba') img_texture.blit_buffer(img_buff, colorfmt='rgba', bufferfmt='ubyte') self.ids.img_det.texture = img_texture # video page class CameraWidget(Camera): ''' \u591a\u8def\u89c6\u9891\u7684\u8f66\u9053\u7ebf\u76d1\u6d4b ''' detectFaces = BooleanProperty(False) angle = NumericProperty(0) def __init__(self, **kwargs): super().__init__(**kwargs) self.isAndroid = kivy.platform == \"android\" #if self.isAndroid: # self.angle = -90 def on_tex(self, *l): image = np.frombuffer(self.texture.pixels, dtype='uint8') image = image.reshape(self.texture.height, self.texture.width, -1) #logging.info(\"height:{},width:{}\".format(self.texture.height,self.texture.width)) image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR) #if self.angle == 90: # image = cv2.rotate(image, cv2.ROTATE_90_COUNTERCLOCKWISE) #if self.angle == -90: #image = cv2.rotate(image, cv2.ROTATE_90_CLOCKWISE) image = cv2.rotate(image, cv2.ROTATE_90_CLOCKWISE) # \u8f66\u9053\u7ebf\u68c0\u6d4b\u5f00\u59cb image = detect_img(image) image = cv2.resize(image,(640,480)) image = cv2.flip(image, 0) # \u65cb\u8f6c image = cv2.cvtColor(image, cv2.COLOR_BGR2RGBA) numpy_data = image.tostring() #self.texture = Texture.create(size=(image.shape[1], image.shape[0]), colorfmt='rgba', bufferfmt='ubyte') self.texture.blit_buffer(numpy_data, bufferfmt=\"ubyte\", colorfmt='rgba') super().on_tex(self.texture) class VideoPage(BoxLayout): def __init__(self,**kwargs): super().__init__(**kwargs) @staticmethod def back_image(*args): App.get_running_app().screen_manager.current=\"Image_page\" App.get_running_app().screen_manager.transition.direction = 'right' @staticmethod def back_index_1(*args): App.get_running_app().screen_manager.current=\"Index_page\" App.get_running_app().screen_manager.transition.direction = 'left' class LaneDetectApp(App): def build(self): self.icon = \"./static/icon.ico\" self.title = \"\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4bApp\" self.load_kv(\"./index.kv\") self.load_kv(\"./image.kv\") self.load_kv(\"./video.kv\") self.screen_manager = ScreenManager() pages = {\"Index_page\":IndexPage(),\"Image_page\":ImagePage(),\"Video_page\":VideoPage()} for item,page in pages.items(): self.default_page = page # \u6dfb\u52a0\u9875\u9762 screen = Screen(name=item) screen.add_widget(self.default_page) # \u5411\u5c4f\u5e55\u7ba1\u7406\u5668\u6dfb\u52a0\u9875\u9762 self.screen_manager.add_widget(screen) return self.screen_manager if __name__ == \"__main__\": LaneDetectApp().run() \u589e\u52a0 video.kv <CameraWidget> resolution: (640,480) play: True keep_ratio: True allow_stretch: True canvas.before: PushMatrix Rotate: angle: root.angle axis: 0, 0, 1 origin: root.center canvas.after: PopMatrix orientation: 'vertical' <VideoPage>: orientation: 'vertical' CameraWidget: id: camera BoxLayout: orientation: 'horizontal' size_hint: (1,.1) spacing: 25 padding: 10 Button: text: \"[b]\\u52a0\\u8f7d\\u56fe\\u50cf\" font_name: './static/DroidSansFallback.ttf' markup: True on_press:root.back_image() Button: text: \"[b]\\u8fd4\\u56de\\u4e3b\\u9875[/b]\" font_name: './static/DroidSansFallback.ttf' markup: True on_release: root.back_index_1() 5.\u9879\u76ee\u603b\u7ed3 \u5173\u4e8e\u8be5\u9879\u76ee\u5728windows\u5e73\u53f0\u4e0b\u7684\u6253\u5305\uff0c\u53ef\u4ee5\u53c2\u8003\u672c\u8bfe\u7a0b\u7684\u7b2c6\u7ae0\u548c\u7b2c7\u7ae0\uff0c\u6211\u4eec\u5c06\u4f7f\u7528pyinstaller\u548csetupfactory\u5bf9kivy\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884cPC\u7aef\u7684\u5e94\u7528\u7a0b\u5e8f\u6253\u5305\u3002 \u672c\u6b21\u8bfe\u4ec5\u5c55\u793a\u6253\u5305\u540e\u7684\u4e00\u4e9b\u6548\u679c\u3002 windows\u4e0b\u7684\u5e94\u7528\uff1a \u5173\u4e8e\u8be5\u9879\u76ee\u7684Android\u6253\u5305\uff0c\u53ef\u4ee5\u53c2\u8003\u672c\u8bfe\u7a0b\u7684\u7b2c9\u7ae0\uff0c\u672c\u6b21\u8bfe\u4ec5\u5c55\u793a\u5728\u5b89\u5353\u4e0a\u7684\u6253\u5305\u8fd0\u884c\u6548\u679c\u3002 android\u4e0b\u7684\u5e94\u7528","title":"\u7b2c\u56db\u7ae0 \u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b\u9879\u76ee(\u57fa\u4e8eKivy)"},{"location":"chapter4/#kivy","text":"","title":"\u7b2c\u56db\u7ae0\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b\u9879\u76ee(\u57fa\u4e8eKivy)"},{"location":"chapter4/#1opencv","text":"\u8be5\u90e8\u5206\u5e76\u4e0d\u662f\u672c\u8bfe\u7a0b\u4ecb\u7ecd\u7684\u91cd\u70b9\uff0c\u5728\u89c6\u9891\u8bfe\u7a0b\u4e2d\u4f1a\u5bf9\u8be5\u90e8\u5206\u8fdb\u884c\u8bb2\u89e3\uff0c\u5176\u4ee3\u7801\u4fdd\u5b58\u5728 sample_lane_detection.py \u4e2d ''' xujing 2020-06-20 \u8f66\u9053\u7ebf\u68c0\u6d4b opencv 1\u3001CCD\u89c6\u9891\u6444\u50cf\u673a\u6821\u51c6 2\u3001\u8bfb\u89c6\u9891\uff0c\u8f6c\u6210\u6309\u6bcf\u4e00\u5e27\u8bfb\u53d6\uff0c\u56fe\u50cf\u9884\u5904\u7406 3\u3001\u56fe\u50cf\u7070\u5ea6\u5316 4\u3001\u9ad8\u65af\u5e73\u6ed1\uff0c\u51cf\u5c11\u8fb9\u7f18\u5e72\u6270 5\u3001\u5229\u7528canny\u7b97\u5b50\uff0c\u8fdb\u884c\u8fb9\u7f18\u68c0\u6d4b 6\u3001\u8bbe\u5b9a\u611f\u5174\u8da3\u533a\u57df\uff0c\u51cf\u5c11\u8fd0\u7b97\u91cf 7\u3001\u5229\u7528hough\u53d8\u6362\uff0c\u8fdb\u884c\u76f4\u7ebf\u68c0\u6d4b 8\u3001\u5c06\u68c0\u6d4b\u6210\u529f\u7684\u76f4\u7ebf\u548c\u539f\u56fe\u50cf\u878d\u5408 ''' import cv2 import numpy as np import time import logging #Canny\u7b97\u5b50\u6216Sobel\u7b97\u5b50\u8fdb\u884c\u8fb9\u7f18\u68c0\u6d4b def canny_func(blur_gray,canny_lthreshold=150,canny_hthreshold=250): canny_lthreshold = canny_lthreshold canny_hthreshold = canny_hthreshold edges = cv2.Canny(blur_gray,canny_lthreshold,canny_hthreshold) return edges #\u8bbe\u7f6eROI\u533a\u57df,\u5b9a\u4e49\u4e00\u4e2a\u548c\u8f93\u5165\u56fe\u50cf\u540c\u6837\u5927\u5c0f\u7684\u5168\u9ed1\u56fe\u50cfmask def roi_mask(img,vertics): mask = np.zeros_like(img) #\u6839\u636e\u8f93\u5165\u56fe\u50cf\u7684\u901a\u9053\u6570\uff0c\u5ffd\u7565\u7684\u50cf\u7d20\u70b9\u662f\u591a\u901a\u9053\u7684\u767d\u8272\uff0c\u8fd8\u662f\u5355\u901a\u9053\u7684\u767d\u8272 if len(img.shape) > 2: channel_count = img.shape[2] mask_color = (255,)*channel_count else: mask_color = 255 cv2.fillPoly(mask,[vertics],mask_color) masked_img = cv2.bitwise_and(img,mask) return masked_img # Hough\u53d8\u6362 # https://blog.csdn.net/yuyuntan/article/details/80141392 def hough_func(roi_image,rho=1,theta=np.pi/180,threshold=15,min_line_lenght=40,max_line_gap=20): rho = rho theta = theta threshold = threshold min_line_lenght = min_line_lenght max_line_gap = max_line_gap # line_img = hough_lines(roi_image,rho,theta,threshold,min_line_lenght,max_line_gap) line_img = cv2.HoughLinesP(roi_image,rho,theta,threshold,min_line_lenght,max_line_gap) return line_img # def draw_lines(img,lines,color = [0,0,255],thickness = 2): # for line in lines: # for x1,y1,x2,y2 in line: # cv2.line(img,(x1,y1),(x2,y2),color,thickness) # line_image = np.copy(img) # \u590d\u5236\u4e00\u4efd\u539f\u56fe\uff0c\u5c06\u7ebf\u6bb5\u7ed8\u5236\u5728\u8fd9\u5e45\u56fe\u4e0a # draw_lines(line_image, lines, [255, 0, 0], 6) # \u8ba1\u7b97\u5de6\u53f3\u8f66\u9053\u7ebf\u7684\u76f4\u7ebf\u65b9\u7a0b # \u6839\u636e\u6bcf\u4e2a\u7ebf\u6bb5\u5728\u56fe\u50cf\u5750\u6807\u7cfb\u4e0b\u7684\u659c\u7387\uff0c\u5224\u65ad\u7ebf\u6bb5\u4e3a\u5de6\u8f66\u9053\u7ebf\u8fd8\u662f\u53f3\u8f66\u9053\u7ebf\uff0c # \u5e76\u5b58\u4e8e\u4e0d\u540c\u7684\u53d8\u91cf\u4e2d\u3002\u968f\u540e\u5bf9\u6240\u6709\u5de6\u8f66\u9053\u7ebf\u4e0a\u7684\u70b9\u3001\u6240\u6709\u53f3\u8f66\u9053\u7ebf\u4e0a\u7684\u70b9\u505a\u4e00\u6b21\u6700\u5c0f\u4e8c\u4e58\u76f4\u7ebf\u62df\u5408\uff0c # \u5f97\u5230\u7684\u5373\u4e3a\u6700\u7ec8\u7684\u5de6\u3001\u53f3\u8f66\u9053\u7ebf\u7684\u76f4\u7ebf\u65b9\u7a0b\u3002 # \u6700\u5c0f\u4e8c\u4e58\u62df\u5408\u8bb2\u89e3\u53ef\u53c2\u8003\uff1ahttps://blog.csdn.net/nienelong3319/article/details/80894621 # np.polyfit(X, Y, 1) #\u4e00\u6b21\u591a\u9879\u5f0f\u62df\u5408\uff0c\u76f8\u5f53\u4e8e\u7ebf\u6027\u62df\u5408 # \u8ba1\u7b97\u5de6\u53f3\u8f66\u9053\u7ebf\u7684\u4e0a\u4e0b\u8fb9\u754c # \u8003\u8651\u5230\u73b0\u5b9e\u4e16\u754c\u4e2d\u5de6\u53f3\u8f66\u9053\u7ebf\u4e00\u822c\u90fd\u662f\u5e73\u884c\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u8ba4\u4e3a\u5de6\u53f3\u8f66\u9053\u7ebf\u4e0a\u6700\u4e0a\u548c\u6700\u4e0b\u7684\u70b9\u5bf9\u5e94\u7684y\u503c\uff0c # \u5c31\u662f\u5de6\u53f3\u8f66\u9053\u7ebf\u7684\u8fb9\u754c\u3002 def draw_lines(img, lines, color=[0, 0, 255], thickness=2): left_lines_x = [] left_lines_y = [] right_lines_x = [] right_lines_y = [] line_y_max = 0 line_y_min = 999 try: for line in lines: for x1,y1,x2,y2 in line: if y1 > line_y_max: line_y_max = y1 if y2 > line_y_max: line_y_max = y2 if y1 < line_y_min: line_y_min = y1 if y2 < line_y_min: line_y_min = y2 k = (y2 - y1)/(x2 - x1) if k < -0.3: left_lines_x.append(x1) left_lines_y.append(y1) left_lines_x.append(x2) left_lines_y.append(y2) elif k > 0.3: right_lines_x.append(x1) right_lines_y.append(y1) right_lines_x.append(x2) right_lines_y.append(y2) #\u6700\u5c0f\u4e8c\u4e58\u76f4\u7ebf\u62df\u5408 left_line_k, left_line_b = np.polyfit(left_lines_x, left_lines_y, 1) right_line_k, right_line_b = np.polyfit(right_lines_x, right_lines_y, 1) #\u6839\u636e\u76f4\u7ebf\u65b9\u7a0b\u548c\u6700\u5927\u3001\u6700\u5c0f\u7684y\u503c\u53cd\u7b97\u5bf9\u5e94\u7684x cv2.line(img, (int((line_y_max - left_line_b)/left_line_k), line_y_max), (int((line_y_min - left_line_b)/left_line_k), line_y_min), color, thickness) cv2.line(img, (int((line_y_max - right_line_b)/right_line_k), line_y_max), (int((line_y_min - right_line_b)/right_line_k), line_y_min), color, thickness) # plot polygon zero_img = np.zeros((img.shape), dtype=np.uint8) polygon = np.array([ [int((line_y_max - left_line_b)/left_line_k), line_y_max], [int((line_y_max - right_line_b)/right_line_k), line_y_max], [int((line_y_min - right_line_b)/right_line_k), line_y_min], [int((line_y_min - left_line_b)/left_line_k), line_y_min] ]) # \u75281\u586b\u5145\u591a\u8fb9\u5f62 cv2.fillConvexPoly(zero_img, polygon, color=(0, 255, 0)) # zero_mask = cv2.rectangle(zero_img, (int((line_y_max - left_line_b)/left_line_k), line_y_max), # (int((line_y_min - right_line_b)/right_line_k), line_y_min), # color=(0, 255, 0), thickness=-1) alpha = 1 # beta \u4e3a\u7b2c\u4e8c\u5f20\u56fe\u7247\u7684\u900f\u660e\u5ea6 beta = 0.2 gamma = 0 # cv2.addWeighted \u5c06\u539f\u59cb\u56fe\u7247\u4e0e mask \u878d\u5408 img = cv2.addWeighted(img, alpha, zero_img, beta, gamma) except Exception as e: # print(str(e)) # logging.info(\"[lane detect ] NO detection\") pass return img def detect_img(img): start = time.time() #\u53d6\u56fe\u7070\u5ea6\u5316 grap = cv2.cvtColor(img,cv2.COLOR_RGB2GRAY) blur_grap = cv2.GaussianBlur(grap,(3,3),0) canny_image = canny_func(blur_grap,canny_lthreshold=150,canny_hthreshold=250) #\u56fe\u50cf\u50cf\u7d20\u884c\u6570 rows = canny_image.shape[0] 720\u884c #\u56fe\u50cf\u50cf\u7d20\u5217\u6570 cols = canny_image.shape[1] 1280\u5217 left_bottom = [0, canny_image.shape[0]] right_bottom = [canny_image.shape[1], canny_image.shape[0]] left_top = [canny_image.shape[1]/3,canny_image.shape[0]/1.5] right_top = [canny_image.shape[1]/3*2,canny_image.shape[0]/1.5] # apex = [canny_image.shape[1]/2, 290] # vertices = np.array([ left_bottom, right_bottom, apex ], np.int32) vertices = np.array([ left_top,right_top, right_bottom, left_bottom], np.int32) roi_image = roi_mask(canny_image, vertices) # roi_image = roi_mask(img, vertices) line_img = hough_func(roi_image,rho=1,theta=np.pi/180,threshold=15,min_line_lenght=40,max_line_gap=20) img = draw_lines(img,line_img) end = time.time() detect_fps = round(1.0/(end-start+0.00001),2) font = cv2.FONT_HERSHEY_SIMPLEX img = cv2.putText(img, 'Lane detect v1.0.0 | Xu Jing | FPS: {}'.format(detect_fps), (10, 40), font, 0.7, (0,255,0), 2) return img if __name__ == \"__main__\": img = cv2.imread(\"./static/test.jpg\") img = detect_img(img) cv2.imwrite(\"output.jpg\",img)","title":"1.\u8f66\u9053\u7ebf\u68c0\u6d4b\u7684OpenCV\u5b9e\u73b0"},{"location":"chapter4/#2index","text":"\u9996\u5148\u6211\u4eec\u521b\u5efaIndex\u9875\u9762\uff0c\u6784\u5efa\u4e00\u4e2a main.py \u6587\u4ef6\uff0c\u8be5py\u6587\u4ef6\u662fkivy\u5e94\u7528\u7a0b\u5e8f\u7684\u5165\u53e3\u51fd\u6570 import kivy from kivy.app import App from kivy.uix.floatlayout import FloatLayout from kivy.uix.boxlayout import BoxLayout from kivy.uix.label import Label from kivy.uix.button import Button from kivy.uix.filechooser import FileChooserIconView from kivy.properties import ObjectProperty from kivy.uix.popup import Popup from kivy.factory import Factory from kivy.uix.screenmanager import Screen, ScreenManager # from kivy.clock import Clock from kivy.graphics.texture import Texture from kivy.uix.camera import Camera from kivy.properties import BooleanProperty, NumericProperty import os import cv2 import numpy as np import logging from sample_lane_detection import * # import win32timezone # Index page class IndexPage(FloatLayout): ''' \u6b22\u8fce\u9875\u9762 ''' def __init__(self,**kwargs): super().__init__(**kwargs) @staticmethod def page_go(*args): App.get_running_app().screen_manager.current=\"Image_page\" App.get_running_app().screen_manager.transition.direction = 'left' class LaneDetectApp(App): def build(self): self.icon = \"./static/icon.ico\" self.title = \"\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4bApp\" self.load_kv(\"./index.kv\") # \u9700\u8981\u521b\u5efa\u4e00\u4e2aindex.kv self.screen_manager = ScreenManager() pages = {\"Index_page\":IndexPage()} for item,page in pages.items(): self.default_page = page # \u6dfb\u52a0\u9875\u9762 screen = Screen(name=item) screen.add_widget(self.default_page) # \u5411\u5c4f\u5e55\u7ba1\u7406\u5668\u6dfb\u52a0\u9875\u9762 self.screen_manager.add_widget(screen) return self.screen_manager if __name__ == \"__main__\": LaneDetectApp().run() \u6211\u4eec\u5c06UI\u63a7\u4ef6\u901a\u8fc7kvlang\u5b9e\u73b0\uff0c\u521b\u5efa index.kv \u6587\u4ef6 # xujing # index page #: import C kivy.utils.get_color_from_hex <IndexPage>: canvas.before: Color: rgba: [1,1,1,1] Rectangle: pos: self.pos size: self.size source: './static/index.jpg' Label: id: 'title_label' text: '[ref=\"click\"][b]\\u6b22\\u8fce\\u4f7f\\u7528\\u8f66\\u9053\\u7ebf\\u68c0\\u6d4b\\u0041\\u0070\\u0070[/b][/ref]' color: C('#FFFF00') font_name: './static/DroidSansFallback.ttf' font_size: 72 # 24 pos_hint: {\"center_x\":0.5,\"y\":0.2} markup: True on_ref_press: root.page_go() Label: text: '[b]v1.0.0[/b]' color: C('#FFFF00') font_name: './static/DroidSansFallback.ttf' font_size: 54 #18 pos_hint: {\"center_x\":0.5,\"y\":0.1} markup: True Label: text: '[b]\\u5f00\\u53d1\\u8005\\uff1a\\u0020\\u5f90\\u9759[/b]' color: C('#FFFF00') font_name: './static/DroidSansFallback.ttf' font_size: 54 #18 pos_hint: {\"center_x\":0.5,\"y\":0.05} markup: True","title":"2.\u9879\u76ee\u5c55\u793a\u53caIndex\u9875\u9762\u5f00\u53d1"},{"location":"chapter4/#3","text":"\u7ee7\u7eed\u5b8c\u5584\u8f66\u9053\u7ebf\u68c0\u6d4b\u4e2d\u57fa\u4e8e\u56fe\u50cf\u7684\u8f66\u9053\u7ebf\u68c0\u6d4b\u9875\u9762\u7684\u5f00\u53d1\uff0c\u5728\u539f\u6709\u7684index\u9875\u9762\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u9875\u9762 ''' xujing 2020-06-26 \u8f66\u9053\u7ebf\u52a0\u6d4b\u7684\u8de8\u5e73\u53f0GUI\u5b9e\u73b0(\u57fa\u4e8ekivy) \u652f\u6301Windows, Linux, MacOS, ios, Andriod\u6253\u5305 ''' import kivy from kivy.app import App from kivy.uix.floatlayout import FloatLayout from kivy.uix.boxlayout import BoxLayout from kivy.uix.label import Label from kivy.uix.button import Button from kivy.uix.filechooser import FileChooserIconView from kivy.properties import ObjectProperty from kivy.uix.popup import Popup from kivy.factory import Factory from kivy.uix.screenmanager import Screen, ScreenManager # from kivy.clock import Clock from kivy.graphics.texture import Texture from kivy.uix.camera import Camera from kivy.properties import BooleanProperty, NumericProperty import os import cv2 import numpy as np import logging from sample_lane_detection import * # import win32timezone def cv_imread(filePath): ''' opencv\u8bfb\u53d6\u5e26\u4e2d\u6587\u8def\u5f84\u7684\u56fe\u7247 ''' with open(filePath,mode=\"rb\") as f: img_buff = np.frombuffer(f.read(),dtype=np.uint8) cv_img = cv2.imdecode(img_buff,-1) #cv_img = cv2.imdecode(np.fromfile(filePath,dtype=np.uint8),-1) # Android error: stderr: OSError: could not seek in file return cv_img # Index page class IndexPage(FloatLayout): ''' \u6b22\u8fce\u9875\u9762 ''' def __init__(self,**kwargs): super().__init__(**kwargs) @staticmethod def page_go(*args): App.get_running_app().screen_manager.current=\"Image_page\" App.get_running_app().screen_manager.transition.direction = 'left' # Image page class LoadDialog(FloatLayout): ''' \u5f39\u7a97\u7684\u52a0\u8f7d\u548c\u53d6\u6d88\u5c5e\u6027\u5b9a\u4e49 ''' load = ObjectProperty(None) cancel = ObjectProperty(None) cwdir = ObjectProperty(None) Factory.register(\"LoadDialog\",cls=LoadDialog) class ImagePage(BoxLayout): ''' \u5355\u5e27\u56fe\u50cf\u7684\u8f66\u9053\u7ebf\u76d1\u6d4b ''' def __init__(self,**kwargs): super().__init__(**kwargs) @staticmethod def back_index(*args): App.get_running_app().screen_manager.current=\"Index_page\" App.get_running_app().screen_manager.transition.direction = 'right' def back_video(self,*args): App.get_running_app().screen_manager.current=\"Video_page\" App.get_running_app().screen_manager.transition.direction = 'left' def dismiss_popup(self): ''' \u5173\u95ed\u5f39\u7a97 ''' self._popup.dismiss() def show_load(self): # \u7ed1\u5b9a\u52a0\u8f7d\u548c\u53d6\u6d88\u7684\u65b9\u6cd5 content = LoadDialog(load=self._load,cancel=self.dismiss_popup,cwdir=os.getcwd()) # content = LoadDialog(load=self._load,cancel=self.dismiss_popup,cwdir=\"/storage/emulated/0/kivy\") self._popup = Popup(title=\"Load Image\",content=content,size_hint=(.9,.9)) # open self._popup.open() def _load(self,path,filename): print(path,filename) self.dismiss_popup() logging.info(\"path:{},filename:{}\".format(path,filename)) # img = cv2.imread(filename) img= cv_imread(filename) img = detect_img(img) img = cv2.cvtColor(img, cv2.COLOR_BGR2RGBA) img = cv2.flip(img, 0) # \u65cb\u8f6c img_buff = img.tostring() img_texture = Texture.create(size=(img.shape[1], img.shape[0]), colorfmt='rgba') img_texture.blit_buffer(img_buff, colorfmt='rgba', bufferfmt='ubyte') self.ids.img_det.texture = img_texture class LaneDetectApp(App): def build(self): self.icon = \"./static/icon.ico\" self.title = \"\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4bApp\" self.load_kv(\"./index.kv\") self.load_kv(\"./image.kv\") self.screen_manager = ScreenManager() pages = {\"Index_page\":IndexPage(),\"Image_page\":ImagePage(),} for item,page in pages.items(): self.default_page = page # \u6dfb\u52a0\u9875\u9762 screen = Screen(name=item) screen.add_widget(self.default_page) # \u5411\u5c4f\u5e55\u7ba1\u7406\u5668\u6dfb\u52a0\u9875\u9762 self.screen_manager.add_widget(screen) return self.screen_manager if __name__ == \"__main__\": LaneDetectApp().run() \u589e\u52a0 image.kv <ImagePage>: orientation: 'vertical' Image: id: img_det source: \"./static/example.jpg\" size_hint: (1.0,.9) size_height_y: None width: 100 allow_stretch: True BoxLayout: orientation: 'horizontal' size_hint: (1,.1) spacing: 25 padding: 10 Button: text: \"[b]\\u8fd4\\u56de\\u4e3b\\u9875[/b]\" font_name: './static/DroidSansFallback.ttf' markup: True on_press:root.back_index() Button: text: \"[b]\\u52a0\\u8f7d\\u56fe\\u50cf[/b]\" font_name: './static/DroidSansFallback.ttf' markup: True on_release: root.show_load() Button: text: \"[b]\\u63a5\\u5165\\u89c6\\u9891[/b]\" font_name: './static/DroidSansFallback.ttf' markup: True on_press:root.back_video() <LoadDialog>: BoxLayout: size: root.size pos: root.pos orientation: \"vertical\" FileChooserIconView: id: filechooser rootpath: root.cwdir filters: ['*.jpg',\"*.png\",\"*.bmp\",\"*.jpeg\"] on_selection: text_input.text = self.selection and self.selection[0] or '' TextInput: id: text_input size_hint_y: .1 multiline: False BoxLayout: size_hint_y: .1 spacing: 30 Button: text: \"[b]\\u52a0\\u8f7d[/b]\" on_release: root.load(filechooser.path,text_input.text) markup: True font_name: './static/DroidSansFallback.ttf' Button: text: \"[b]\\u53d6\\u6d88[/b]\" on_release: root.cancel() markup: True font_name: './static/DroidSansFallback.ttf'","title":"3.\u56fe\u50cf\u8f66\u9053\u7ebf\u68c0\u6d4b\u9875\u9762\u5f00\u53d1"},{"location":"chapter4/#4","text":"\u7ee7\u7eed\u589e\u52a0\u5bf9\u4e8e\u624b\u673a\u6444\u50cf\u5934\u7684\u652f\u6301 ''' xujing 2020-06-26 \u8f66\u9053\u7ebf\u52a0\u6d4b\u7684\u8de8\u5e73\u53f0GUI\u5b9e\u73b0(\u57fa\u4e8ekivy) \u652f\u6301Windows, Linux, MacOS, ios, Andriod\u6253\u5305 ''' import kivy from kivy.app import App from kivy.uix.floatlayout import FloatLayout from kivy.uix.boxlayout import BoxLayout from kivy.uix.label import Label from kivy.uix.button import Button from kivy.uix.filechooser import FileChooserIconView from kivy.properties import ObjectProperty from kivy.uix.popup import Popup from kivy.factory import Factory from kivy.uix.screenmanager import Screen, ScreenManager # from kivy.clock import Clock from kivy.graphics.texture import Texture from kivy.uix.camera import Camera from kivy.properties import BooleanProperty, NumericProperty import os import cv2 import numpy as np import logging from sample_lane_detection import * # import win32timezone def cv_imread(filePath): ''' opencv\u8bfb\u53d6\u5e26\u4e2d\u6587\u8def\u5f84\u7684\u56fe\u7247 ''' with open(filePath,mode=\"rb\") as f: img_buff = np.frombuffer(f.read(),dtype=np.uint8) cv_img = cv2.imdecode(img_buff,-1) #cv_img = cv2.imdecode(np.fromfile(filePath,dtype=np.uint8),-1) # Android error: stderr: OSError: could not seek in file return cv_img # Index page class IndexPage(FloatLayout): ''' \u6b22\u8fce\u9875\u9762 ''' def __init__(self,**kwargs): super().__init__(**kwargs) @staticmethod def page_go(*args): App.get_running_app().screen_manager.current=\"Image_page\" App.get_running_app().screen_manager.transition.direction = 'left' # Image page class LoadDialog(FloatLayout): ''' \u5f39\u7a97\u7684\u52a0\u8f7d\u548c\u53d6\u6d88\u5c5e\u6027\u5b9a\u4e49 ''' load = ObjectProperty(None) cancel = ObjectProperty(None) cwdir = ObjectProperty(None) Factory.register(\"LoadDialog\",cls=LoadDialog) class ImagePage(BoxLayout): ''' \u5355\u5e27\u56fe\u50cf\u7684\u8f66\u9053\u7ebf\u76d1\u6d4b ''' def __init__(self,**kwargs): super().__init__(**kwargs) @staticmethod def back_index(*args): App.get_running_app().screen_manager.current=\"Index_page\" App.get_running_app().screen_manager.transition.direction = 'right' def back_video(self,*args): App.get_running_app().screen_manager.current=\"Video_page\" App.get_running_app().screen_manager.transition.direction = 'left' def dismiss_popup(self): ''' \u5173\u95ed\u5f39\u7a97 ''' self._popup.dismiss() def show_load(self): # \u7ed1\u5b9a\u52a0\u8f7d\u548c\u53d6\u6d88\u7684\u65b9\u6cd5 #content = LoadDialog(load=self._load,cancel=self.dismiss_popup,cwdir=os.getcwd()) content = LoadDialog(load=self._load,cancel=self.dismiss_popup,cwdir=\"/storage/emulated/0/kivy\") self._popup = Popup(title=\"Load Image\",content=content,size_hint=(.9,.9)) # open self._popup.open() def _load(self,path,filename): print(path,filename) self.dismiss_popup() logging.info(\"path:{},filename:{}\".format(path,filename)) # img = cv2.imread(filename) img= cv_imread(filename) img = detect_img(img) img = cv2.cvtColor(img, cv2.COLOR_BGR2RGBA) img = cv2.flip(img, 0) # \u65cb\u8f6c img_buff = img.tostring() img_texture = Texture.create(size=(img.shape[1], img.shape[0]), colorfmt='rgba') img_texture.blit_buffer(img_buff, colorfmt='rgba', bufferfmt='ubyte') self.ids.img_det.texture = img_texture # video page class CameraWidget(Camera): ''' \u591a\u8def\u89c6\u9891\u7684\u8f66\u9053\u7ebf\u76d1\u6d4b ''' detectFaces = BooleanProperty(False) angle = NumericProperty(0) def __init__(self, **kwargs): super().__init__(**kwargs) self.isAndroid = kivy.platform == \"android\" #if self.isAndroid: # self.angle = -90 def on_tex(self, *l): image = np.frombuffer(self.texture.pixels, dtype='uint8') image = image.reshape(self.texture.height, self.texture.width, -1) #logging.info(\"height:{},width:{}\".format(self.texture.height,self.texture.width)) image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR) #if self.angle == 90: # image = cv2.rotate(image, cv2.ROTATE_90_COUNTERCLOCKWISE) #if self.angle == -90: #image = cv2.rotate(image, cv2.ROTATE_90_CLOCKWISE) image = cv2.rotate(image, cv2.ROTATE_90_CLOCKWISE) # \u8f66\u9053\u7ebf\u68c0\u6d4b\u5f00\u59cb image = detect_img(image) image = cv2.resize(image,(640,480)) image = cv2.flip(image, 0) # \u65cb\u8f6c image = cv2.cvtColor(image, cv2.COLOR_BGR2RGBA) numpy_data = image.tostring() #self.texture = Texture.create(size=(image.shape[1], image.shape[0]), colorfmt='rgba', bufferfmt='ubyte') self.texture.blit_buffer(numpy_data, bufferfmt=\"ubyte\", colorfmt='rgba') super().on_tex(self.texture) class VideoPage(BoxLayout): def __init__(self,**kwargs): super().__init__(**kwargs) @staticmethod def back_image(*args): App.get_running_app().screen_manager.current=\"Image_page\" App.get_running_app().screen_manager.transition.direction = 'right' @staticmethod def back_index_1(*args): App.get_running_app().screen_manager.current=\"Index_page\" App.get_running_app().screen_manager.transition.direction = 'left' class LaneDetectApp(App): def build(self): self.icon = \"./static/icon.ico\" self.title = \"\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4bApp\" self.load_kv(\"./index.kv\") self.load_kv(\"./image.kv\") self.load_kv(\"./video.kv\") self.screen_manager = ScreenManager() pages = {\"Index_page\":IndexPage(),\"Image_page\":ImagePage(),\"Video_page\":VideoPage()} for item,page in pages.items(): self.default_page = page # \u6dfb\u52a0\u9875\u9762 screen = Screen(name=item) screen.add_widget(self.default_page) # \u5411\u5c4f\u5e55\u7ba1\u7406\u5668\u6dfb\u52a0\u9875\u9762 self.screen_manager.add_widget(screen) return self.screen_manager if __name__ == \"__main__\": LaneDetectApp().run() \u589e\u52a0 video.kv <CameraWidget> resolution: (640,480) play: True keep_ratio: True allow_stretch: True canvas.before: PushMatrix Rotate: angle: root.angle axis: 0, 0, 1 origin: root.center canvas.after: PopMatrix orientation: 'vertical' <VideoPage>: orientation: 'vertical' CameraWidget: id: camera BoxLayout: orientation: 'horizontal' size_hint: (1,.1) spacing: 25 padding: 10 Button: text: \"[b]\\u52a0\\u8f7d\\u56fe\\u50cf\" font_name: './static/DroidSansFallback.ttf' markup: True on_press:root.back_image() Button: text: \"[b]\\u8fd4\\u56de\\u4e3b\\u9875[/b]\" font_name: './static/DroidSansFallback.ttf' markup: True on_release: root.back_index_1()","title":"4.\u624b\u673a\u6444\u50cf\u5934\u89c6\u9891\u6d41\u8f66\u9053\u68c0\u6d4b\u5f00\u53d1"},{"location":"chapter4/#5","text":"\u5173\u4e8e\u8be5\u9879\u76ee\u5728windows\u5e73\u53f0\u4e0b\u7684\u6253\u5305\uff0c\u53ef\u4ee5\u53c2\u8003\u672c\u8bfe\u7a0b\u7684\u7b2c6\u7ae0\u548c\u7b2c7\u7ae0\uff0c\u6211\u4eec\u5c06\u4f7f\u7528pyinstaller\u548csetupfactory\u5bf9kivy\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884cPC\u7aef\u7684\u5e94\u7528\u7a0b\u5e8f\u6253\u5305\u3002 \u672c\u6b21\u8bfe\u4ec5\u5c55\u793a\u6253\u5305\u540e\u7684\u4e00\u4e9b\u6548\u679c\u3002 windows\u4e0b\u7684\u5e94\u7528\uff1a \u5173\u4e8e\u8be5\u9879\u76ee\u7684Android\u6253\u5305\uff0c\u53ef\u4ee5\u53c2\u8003\u672c\u8bfe\u7a0b\u7684\u7b2c9\u7ae0\uff0c\u672c\u6b21\u8bfe\u4ec5\u5c55\u793a\u5728\u5b89\u5353\u4e0a\u7684\u6253\u5305\u8fd0\u884c\u6548\u679c\u3002 android\u4e0b\u7684\u5e94\u7528","title":"5.\u9879\u76ee\u603b\u7ed3"},{"location":"chapter5/","text":"\u7b2c\u4e94\u7ae0 \u57fa\u4e8e\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\u7684\u4e00\u952e\u73b0\u5b9e\u8f6c\u6362\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fb\u9879\u76ee(\u57fa\u4e8eKivymd) 1.CartoonGAN\u7684Falsk\u90e8\u7f72\u4e0e\u6d4b\u8bd5 \u4e3a\u4e86\u540e\u671f\u5b89\u5353\u6253\u5305\u7684\u65b9\u4fbf\uff0c\u6211\u4eec\u5c06CartoonGAN\u7f51\u7edc\u901a\u8fc7WebAPI\u7684\u65b9\u5f0f\u90e8\u7f72\uff0c\u8fd9\u91cc\u6211\u4eec\u91c7\u7528Flask\u53bb\u90e8\u7f72\u6211\u4eec\u7684CartoonGAN,\u521b\u5efa flask_app.py \u5176\u4ee3\u7801\u5982\u4e0b\uff1a # encoding: utf-8 ''' dataxujing 2020-07-04 \u57fa\u4e8eCartoonGAN\u7684\u73b0\u5b9e\u8fc1\u79fb\u4e8c\u6b21\u5143\u52a8\u753b\u98ce\u683c\u7684\u98ce\u683c\u8fc1\u79fb\u670d\u52a1 \u57fa\u4e8eFlask,Pytorch ''' import os from io import BytesIO import numpy as np import time import cv2 from PIL import Image import base64 import json import flask from flask import request, Flask import torch import torchvision.transforms as transforms from torch.autograd import Variable import torchvision.utils as vutils from network.Transformer import Transformer app = Flask(__name__) # load pretrained model model = Transformer() model_dict = {} # [\u5bab\u5d0e\u9a8f, \u7ec6\u7530\u5b88, \u76d7\u68a6\u4fa6\u63a2\uff08\u65e5\u672c\u52a8\u753b\u540d\uff09, \u65b0\u6d77\u8bda] for model_name in [\"Hayao\",\"Hosoda\",\"Paprika\",\"Shinkai\"]: # globals()['model_'+model_name] = Transformer().load_state_dict(torch.load(os.path.join(\"./static/model\", model_name + '_net_G_float.pth'))).eval() globals()['model_'+model_name] = Transformer() globals()['model_'+model_name].load_state_dict(torch.load(os.path.join(\"./static/model\", model_name + '_net_G_float.pth'))) # \u6d4b\u8bd5\u63a5\u53e3 @app.route(\"/test/<name>\",methods=[\"GET\",\"POST\"]) def test(name): return \"Test Get: {}\".format(name) # model_name example: model_Hayao @app.route(\"/predict/<model_name>\", methods=[\"GET\",\"POST\"]) def transfor_cartoon(model_name): try: #\u89e3\u6790\u56fe\u7247\u6570\u636e image_b64 = base64.b64decode(str(request.form['image'])) image_data = np.fromstring(image_b64, np.uint8) # image_data = cv2.imdecode(image_data, cv2.IMREAD_COLOR) # cv2.imwrite('/root/01.png', image_data) input_image = Image.open(BytesIO(image_data)).convert('RGB') # \u5f00\u59cb\u8bc6\u522b model = globals()[model_name].eval() device = torch.device('cuda' if torch.cuda.is_available() else 'cpu') # \u56fe\u50cf\u5904\u7406 h = input_image.size[0] w = input_image.size[1] ratio = h *1.0 / w # \u5c06\u957f\u8fb9\u7f29\u5c0f\u5230450 if ratio > 1: h = 450 w = int(h*1.0/ratio) else: w = 450 h = int(w * ratio) input_image = input_image.resize((h, w), Image.BICUBIC) input_image = np.asarray(input_image) # RGB -> BGR input_image = input_image[:, :, [2, 1, 0]] input_image = transforms.ToTensor()(input_image).unsqueeze(0) # preprocess, (-1, 1) input_image = -1 + 2 * input_image if torch.cuda.is_available(): model.cuda() input_image = Variable(input_image).cuda() else: model.float() input_image = Variable(input_image).float() # forward output_image = model(input_image) output_image = output_image[0] # BGR -> RGB output_image = output_image[[2, 1, 0], :, :] # deprocess, (0, 1) output_image = output_image.data.cpu().float() * 0.5 + 0.5 # save # vutils.save_image(output_image, os.path.join(opt.output_dir, files[:-4] + '_' + opt.style + '.jpg')) # \u53bb\u6389batch size\u7ef4\u5ea6 output_image = output_image.squeeze() # \u4ece[0,1]\u8f6c\u5316\u4e3a[0,255]\uff0c\u518d\u4eceCHW\u8f6c\u4e3aHWC\uff0c\u6700\u540e\u8f6c\u4e3acv2 output_image = output_image.mul_(255).add_(0.5).clamp_(0, 255).permute(1, 2, 0).type(torch.uint8).numpy() # RGB\u8f6cBRG output_image_cv2 = cv2.cvtColor(output_image, cv2.COLOR_RGB2BGR) # opencv \u8f6c base64 image = cv2.imencode('.jpg', output_image_cv2)[1] base64_data = str(base64.b64encode(image))[2:-1] res = {\"pred\":base64_data,\"code\":\"200\"} except Exception as e: print(str(e)) res = {'pred': \"we loss\", 'code': \"404\"} return json.dumps(res) if __name__ == \"__main__\": app.run(debug=True,host=\"0.0.0.0\",port=8080) \u6d4b\u8bd5\u6211\u4eec\u7684Flask WebAPI,\u521b\u5efa client_test.py ''' dataxujing 2020-07-04 \u8bf7\u6c42Flask CartoonGAN\u670d\u52a1\u7684\u6d4b\u8bd5\u4ee3\u7801 \u7528\u6765\u9a8c\u8bc1Web\u670d\u52a1\u7684\u6b63\u5e38 ''' import requests import base64 import json from PIL import Image import cv2 import numpy as np #\u5c06\u56fe\u7247\u6570\u636e\u8f6c\u6210base64\u683c\u5f0f with open('./static/test_image/test.jpg', 'rb') as f: img = base64.b64encode(f.read()).decode() image = [] image.append(img) res = {\"image\":image} #\u8bbf\u95ee\u670d\u52a1 # model: \"model_Hayao\"(\u5bab\u5d0e\u9a8f),\"model_Hosoda\",\"model_Paprika\",\"model_Shinkai\" url = \"http://10.10.15.106:8080/predict/model_Hayao\" headers = {'user-agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36'} res_back = requests.post(url,data=res,headers=headers, timeout=200) # save cartoon image state = json.loads(res_back.text).get('code') if state == \"404\": print(\"we loss\") else: img_bs64 = json.loads(res_back.text).get('pred') imgString = base64.b64decode(img_bs64.encode(\"ascii\")) nparr = np.fromstring(imgString,np.uint8) image = cv2.imdecode(nparr,cv2.IMREAD_COLOR) cv2.imwrite(\"test_res.jpg\",image) \u6d4b\u8bd5\u7ed3\u679c\u5982\u4e0b\u56fe\uff1a \u539f\u56fe\uff1a \u98ce\u683c\u8f6c\u5316\u540e\u7684Cartoon: 2.kivymd\u5b9a\u4e49\u4e3b\u754c\u9762 3.Home\u754c\u9762\u7684\u5b9e\u73b0 4.UPLOADIMAGE\u529f\u80fd\u7684\u5b9e\u73b0 5.DOWNLOAD\u529f\u80fd\u7684\u5b9e\u73b0 6.\u9879\u76ee\u603b\u7ed3","title":"\u7b2c\u4e94\u7ae0 \u57fa\u4e8e\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\u7684\u4e00\u952e\u73b0\u5b9e\u8f6c\u6362\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fb\u9879\u76ee(\u57fa\u4e8eKivymd)"},{"location":"chapter5/#gankivymd","text":"","title":"\u7b2c\u4e94\u7ae0 \u57fa\u4e8e\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\u7684\u4e00\u952e\u73b0\u5b9e\u8f6c\u6362\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fb\u9879\u76ee(\u57fa\u4e8eKivymd)"},{"location":"chapter5/#1cartoonganfalsk","text":"\u4e3a\u4e86\u540e\u671f\u5b89\u5353\u6253\u5305\u7684\u65b9\u4fbf\uff0c\u6211\u4eec\u5c06CartoonGAN\u7f51\u7edc\u901a\u8fc7WebAPI\u7684\u65b9\u5f0f\u90e8\u7f72\uff0c\u8fd9\u91cc\u6211\u4eec\u91c7\u7528Flask\u53bb\u90e8\u7f72\u6211\u4eec\u7684CartoonGAN,\u521b\u5efa flask_app.py \u5176\u4ee3\u7801\u5982\u4e0b\uff1a # encoding: utf-8 ''' dataxujing 2020-07-04 \u57fa\u4e8eCartoonGAN\u7684\u73b0\u5b9e\u8fc1\u79fb\u4e8c\u6b21\u5143\u52a8\u753b\u98ce\u683c\u7684\u98ce\u683c\u8fc1\u79fb\u670d\u52a1 \u57fa\u4e8eFlask,Pytorch ''' import os from io import BytesIO import numpy as np import time import cv2 from PIL import Image import base64 import json import flask from flask import request, Flask import torch import torchvision.transforms as transforms from torch.autograd import Variable import torchvision.utils as vutils from network.Transformer import Transformer app = Flask(__name__) # load pretrained model model = Transformer() model_dict = {} # [\u5bab\u5d0e\u9a8f, \u7ec6\u7530\u5b88, \u76d7\u68a6\u4fa6\u63a2\uff08\u65e5\u672c\u52a8\u753b\u540d\uff09, \u65b0\u6d77\u8bda] for model_name in [\"Hayao\",\"Hosoda\",\"Paprika\",\"Shinkai\"]: # globals()['model_'+model_name] = Transformer().load_state_dict(torch.load(os.path.join(\"./static/model\", model_name + '_net_G_float.pth'))).eval() globals()['model_'+model_name] = Transformer() globals()['model_'+model_name].load_state_dict(torch.load(os.path.join(\"./static/model\", model_name + '_net_G_float.pth'))) # \u6d4b\u8bd5\u63a5\u53e3 @app.route(\"/test/<name>\",methods=[\"GET\",\"POST\"]) def test(name): return \"Test Get: {}\".format(name) # model_name example: model_Hayao @app.route(\"/predict/<model_name>\", methods=[\"GET\",\"POST\"]) def transfor_cartoon(model_name): try: #\u89e3\u6790\u56fe\u7247\u6570\u636e image_b64 = base64.b64decode(str(request.form['image'])) image_data = np.fromstring(image_b64, np.uint8) # image_data = cv2.imdecode(image_data, cv2.IMREAD_COLOR) # cv2.imwrite('/root/01.png', image_data) input_image = Image.open(BytesIO(image_data)).convert('RGB') # \u5f00\u59cb\u8bc6\u522b model = globals()[model_name].eval() device = torch.device('cuda' if torch.cuda.is_available() else 'cpu') # \u56fe\u50cf\u5904\u7406 h = input_image.size[0] w = input_image.size[1] ratio = h *1.0 / w # \u5c06\u957f\u8fb9\u7f29\u5c0f\u5230450 if ratio > 1: h = 450 w = int(h*1.0/ratio) else: w = 450 h = int(w * ratio) input_image = input_image.resize((h, w), Image.BICUBIC) input_image = np.asarray(input_image) # RGB -> BGR input_image = input_image[:, :, [2, 1, 0]] input_image = transforms.ToTensor()(input_image).unsqueeze(0) # preprocess, (-1, 1) input_image = -1 + 2 * input_image if torch.cuda.is_available(): model.cuda() input_image = Variable(input_image).cuda() else: model.float() input_image = Variable(input_image).float() # forward output_image = model(input_image) output_image = output_image[0] # BGR -> RGB output_image = output_image[[2, 1, 0], :, :] # deprocess, (0, 1) output_image = output_image.data.cpu().float() * 0.5 + 0.5 # save # vutils.save_image(output_image, os.path.join(opt.output_dir, files[:-4] + '_' + opt.style + '.jpg')) # \u53bb\u6389batch size\u7ef4\u5ea6 output_image = output_image.squeeze() # \u4ece[0,1]\u8f6c\u5316\u4e3a[0,255]\uff0c\u518d\u4eceCHW\u8f6c\u4e3aHWC\uff0c\u6700\u540e\u8f6c\u4e3acv2 output_image = output_image.mul_(255).add_(0.5).clamp_(0, 255).permute(1, 2, 0).type(torch.uint8).numpy() # RGB\u8f6cBRG output_image_cv2 = cv2.cvtColor(output_image, cv2.COLOR_RGB2BGR) # opencv \u8f6c base64 image = cv2.imencode('.jpg', output_image_cv2)[1] base64_data = str(base64.b64encode(image))[2:-1] res = {\"pred\":base64_data,\"code\":\"200\"} except Exception as e: print(str(e)) res = {'pred': \"we loss\", 'code': \"404\"} return json.dumps(res) if __name__ == \"__main__\": app.run(debug=True,host=\"0.0.0.0\",port=8080) \u6d4b\u8bd5\u6211\u4eec\u7684Flask WebAPI,\u521b\u5efa client_test.py ''' dataxujing 2020-07-04 \u8bf7\u6c42Flask CartoonGAN\u670d\u52a1\u7684\u6d4b\u8bd5\u4ee3\u7801 \u7528\u6765\u9a8c\u8bc1Web\u670d\u52a1\u7684\u6b63\u5e38 ''' import requests import base64 import json from PIL import Image import cv2 import numpy as np #\u5c06\u56fe\u7247\u6570\u636e\u8f6c\u6210base64\u683c\u5f0f with open('./static/test_image/test.jpg', 'rb') as f: img = base64.b64encode(f.read()).decode() image = [] image.append(img) res = {\"image\":image} #\u8bbf\u95ee\u670d\u52a1 # model: \"model_Hayao\"(\u5bab\u5d0e\u9a8f),\"model_Hosoda\",\"model_Paprika\",\"model_Shinkai\" url = \"http://10.10.15.106:8080/predict/model_Hayao\" headers = {'user-agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36'} res_back = requests.post(url,data=res,headers=headers, timeout=200) # save cartoon image state = json.loads(res_back.text).get('code') if state == \"404\": print(\"we loss\") else: img_bs64 = json.loads(res_back.text).get('pred') imgString = base64.b64decode(img_bs64.encode(\"ascii\")) nparr = np.fromstring(imgString,np.uint8) image = cv2.imdecode(nparr,cv2.IMREAD_COLOR) cv2.imwrite(\"test_res.jpg\",image) \u6d4b\u8bd5\u7ed3\u679c\u5982\u4e0b\u56fe\uff1a \u539f\u56fe\uff1a \u98ce\u683c\u8f6c\u5316\u540e\u7684Cartoon:","title":"1.CartoonGAN\u7684Falsk\u90e8\u7f72\u4e0e\u6d4b\u8bd5"},{"location":"chapter5/#2kivymd","text":"","title":"2.kivymd\u5b9a\u4e49\u4e3b\u754c\u9762"},{"location":"chapter5/#3home","text":"","title":"3.Home\u754c\u9762\u7684\u5b9e\u73b0"},{"location":"chapter5/#4uploadimage","text":"","title":"4.UPLOADIMAGE\u529f\u80fd\u7684\u5b9e\u73b0"},{"location":"chapter5/#5download","text":"","title":"5.DOWNLOAD\u529f\u80fd\u7684\u5b9e\u73b0"},{"location":"chapter5/#6","text":"","title":"6.\u9879\u76ee\u603b\u7ed3"},{"location":"chapter6/","text":"\u7b2c\u516d\u7ae0 pyinstaller\u6253\u5305Windows\u684c\u9762\u5e94\u7528\u7a0b\u5e8f \u4ee5\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b\u9879\u76eeWindows\u6253\u5305\u4e3a\u4f8b \u6211\u4eec\u4f7f\u7528pyinstaller\u5728windows\u4e0b\u6253\u5305\u5f00\u53d1\u7684kivy\u5e94\u7528\u7a0b\u5e8f\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u7684\u6253\u5305\u65b9\u5f0f\u6bd4\u5982\uff1aNuitka,\u5982\u679c\u4f60\u6ca1\u6709\u5b89\u88c5pyinstaller,\u53ef\u4ee5\u901a\u8fc7pip\u8fdb\u884c\u5b89\u88c5\u3002 pip install pyinstaller -i https://pypi.tuna.tsinghua.edu.cn/simple \u8fd9\u91cc\u8981\u8bf4\u660e\u7684\u662f\uff0cpython\u7684\u53ef\u6267\u884c\u6587\u4ef6\u6253\u5305\u4f1a\u5c06\u6574\u4e2apython\u73af\u5883\u53ca\u6240\u6709\u7684\u4f9d\u8d56\u8fdb\u884c\u6253\u5305\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u6253\u5305\u7684\u7a0b\u5e8f\u5360\u7528\u7684\u7a7a\u95f4\u8f83\u5927\uff0c\u5e76\u4e14\u6253\u5305\u540e\u7684\u7a0b\u5e8f\u7684\u5f00\u542f\u901f\u5ea6\u4e0d\u5982C++\u7b49\u7a0b\u5e8f\u7684\u5f00\u542f\u901f\u5ea6\u5feb\uff0c\u8fd9\u91cc\u7b14\u8005\u5f3a\u70c8\u63a8\u8350\u8bfb\u8005\u4f7f\u7528Nuitka\u8fdb\u884c\u6253\u5305\uff0c\u5176\u7a0b\u5e8f\u7684\u5f00\u542f\u901f\u5ea6\u8981\u6bd4pyinstaller\u7684\u5f00\u542f\u901f\u5ea6\u5feb\u3002 \u6211\u4eec\u4ee5\u7b2c4\u7ae0\u4e2d\u7684\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b\u9879\u76ee\u4e3a\u4f8b\uff0c\u4ecb\u7ecdpyinstaller\u5982\u4f55\u6253\u5305kivy\u5e94\u7528\u7a0b\u5e8f\u3002 \u9996\u5148\u6211\u4eec\u901a\u8fc7\u547d\u4ee4\u884c\u751f\u6210\u6253\u5305\u7684spec\u914d\u7f6e\u6587\u4ef6,cd\u5230\u9879\u76ee\u7684\u540c\u7ea7\u76ee\u5f55\u5e76\u6267\u884c pyinstaller -F -w --icon=static/icon.ico main.py #pyinstaller\u7684\u7528\u6cd5\uff0c\u5728\u4f60\u60f3\u653e\u7f6e\u5e94\u7528\u7684\u6587\u4ef6\u5939\u4e0b\u6253\u5f00cmd\uff0c #pyinstaller + \u53c2\u6570 +\u6587\u4ef6\u5165\u53e3\u6216\u6253\u5305\u5b9a\u4e49\u6587\u6863\u3002 #-F\uff1a\u751f\u6210\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u91cc\u9762\u662f\u591a\u6587\u4ef6\u6a21\u5f0f\uff0c\u542f\u52a8\u5feb\u3002 #-D\uff1a\u4ec5\u4ec5\u751f\u6210\u4e00\u4e2a\u6587\u4ef6\uff0c\u4e0d\u66b4\u9732\u5176\u4ed6\u4fe1\u606f\uff0c\u542f\u52a8\u8f83\u6162\u3002 #-w\uff1a\u7a97\u53e3\u6a21\u5f0f\u6253\u5305\uff0c\u4e0d\u663e\u793a\u63a7\u5236\u53f0\u3002 #--icon\uff1a\u8ddf\u56fe\u6807\u8def\u5f84\uff0c\u4f5c\u4e3a\u5e94\u7528icon\u3002 #--hidden-import \u5e94\u7528\u9700\u8981\u7684\u5305\uff0c\u4f46\u662f\u6ca1\u6709\u88ab\u6253\u5305\u8fdb\u6765\uff0c\u8fd9\u91cc\u7684\u9519\u8bef\u662f\u6700\u591a\u7684\uff0c\u56e0\u4e3a\u4e00\u822c\u662f\u7b2c\u4e09\u65b9\u5305\u9690\u5f0f\u8c03\u7528\u5176\u4ed6\u5305\uff0c\u7136\u540e\u6253\u5305\u51fa\u6765\u7684\u7a0b\u5e8f\u663e\u793aFate Error\u4e0d\u80fd\u8fd0\u884c\u3002 # \u5173\u4e8epyinstaller\u66f4\u591a\u7684\u53c2\u6570\u53ef\u53c2\u8003\u5b98\u65b9\u6587\u6863 \u8fd9\u6837\u5728\u9879\u76ee\u7684\u540c\u7ea7\u76ee\u5f55\u4e0b\u4f1a\u751f\u6210\u4ee5\u5165\u53e3\u51fd\u6570 main.spec \u547d\u540d\u7684spec\u6253\u5305\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u6211\u4eec\u4fee\u6539\u8be5\u914d\u7f6e\u6587\u4ef6\u5982\u4e0b: # -*- mode: python ; coding: utf-8 -*- from kivy_deps import sdl2,glew # \u5bfc\u5165kivy_deps block_cipher = None a = Analysis(['main.py'], pathex=['C:\\\\Users\\\\xujing.LAPTOP-LLR84L1D\\\\Desktop\\\\\u8f66\u9053\u7ebf\u68c0\u6d4b\\\\kivy'], binaries=[], datas=[], hiddenimports=[], hookspath=[], runtime_hooks=[], excludes=[], win_no_prefer_redirects=False, win_private_assemblies=False, cipher=block_cipher, noarchive=False) pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher) exe = EXE(pyz, a.scripts, [], exclude_binaries=True, name='main', debug=False, bootloader_ignore_signals=False, strip=False, upx=True, console=False , icon='static\\\\icon.ico') # \u4fee\u6539\u662f\u5426\u5f00\u542f\u547d\u4ee4\u884c\u548cicon coll = COLLECT(exe, a.binaries, a.zipfiles, a.datas, *[Tree(p) for p in (sdl2.dep_bins+glew.dep_bins)], # exe\u5305\u542b\u7684\u4e00\u4e9b\u5e93\u6253\u5305\u8fdb\u6765 strip=False, upx=True, upx_exclude=[], name='main') # \u6253\u5305\u7684exe\u7684\u540d\u79f0 \u4fee\u6539\u597dspec\u6587\u4ef6\u540e\uff0c\u6211\u4eec\u4f7f\u7528spec\u6587\u4ef6\u8fdb\u884c\u6253\u5305\uff0c\u547d\u4ee4\u5982\u4e0b\uff1a pyinstaller main.spec \u6253\u5305\u8fc7\u7a0b\u5f88\u5feb\u4f1a\u5b8c\u6210\uff0c\u4f1a\u5728\u9879\u76ee\u7684\u540c\u7ea7\u76ee\u5f55\u4e0b\u751f\u6210build\u6587\u4ef6\u5939\u548cdist\u6587\u4ef6\u5939\uff0cbuild\u6587\u4ef6\u5939\u5b58\u653e\u4e86\u6253\u5305\u7684\u4e34\u65f6\u6587\u4ef6\uff0c\u6253\u5305\u5b8c\u6210\u540e\u53ef\u4ee5\u5220\u9664\uff0cdist\u6587\u4ef6\u5939\u5b58\u653e\u4e86\u6253\u5305\u540e\u7684\u53ef\u6267\u884c\u6587\u4ef6\u53ca\u5176\u4f9d\u8d56\uff0c\u6211\u4eec\u5c06\u6253\u5305\u8fc7\u7a0b\u4e2d\u9700\u8981\u7684\u9759\u6001\u6587\u4ef6\u548c\u8d44\u6e90\u6587\u4ef6\u62f7\u8d1d\u5230dist\u6587\u4ef6\u5939\u3002\u6b64\u65f6\u7684\u547d\u4ee4\u884c\u63d0\u793a\u5982\u4e0b\uff0c\u8bf4\u660e\u6253\u5305\u6210\u529f\uff1a 123947 INFO: Appending archive to EXE C:\\Users\\xujing.LAPTOP-LLR84L1D\\Desktop\\\u65b0\u5efa\u6587\u4ef6\u5939 (2)\\\u8f66\u9053\u7ebf\u68c0\u6d4b1.0\\kivy\\build\\main\\main.exe 123963 INFO: Building EXE from EXE-00.toc completed successfully. 123963 INFO: checking Tree 123963 INFO: Building Tree because Tree-02.toc is non existent 123963 INFO: Building Tree Tree-02.toc 123978 INFO: checking Tree 123978 INFO: Building Tree because Tree-03.toc is non existent 123978 INFO: Building Tree Tree-03.toc 123978 INFO: checking COLLECT 123978 INFO: Building COLLECT because COLLECT-00.toc is non existent 123978 INFO: Building COLLECT COLLECT-00.toc 174714 INFO: Building COLLECT COLLECT-00.toc completed successfully.","title":"\u7b2c\u516d\u7ae0 pyinstaller\u6253\u5305Windows\u684c\u9762\u5e94\u7528\u7a0b\u5e8f"},{"location":"chapter6/#pyinstallerwindows","text":"","title":"\u7b2c\u516d\u7ae0 pyinstaller\u6253\u5305Windows\u684c\u9762\u5e94\u7528\u7a0b\u5e8f"},{"location":"chapter6/#windows","text":"\u6211\u4eec\u4f7f\u7528pyinstaller\u5728windows\u4e0b\u6253\u5305\u5f00\u53d1\u7684kivy\u5e94\u7528\u7a0b\u5e8f\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u7684\u6253\u5305\u65b9\u5f0f\u6bd4\u5982\uff1aNuitka,\u5982\u679c\u4f60\u6ca1\u6709\u5b89\u88c5pyinstaller,\u53ef\u4ee5\u901a\u8fc7pip\u8fdb\u884c\u5b89\u88c5\u3002 pip install pyinstaller -i https://pypi.tuna.tsinghua.edu.cn/simple \u8fd9\u91cc\u8981\u8bf4\u660e\u7684\u662f\uff0cpython\u7684\u53ef\u6267\u884c\u6587\u4ef6\u6253\u5305\u4f1a\u5c06\u6574\u4e2apython\u73af\u5883\u53ca\u6240\u6709\u7684\u4f9d\u8d56\u8fdb\u884c\u6253\u5305\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u6253\u5305\u7684\u7a0b\u5e8f\u5360\u7528\u7684\u7a7a\u95f4\u8f83\u5927\uff0c\u5e76\u4e14\u6253\u5305\u540e\u7684\u7a0b\u5e8f\u7684\u5f00\u542f\u901f\u5ea6\u4e0d\u5982C++\u7b49\u7a0b\u5e8f\u7684\u5f00\u542f\u901f\u5ea6\u5feb\uff0c\u8fd9\u91cc\u7b14\u8005\u5f3a\u70c8\u63a8\u8350\u8bfb\u8005\u4f7f\u7528Nuitka\u8fdb\u884c\u6253\u5305\uff0c\u5176\u7a0b\u5e8f\u7684\u5f00\u542f\u901f\u5ea6\u8981\u6bd4pyinstaller\u7684\u5f00\u542f\u901f\u5ea6\u5feb\u3002 \u6211\u4eec\u4ee5\u7b2c4\u7ae0\u4e2d\u7684\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b\u9879\u76ee\u4e3a\u4f8b\uff0c\u4ecb\u7ecdpyinstaller\u5982\u4f55\u6253\u5305kivy\u5e94\u7528\u7a0b\u5e8f\u3002 \u9996\u5148\u6211\u4eec\u901a\u8fc7\u547d\u4ee4\u884c\u751f\u6210\u6253\u5305\u7684spec\u914d\u7f6e\u6587\u4ef6,cd\u5230\u9879\u76ee\u7684\u540c\u7ea7\u76ee\u5f55\u5e76\u6267\u884c pyinstaller -F -w --icon=static/icon.ico main.py #pyinstaller\u7684\u7528\u6cd5\uff0c\u5728\u4f60\u60f3\u653e\u7f6e\u5e94\u7528\u7684\u6587\u4ef6\u5939\u4e0b\u6253\u5f00cmd\uff0c #pyinstaller + \u53c2\u6570 +\u6587\u4ef6\u5165\u53e3\u6216\u6253\u5305\u5b9a\u4e49\u6587\u6863\u3002 #-F\uff1a\u751f\u6210\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u91cc\u9762\u662f\u591a\u6587\u4ef6\u6a21\u5f0f\uff0c\u542f\u52a8\u5feb\u3002 #-D\uff1a\u4ec5\u4ec5\u751f\u6210\u4e00\u4e2a\u6587\u4ef6\uff0c\u4e0d\u66b4\u9732\u5176\u4ed6\u4fe1\u606f\uff0c\u542f\u52a8\u8f83\u6162\u3002 #-w\uff1a\u7a97\u53e3\u6a21\u5f0f\u6253\u5305\uff0c\u4e0d\u663e\u793a\u63a7\u5236\u53f0\u3002 #--icon\uff1a\u8ddf\u56fe\u6807\u8def\u5f84\uff0c\u4f5c\u4e3a\u5e94\u7528icon\u3002 #--hidden-import \u5e94\u7528\u9700\u8981\u7684\u5305\uff0c\u4f46\u662f\u6ca1\u6709\u88ab\u6253\u5305\u8fdb\u6765\uff0c\u8fd9\u91cc\u7684\u9519\u8bef\u662f\u6700\u591a\u7684\uff0c\u56e0\u4e3a\u4e00\u822c\u662f\u7b2c\u4e09\u65b9\u5305\u9690\u5f0f\u8c03\u7528\u5176\u4ed6\u5305\uff0c\u7136\u540e\u6253\u5305\u51fa\u6765\u7684\u7a0b\u5e8f\u663e\u793aFate Error\u4e0d\u80fd\u8fd0\u884c\u3002 # \u5173\u4e8epyinstaller\u66f4\u591a\u7684\u53c2\u6570\u53ef\u53c2\u8003\u5b98\u65b9\u6587\u6863 \u8fd9\u6837\u5728\u9879\u76ee\u7684\u540c\u7ea7\u76ee\u5f55\u4e0b\u4f1a\u751f\u6210\u4ee5\u5165\u53e3\u51fd\u6570 main.spec \u547d\u540d\u7684spec\u6253\u5305\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u6211\u4eec\u4fee\u6539\u8be5\u914d\u7f6e\u6587\u4ef6\u5982\u4e0b: # -*- mode: python ; coding: utf-8 -*- from kivy_deps import sdl2,glew # \u5bfc\u5165kivy_deps block_cipher = None a = Analysis(['main.py'], pathex=['C:\\\\Users\\\\xujing.LAPTOP-LLR84L1D\\\\Desktop\\\\\u8f66\u9053\u7ebf\u68c0\u6d4b\\\\kivy'], binaries=[], datas=[], hiddenimports=[], hookspath=[], runtime_hooks=[], excludes=[], win_no_prefer_redirects=False, win_private_assemblies=False, cipher=block_cipher, noarchive=False) pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher) exe = EXE(pyz, a.scripts, [], exclude_binaries=True, name='main', debug=False, bootloader_ignore_signals=False, strip=False, upx=True, console=False , icon='static\\\\icon.ico') # \u4fee\u6539\u662f\u5426\u5f00\u542f\u547d\u4ee4\u884c\u548cicon coll = COLLECT(exe, a.binaries, a.zipfiles, a.datas, *[Tree(p) for p in (sdl2.dep_bins+glew.dep_bins)], # exe\u5305\u542b\u7684\u4e00\u4e9b\u5e93\u6253\u5305\u8fdb\u6765 strip=False, upx=True, upx_exclude=[], name='main') # \u6253\u5305\u7684exe\u7684\u540d\u79f0 \u4fee\u6539\u597dspec\u6587\u4ef6\u540e\uff0c\u6211\u4eec\u4f7f\u7528spec\u6587\u4ef6\u8fdb\u884c\u6253\u5305\uff0c\u547d\u4ee4\u5982\u4e0b\uff1a pyinstaller main.spec \u6253\u5305\u8fc7\u7a0b\u5f88\u5feb\u4f1a\u5b8c\u6210\uff0c\u4f1a\u5728\u9879\u76ee\u7684\u540c\u7ea7\u76ee\u5f55\u4e0b\u751f\u6210build\u6587\u4ef6\u5939\u548cdist\u6587\u4ef6\u5939\uff0cbuild\u6587\u4ef6\u5939\u5b58\u653e\u4e86\u6253\u5305\u7684\u4e34\u65f6\u6587\u4ef6\uff0c\u6253\u5305\u5b8c\u6210\u540e\u53ef\u4ee5\u5220\u9664\uff0cdist\u6587\u4ef6\u5939\u5b58\u653e\u4e86\u6253\u5305\u540e\u7684\u53ef\u6267\u884c\u6587\u4ef6\u53ca\u5176\u4f9d\u8d56\uff0c\u6211\u4eec\u5c06\u6253\u5305\u8fc7\u7a0b\u4e2d\u9700\u8981\u7684\u9759\u6001\u6587\u4ef6\u548c\u8d44\u6e90\u6587\u4ef6\u62f7\u8d1d\u5230dist\u6587\u4ef6\u5939\u3002\u6b64\u65f6\u7684\u547d\u4ee4\u884c\u63d0\u793a\u5982\u4e0b\uff0c\u8bf4\u660e\u6253\u5305\u6210\u529f\uff1a 123947 INFO: Appending archive to EXE C:\\Users\\xujing.LAPTOP-LLR84L1D\\Desktop\\\u65b0\u5efa\u6587\u4ef6\u5939 (2)\\\u8f66\u9053\u7ebf\u68c0\u6d4b1.0\\kivy\\build\\main\\main.exe 123963 INFO: Building EXE from EXE-00.toc completed successfully. 123963 INFO: checking Tree 123963 INFO: Building Tree because Tree-02.toc is non existent 123963 INFO: Building Tree Tree-02.toc 123978 INFO: checking Tree 123978 INFO: Building Tree because Tree-03.toc is non existent 123978 INFO: Building Tree Tree-03.toc 123978 INFO: checking COLLECT 123978 INFO: Building COLLECT because COLLECT-00.toc is non existent 123978 INFO: Building COLLECT COLLECT-00.toc 174714 INFO: Building COLLECT COLLECT-00.toc completed successfully.","title":"\u4ee5\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b\u9879\u76eeWindows\u6253\u5305\u4e3a\u4f8b"},{"location":"chapter7/","text":"\u7b2c\u4e03\u7ae0 setupfactory\u5b89\u88c5\u7a0b\u5e8f\u6253\u5305 \u6211\u4eec\u53d1\u73b0\u6211\u4eec\u6253\u5305\u7684\u7a0b\u5e8f\uff0c\u6ca1\u6709\u5b89\u88c5\u754c\u9762\uff0c\u5728\u63a7\u5236\u9762\u677f\u4e2d\u4e5f\u65e0\u6cd5\u770b\u5230\u6211\u4eec\u7684\u7a0b\u5e8f\uff0c\u5982\u4f55\u628a\u81ea\u5df1\u7684\u6253\u5305\u7a0b\u5e8f\u5236\u4f5c\u6210\u5b89\u88c5\u5305\u5462\uff1f\u672c\u8282\u8bfe\u4ecb\u7ecd\u7684setupfactory\u53ef\u4ee5\u5e2e\u52a9\u8bfb\u8005\u5b8c\u6210\u53ef\u6267\u884c\u7a0b\u5e8f\u5230\u5b89\u88c5\u5305\u7684\u8de8\u8d8a\uff0c\u8ba9\u81ea\u5df1\u5199\u7684\u5e94\u7528\u7a0b\u5e8f\u5b8c\u5168\u6210\u4e3a\u4e00\u6b3e\u8fd0\u884c\u7684\u8f6f\u4ef6\u3002\u672c\u6b21\u8bfe\u6211\u4eec\u57fa\u4e8e\u7b2c6\u7ae0\u4e2d\u6253\u5305\u597d\u7684\u7a0b\u5e8f\u3002 \u7b2c\u4e00\u6b65\uff1a \u521b\u5efa\u4e00\u4e2a\u65b0\u9879\u76ee \u7b2c\u4e8c\u6b65\uff1a \u5b89\u88c5\u5305\u5c5e\u6027\u8bbe\u7f6e\uff0c\u53cc\u51fbexe\u6587\u4ef6 \u7b2c\u4e09\u6b65\uff1a \u4fee\u6539\u5de5\u7a0b\u4e3b\u9898 \u7b2c\u56db\u6b65\uff1a \u5378\u8f7d\u8bbe\u7f6e \u7b2c\u4e94\u6b65\uff1a \u521b\u5efa\u8bbe\u7f6e \u7b2c\u516d\u6b65\uff1a \u521b\u5efa\u5b89\u88c5\u7a0b\u5e8f \u521b\u5efa\u597d\u7684\u5b89\u88c5\u5305\u5c31\u53ef\u4ee5\u5728\u7535\u8111\u4e2d\u5b89\u88c5\u4e86\uff0c\u5b89\u88c5\u8fc7\u7a0b\u548c\u4e00\u822c\u7a0b\u5e8f\u7684\u5b89\u88c5\u8fc7\u7a0b\u662f\u76f8\u540c\u7684\uff0c\u6700\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u684c\u9762\u542f\u52a8\u7a0b\u5e8f\uff0c\u5e76\u5728\u63a7\u5236\u9762\u677f\u770b\u5230\u6211\u4eec\u7684\u7a0b\u5e8f \u6700\u540e\u6f14\u793a\u8be5\u7a0b\u5e8f\u4ece\u5b89\u88c5\uff0c\u4f7f\u7528\u5230\u5378\u8f7d\u7684\u8fc7\u7a0b \u5b89\u88c5\uff1a \u4f7f\u7528\uff1a \u5378\u8f7d\uff1a \u8fd9\u6837\uff0c\u6574\u4e2a\u8f6f\u4ef6\u7684\u5f00\u53d1\u8fc7\u7a0b\u5c31\u5b8c\u6210\u4e86\uff01","title":"\u7b2c\u4e03\u7ae0 setupfactory\u5b89\u88c5\u7a0b\u5e8f\u6253\u5305"},{"location":"chapter7/#setupfactory","text":"\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u6253\u5305\u7684\u7a0b\u5e8f\uff0c\u6ca1\u6709\u5b89\u88c5\u754c\u9762\uff0c\u5728\u63a7\u5236\u9762\u677f\u4e2d\u4e5f\u65e0\u6cd5\u770b\u5230\u6211\u4eec\u7684\u7a0b\u5e8f\uff0c\u5982\u4f55\u628a\u81ea\u5df1\u7684\u6253\u5305\u7a0b\u5e8f\u5236\u4f5c\u6210\u5b89\u88c5\u5305\u5462\uff1f\u672c\u8282\u8bfe\u4ecb\u7ecd\u7684setupfactory\u53ef\u4ee5\u5e2e\u52a9\u8bfb\u8005\u5b8c\u6210\u53ef\u6267\u884c\u7a0b\u5e8f\u5230\u5b89\u88c5\u5305\u7684\u8de8\u8d8a\uff0c\u8ba9\u81ea\u5df1\u5199\u7684\u5e94\u7528\u7a0b\u5e8f\u5b8c\u5168\u6210\u4e3a\u4e00\u6b3e\u8fd0\u884c\u7684\u8f6f\u4ef6\u3002\u672c\u6b21\u8bfe\u6211\u4eec\u57fa\u4e8e\u7b2c6\u7ae0\u4e2d\u6253\u5305\u597d\u7684\u7a0b\u5e8f\u3002 \u7b2c\u4e00\u6b65\uff1a \u521b\u5efa\u4e00\u4e2a\u65b0\u9879\u76ee \u7b2c\u4e8c\u6b65\uff1a \u5b89\u88c5\u5305\u5c5e\u6027\u8bbe\u7f6e\uff0c\u53cc\u51fbexe\u6587\u4ef6 \u7b2c\u4e09\u6b65\uff1a \u4fee\u6539\u5de5\u7a0b\u4e3b\u9898 \u7b2c\u56db\u6b65\uff1a \u5378\u8f7d\u8bbe\u7f6e \u7b2c\u4e94\u6b65\uff1a \u521b\u5efa\u8bbe\u7f6e \u7b2c\u516d\u6b65\uff1a \u521b\u5efa\u5b89\u88c5\u7a0b\u5e8f \u521b\u5efa\u597d\u7684\u5b89\u88c5\u5305\u5c31\u53ef\u4ee5\u5728\u7535\u8111\u4e2d\u5b89\u88c5\u4e86\uff0c\u5b89\u88c5\u8fc7\u7a0b\u548c\u4e00\u822c\u7a0b\u5e8f\u7684\u5b89\u88c5\u8fc7\u7a0b\u662f\u76f8\u540c\u7684\uff0c\u6700\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u684c\u9762\u542f\u52a8\u7a0b\u5e8f\uff0c\u5e76\u5728\u63a7\u5236\u9762\u677f\u770b\u5230\u6211\u4eec\u7684\u7a0b\u5e8f \u6700\u540e\u6f14\u793a\u8be5\u7a0b\u5e8f\u4ece\u5b89\u88c5\uff0c\u4f7f\u7528\u5230\u5378\u8f7d\u7684\u8fc7\u7a0b \u5b89\u88c5\uff1a \u4f7f\u7528\uff1a \u5378\u8f7d\uff1a \u8fd9\u6837\uff0c\u6574\u4e2a\u8f6f\u4ef6\u7684\u5f00\u53d1\u8fc7\u7a0b\u5c31\u5b8c\u6210\u4e86\uff01","title":"\u7b2c\u4e03\u7ae0 setupfactory\u5b89\u88c5\u7a0b\u5e8f\u6253\u5305"},{"location":"chapter8/","text":"\u7b2c\u516b\u7ae0 p4a Android\u6253\u5305\u57fa\u4e8ekivy\u7684\u6d82\u9e26\u753b\u677f\u9879\u76ee python-for-android\u7b80\u79f0p4a\u662fkivy\u5e94\u7528\u6253\u5305\u6210apk\u7684\u4e00\u79cd\u65b9\u6cd5\uff0c\u4f7f\u7528p4a\u9700\u8981\u624b\u52a8\u4e0b\u8f7dAndroid SDK\u548cAndroid NDK\u7684\u5b89\u88c5\u5305\uff0c\u968f\u540e\u5b89\u88c5\u6784\u5efa\u5de5\u5177\uff0c\u914d\u7f6eSDK\u548cNDK\u7684\u73af\u5883\u53d8\u91cf\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\u8be5\u65b9\u6cd5\u53ea\u80fd\u5728Linux\u5e73\u53f0\u4e0a\u6253\u5305\uff0c\u5173\u4e8e\u5b89\u88c5\u548cp4a\u7684\u4ecb\u7ecd\uff0c\u53ef\u4ee5\u53c2\u8003 https://python-for-android.readthedocs.io/en/latest/ ,\u5982\u679c\u9700\u8981\u672c\u8bfe\u7a0b\u5c06\u63d0\u4f9b\u4e00\u4e2a\u5df2\u7ecf\u5b8c\u5168\u8bbe\u7f6e\u597d\u7684\u865a\u62df\u673a\uff0c\u8be5\u865a\u62df\u673a\u6765\u6e90\u4e8e\u300aPython+kivy(App\u5f00\u53d1)\u4ece\u5165\u95e8\u5230\u5b9e\u8df5\u300b 1.\u57fa\u4e8eKivy\u5f00\u53d1\u7684\u6d82\u9e26\u753b\u677f\u9879\u76ee\u7684p4a\u5b89\u5353\u6253\u5305\u53ca\u9879\u76ee\u6f14\u793a \u9996\u5148\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6e05\u9664\u5176\u4ed6apk\u4e2d\u7684builds\u548cdists\u6587\u4ef6\u5939\uff0c\u5bf9\u4e8e\u540c\u4e00\u4e2aapk,\u8be5\u547d\u4ee4\u53ea\u6267\u884c\u4e00\u6b21\u5373\u53ef\u3002 p4a clean_builds && p4a clean_dists kivydev@kivydev-VirtualBox:~/test/paint$ p4a clean_builds && p4a clean_dists [INFO]: Reading .p4a configuration [INFO]: Recipe python3crystax: version \"3.6\" requested [INFO]: Reading .p4a configuration [INFO]: Recipe python3crystax: version \"3.6\" requested \u81ea\u52a8\u751f\u6210\u7684 .p4a \u6587\u4ef6\uff0c\u5982\u4e0b\uff1a --dist_name Paint --android_api 19 --minsdk 19 --sdk_dir /home/kivydev/andr/android-sdk-linux --ndk_dir /home/kivydev/andr/crystax-ndk-10.3.2 --arch armeabi-v7a --requirements python3crystax==3.6,kivy --private . --package com.xujing.paint --name paint --version 1.0 --orientation landscape --bootstrap sdl2 --icon icon.png \u968f\u540e\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u6253\u5305apk p4a apk --debug [INFO]: Reading .p4a configuration [INFO]: Recipe python3crystax: version \"3.6\" requested [INFO]: Will compile for the following archs: armeabi-v7a [INFO]: Getting Android API version from user argument [INFO]: Available Android APIs are (19, 23, 27) [INFO]: Requested API target 19 is available, continuing. [INFO]: Getting NDK dir from from user argument [INFO]: Got NDK version from $ANDROIDNDKVER [INFO]: Got Android NDK version from the NDK dir: it is 10.3.2 [INFO]: Using Crystax NDK 10.3.2 [INFO]: Found virtualenv at /usr/bin/virtualenv [INFO]: Found the following toolchain versions: ['4.9', '5', 'clang3.6', 'clang3.7'] [INFO]: Picking the latest gcc toolchain, here 5 [INFO]: Of the existing distributions, the following meet the given requirements: [INFO]: Paint: includes recipes (hostpython3crystax, sdl2_image, sdl2_mixer, sdl2_ttf, python3crystax, sdl2, six, pyjnius, kivy), built for archs (armeabi-v7a) [INFO]: Paint has compatible recipes, using this one [INFO]: Of the existing distributions, the following meet the given requirements: [INFO]: Paint: includes recipes (hostpython3crystax, sdl2_image, sdl2_mixer, sdl2_ttf, python3crystax, sdl2, six, pyjnius, kivy), built for archs (armeabi-v7a) [INFO]: Paint has compatible recipes, using this one Could not find hostpython, will not compile to .pyo (this is normal with python3) [INFO]: -> directory context /home/kivydev/.local/share/python-for-android/dists/Paint No compiled python is present to zip, skipping. this should only be the case if you are using the CrystaX python [INFO]: Selecting java build tool: [INFO]: Detected highest available build tools version to be 28.0.3 [INFO]: Building with gradle, as gradle executable is present [DEBUG]: -> running gradlew assembleDebug [DEBUG]: > Configuring > 0/1 projects > root project > Resolving dependenIncremental java compilation is an incubating feature. [DEBUG]: :preBuild UP-TO-DATE [DEBUG]: :preDebugBuild UP-TO-DATE [DEBUG]: :checkDebugManifest [DEBUG]: :prepareDebugDependencies [DEBUG]: :compileDebugAidl UP-TO-DATE [DEBUG]: :compileDebugRenderscript UP-TO-DATE [DEBUG]: :generateDebugBuildConfig UP-TO-DATE [DEBUG]: :generateDebugResValues UP-TO-DATE [DEBUG]: :generateDebugResources UP-TO-DATE [DEBUG]: :mergeDebugResources [DEBUG]: :processDebugManifest UP-TO-DATE [DEBUG]: :processDebugResources [DEBUG]: :generateDebugSources [DEBUG]: :incrementalDebugJavaCompilationSafeguard UP-TO-DATE [DEBUG]: :javaPreCompileDebug [DEBUG]: :compileDebugJavaWithJavac UP-TO-DATE [DEBUG]: :compileDebugNdk UP-TO-DATE [DEBUG]: :compileDebugSources UP-TO-DATE [DEBUG]: :mergeDebugShaders UP-TO-DATE [DEBUG]: :compileDebugShaders UP-TO-DATE [DEBUG]: :generateDebugAssets UP-TO-DATE [DEBUG]: :mergeDebugAssets [DEBUG]: :transformClassesWithDexForDebug UP-TO-DATE [DEBUG]: :mergeDebugJniLibFolders UP-TO-DATE [DEBUG]: :transformNativeLibsWithMergeJniLibsForDebug UP-TO-DATE [DEBUG]: :transformNativeLibsWithStripDebugSymbolForDebug UP-TO-DATE [DEBUG]: :processDebugJavaRes UP-TO-DATE [DEBUG]: :transformResourcesWithMergeJavaResForDebug UP-TO-DATE [DEBUG]: :validateSigningDebug [DEBUG]: :packageDebug [DEBUG]: :assembleDebug [DEBUG]: [DEBUG]: BUILD SUCCESSFUL [DEBUG]: [DEBUG]: Total time: 6.116 secs [DEBUG]: [INFO]: <- directory context /home/kivydev/test/paint [INFO]: # Copying APK to current directory [INFO]: # APK filename not found in build output, trying to guess [INFO]: # Found APK file: /home/kivydev/.local/share/python-for-android/dists/Paint/build/outputs/apk/Paint-debug.apk [INFO]: # Add version number to APK [INFO]: # APK renamed to Paint-1.0-debug.apk [DEBUG]: -> running cp /home/kivydev/.local/share/python-for-android/dists/Paint/build/outputs/apk/Paint-debug.apk Paint-1.0-debug.apk \u6253\u5305\u5b8c\u6210\u540e\u4f1a\u751f\u6210apk\u6587\u4ef6\uff0c\u628aapk\u6587\u4ef6\u590d\u5236\u5230\u5171\u4eab\u6587\u4ef6\u5939\uff0c\u5e76\u5728\u624b\u673a\u6216\u5b89\u5353\u6a21\u62df\u5668\u4e2d\u5b89\u88c5\u3002 2.MUMU\u5b89\u5353\u6a21\u62df\u5668\u53caadb_server.exe\u8c03\u8bd5 \u6211\u4eec\u5c06\u6253\u5305\u597d\u7684apk\u6587\u4ef6\u5b89\u88c5\u5728\u5b89\u5353\u6a21\u62df\u5668\uff0c\u5e76\u901a\u8fc7\u5b89\u5353\u6a21\u62df\u5668\u63d0\u4f9b\u7684adb_server.exe\u591aapk\u8fdb\u884c\u8c03\u8bd5 \u9996\u5148\u6211\u4eec\u5c06\u521a\u521a\u6253\u5305\u597d\u7684apk\u6587\u4ef6\u5b89\u88c5\u5230\u5b89\u5353\u6a21\u62df\u5668\uff1a \u6253\u5f00\u6211\u4eec\u5b89\u88c5\u7684\u5b89\u5353\u7a0b\u5e8f \u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\u3002 \u6211\u4eec\u901a\u8fc7MUMU\u5b89\u5353\u6a21\u62df\u5668\u81ea\u5e26\u7684adb_server.exe\u8c03\u8bd5\u770b\u4e00\u4e0b\u540e\u53f0\u8fd0\u884c\u7684\u65e5\u5fd7 cmd cd D:\\soft_xj\\MUMU\\emulator\\nemu\\vmonitor\\bin adb_server.exe connect 127.0.0.1:7555 adb_server.exe shell run-as com.xujing.paint cd files/app/.kivy/logs cat kivy_20-07-09_1.txt \u6ca1\u6709ERROR\u540c\u65f6\u6211\u4eec\u7684\u5b89\u5353\u7a0b\u5e8f\u5e76\u6ca1\u6709\u95ea\u9000\uff0c\u8fd0\u884c\u6b63\u5e38\uff0c\u5982\u679c\u8fc7\u7a0b\u4e2d\u6211\u4eec\u7684\u7a0b\u5e8f\u51fa\u73b0\u95ea\u9000\u6216\u9519\u8bef\uff0c\u8bf7\u6309\u7167\u4e0a\u8ff0\u65b9\u5f0f\u8fdb\u884c\u8c03\u8bd5\uff0c\u5bfb\u627e\u539f\u56e0\u3002 3.adb\u5b89\u5353\u8c03\u8bd5 \u6700\u540e\u6211\u4eec\u5c06p4a\u6253\u5305\u7684\u5b89\u5353\u7a0b\u5e8f\u5b89\u88c5\u8fd0\u884c\u5728\u6211\u4eec\u7684\u534e\u4e3a\u5b89\u5353\u624b\u673a\u4e0a\uff0c\u9996\u5148\u6211\u4eec\u7ecfapk\u5b89\u88c5\u5728\u6211\u4eec\u7684\u534e\u4e3a\u624b\u673a\u4e0a \u6211\u4eec\u4f7f\u7528adb\u8c03\u8bd5\u6211\u4eec\u5b89\u5353\u624b\u673a\u4e0a\u7684apk\u5e94\u7528 adb shell run-as com.xujing.paint cd files/app/.kivy/logs cat kivy_20-07-09_1.txt","title":"\u7b2c\u516b\u7ae0 p4a Android\u6253\u5305\u57fa\u4e8ekivy\u7684\u6d82\u9e26\u753b\u677f\u9879\u76ee"},{"location":"chapter8/#p4a-androidkivy","text":"python-for-android\u7b80\u79f0p4a\u662fkivy\u5e94\u7528\u6253\u5305\u6210apk\u7684\u4e00\u79cd\u65b9\u6cd5\uff0c\u4f7f\u7528p4a\u9700\u8981\u624b\u52a8\u4e0b\u8f7dAndroid SDK\u548cAndroid NDK\u7684\u5b89\u88c5\u5305\uff0c\u968f\u540e\u5b89\u88c5\u6784\u5efa\u5de5\u5177\uff0c\u914d\u7f6eSDK\u548cNDK\u7684\u73af\u5883\u53d8\u91cf\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\u8be5\u65b9\u6cd5\u53ea\u80fd\u5728Linux\u5e73\u53f0\u4e0a\u6253\u5305\uff0c\u5173\u4e8e\u5b89\u88c5\u548cp4a\u7684\u4ecb\u7ecd\uff0c\u53ef\u4ee5\u53c2\u8003 https://python-for-android.readthedocs.io/en/latest/ ,\u5982\u679c\u9700\u8981\u672c\u8bfe\u7a0b\u5c06\u63d0\u4f9b\u4e00\u4e2a\u5df2\u7ecf\u5b8c\u5168\u8bbe\u7f6e\u597d\u7684\u865a\u62df\u673a\uff0c\u8be5\u865a\u62df\u673a\u6765\u6e90\u4e8e\u300aPython+kivy(App\u5f00\u53d1)\u4ece\u5165\u95e8\u5230\u5b9e\u8df5\u300b","title":"\u7b2c\u516b\u7ae0 p4a Android\u6253\u5305\u57fa\u4e8ekivy\u7684\u6d82\u9e26\u753b\u677f\u9879\u76ee"},{"location":"chapter8/#1kivyp4a","text":"\u9996\u5148\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6e05\u9664\u5176\u4ed6apk\u4e2d\u7684builds\u548cdists\u6587\u4ef6\u5939\uff0c\u5bf9\u4e8e\u540c\u4e00\u4e2aapk,\u8be5\u547d\u4ee4\u53ea\u6267\u884c\u4e00\u6b21\u5373\u53ef\u3002 p4a clean_builds && p4a clean_dists kivydev@kivydev-VirtualBox:~/test/paint$ p4a clean_builds && p4a clean_dists [INFO]: Reading .p4a configuration [INFO]: Recipe python3crystax: version \"3.6\" requested [INFO]: Reading .p4a configuration [INFO]: Recipe python3crystax: version \"3.6\" requested \u81ea\u52a8\u751f\u6210\u7684 .p4a \u6587\u4ef6\uff0c\u5982\u4e0b\uff1a --dist_name Paint --android_api 19 --minsdk 19 --sdk_dir /home/kivydev/andr/android-sdk-linux --ndk_dir /home/kivydev/andr/crystax-ndk-10.3.2 --arch armeabi-v7a --requirements python3crystax==3.6,kivy --private . --package com.xujing.paint --name paint --version 1.0 --orientation landscape --bootstrap sdl2 --icon icon.png \u968f\u540e\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u6253\u5305apk p4a apk --debug [INFO]: Reading .p4a configuration [INFO]: Recipe python3crystax: version \"3.6\" requested [INFO]: Will compile for the following archs: armeabi-v7a [INFO]: Getting Android API version from user argument [INFO]: Available Android APIs are (19, 23, 27) [INFO]: Requested API target 19 is available, continuing. [INFO]: Getting NDK dir from from user argument [INFO]: Got NDK version from $ANDROIDNDKVER [INFO]: Got Android NDK version from the NDK dir: it is 10.3.2 [INFO]: Using Crystax NDK 10.3.2 [INFO]: Found virtualenv at /usr/bin/virtualenv [INFO]: Found the following toolchain versions: ['4.9', '5', 'clang3.6', 'clang3.7'] [INFO]: Picking the latest gcc toolchain, here 5 [INFO]: Of the existing distributions, the following meet the given requirements: [INFO]: Paint: includes recipes (hostpython3crystax, sdl2_image, sdl2_mixer, sdl2_ttf, python3crystax, sdl2, six, pyjnius, kivy), built for archs (armeabi-v7a) [INFO]: Paint has compatible recipes, using this one [INFO]: Of the existing distributions, the following meet the given requirements: [INFO]: Paint: includes recipes (hostpython3crystax, sdl2_image, sdl2_mixer, sdl2_ttf, python3crystax, sdl2, six, pyjnius, kivy), built for archs (armeabi-v7a) [INFO]: Paint has compatible recipes, using this one Could not find hostpython, will not compile to .pyo (this is normal with python3) [INFO]: -> directory context /home/kivydev/.local/share/python-for-android/dists/Paint No compiled python is present to zip, skipping. this should only be the case if you are using the CrystaX python [INFO]: Selecting java build tool: [INFO]: Detected highest available build tools version to be 28.0.3 [INFO]: Building with gradle, as gradle executable is present [DEBUG]: -> running gradlew assembleDebug [DEBUG]: > Configuring > 0/1 projects > root project > Resolving dependenIncremental java compilation is an incubating feature. [DEBUG]: :preBuild UP-TO-DATE [DEBUG]: :preDebugBuild UP-TO-DATE [DEBUG]: :checkDebugManifest [DEBUG]: :prepareDebugDependencies [DEBUG]: :compileDebugAidl UP-TO-DATE [DEBUG]: :compileDebugRenderscript UP-TO-DATE [DEBUG]: :generateDebugBuildConfig UP-TO-DATE [DEBUG]: :generateDebugResValues UP-TO-DATE [DEBUG]: :generateDebugResources UP-TO-DATE [DEBUG]: :mergeDebugResources [DEBUG]: :processDebugManifest UP-TO-DATE [DEBUG]: :processDebugResources [DEBUG]: :generateDebugSources [DEBUG]: :incrementalDebugJavaCompilationSafeguard UP-TO-DATE [DEBUG]: :javaPreCompileDebug [DEBUG]: :compileDebugJavaWithJavac UP-TO-DATE [DEBUG]: :compileDebugNdk UP-TO-DATE [DEBUG]: :compileDebugSources UP-TO-DATE [DEBUG]: :mergeDebugShaders UP-TO-DATE [DEBUG]: :compileDebugShaders UP-TO-DATE [DEBUG]: :generateDebugAssets UP-TO-DATE [DEBUG]: :mergeDebugAssets [DEBUG]: :transformClassesWithDexForDebug UP-TO-DATE [DEBUG]: :mergeDebugJniLibFolders UP-TO-DATE [DEBUG]: :transformNativeLibsWithMergeJniLibsForDebug UP-TO-DATE [DEBUG]: :transformNativeLibsWithStripDebugSymbolForDebug UP-TO-DATE [DEBUG]: :processDebugJavaRes UP-TO-DATE [DEBUG]: :transformResourcesWithMergeJavaResForDebug UP-TO-DATE [DEBUG]: :validateSigningDebug [DEBUG]: :packageDebug [DEBUG]: :assembleDebug [DEBUG]: [DEBUG]: BUILD SUCCESSFUL [DEBUG]: [DEBUG]: Total time: 6.116 secs [DEBUG]: [INFO]: <- directory context /home/kivydev/test/paint [INFO]: # Copying APK to current directory [INFO]: # APK filename not found in build output, trying to guess [INFO]: # Found APK file: /home/kivydev/.local/share/python-for-android/dists/Paint/build/outputs/apk/Paint-debug.apk [INFO]: # Add version number to APK [INFO]: # APK renamed to Paint-1.0-debug.apk [DEBUG]: -> running cp /home/kivydev/.local/share/python-for-android/dists/Paint/build/outputs/apk/Paint-debug.apk Paint-1.0-debug.apk \u6253\u5305\u5b8c\u6210\u540e\u4f1a\u751f\u6210apk\u6587\u4ef6\uff0c\u628aapk\u6587\u4ef6\u590d\u5236\u5230\u5171\u4eab\u6587\u4ef6\u5939\uff0c\u5e76\u5728\u624b\u673a\u6216\u5b89\u5353\u6a21\u62df\u5668\u4e2d\u5b89\u88c5\u3002","title":"1.\u57fa\u4e8eKivy\u5f00\u53d1\u7684\u6d82\u9e26\u753b\u677f\u9879\u76ee\u7684p4a\u5b89\u5353\u6253\u5305\u53ca\u9879\u76ee\u6f14\u793a"},{"location":"chapter8/#2mumuadb_serverexe","text":"\u6211\u4eec\u5c06\u6253\u5305\u597d\u7684apk\u6587\u4ef6\u5b89\u88c5\u5728\u5b89\u5353\u6a21\u62df\u5668\uff0c\u5e76\u901a\u8fc7\u5b89\u5353\u6a21\u62df\u5668\u63d0\u4f9b\u7684adb_server.exe\u591aapk\u8fdb\u884c\u8c03\u8bd5 \u9996\u5148\u6211\u4eec\u5c06\u521a\u521a\u6253\u5305\u597d\u7684apk\u6587\u4ef6\u5b89\u88c5\u5230\u5b89\u5353\u6a21\u62df\u5668\uff1a \u6253\u5f00\u6211\u4eec\u5b89\u88c5\u7684\u5b89\u5353\u7a0b\u5e8f \u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\u3002 \u6211\u4eec\u901a\u8fc7MUMU\u5b89\u5353\u6a21\u62df\u5668\u81ea\u5e26\u7684adb_server.exe\u8c03\u8bd5\u770b\u4e00\u4e0b\u540e\u53f0\u8fd0\u884c\u7684\u65e5\u5fd7 cmd cd D:\\soft_xj\\MUMU\\emulator\\nemu\\vmonitor\\bin adb_server.exe connect 127.0.0.1:7555 adb_server.exe shell run-as com.xujing.paint cd files/app/.kivy/logs cat kivy_20-07-09_1.txt \u6ca1\u6709ERROR\u540c\u65f6\u6211\u4eec\u7684\u5b89\u5353\u7a0b\u5e8f\u5e76\u6ca1\u6709\u95ea\u9000\uff0c\u8fd0\u884c\u6b63\u5e38\uff0c\u5982\u679c\u8fc7\u7a0b\u4e2d\u6211\u4eec\u7684\u7a0b\u5e8f\u51fa\u73b0\u95ea\u9000\u6216\u9519\u8bef\uff0c\u8bf7\u6309\u7167\u4e0a\u8ff0\u65b9\u5f0f\u8fdb\u884c\u8c03\u8bd5\uff0c\u5bfb\u627e\u539f\u56e0\u3002","title":"2.MUMU\u5b89\u5353\u6a21\u62df\u5668\u53caadb_server.exe\u8c03\u8bd5"},{"location":"chapter8/#3adb","text":"\u6700\u540e\u6211\u4eec\u5c06p4a\u6253\u5305\u7684\u5b89\u5353\u7a0b\u5e8f\u5b89\u88c5\u8fd0\u884c\u5728\u6211\u4eec\u7684\u534e\u4e3a\u5b89\u5353\u624b\u673a\u4e0a\uff0c\u9996\u5148\u6211\u4eec\u7ecfapk\u5b89\u88c5\u5728\u6211\u4eec\u7684\u534e\u4e3a\u624b\u673a\u4e0a \u6211\u4eec\u4f7f\u7528adb\u8c03\u8bd5\u6211\u4eec\u5b89\u5353\u624b\u673a\u4e0a\u7684apk\u5e94\u7528 adb shell run-as com.xujing.paint cd files/app/.kivy/logs cat kivy_20-07-09_1.txt","title":"3.adb\u5b89\u5353\u8c03\u8bd5"},{"location":"chapter9/","text":"\u7b2c\u4e5d\u7ae0 buildozer Android\u6253\u5305 \u672c\u7ae0\u6211\u4eec\u5c06\u4f1a\u5728Linux\u73af\u5883\u4e0b\u901a\u8fc7buildozer\u628a\u5199\u597d\u7684\u7a0b\u5e8f\u6253\u5305\u4e3a\u5728Android\u73af\u5883\u4e0b\u53ef\u6267\u884c\u7684\u6587\u4ef6\uff0c\u5173\u4e8ebuildozer\u7684\u5b89\u88c5\u53ef\u4ee5\u53c2\u8003\u5b98\u7f51\u7684\u4ecb\u7ecd\uff0c\u5982\u679c\u8bfb\u8005\u9700\u8981\u6211\u4eec\u5c06\u5171\u4eab\u6211\u4eec\u914d\u7f6e\u597d\u7684buildozer\u7684\u865a\u62df\u673a\u73af\u5883\uff0c\u8fd9\u6837\u8bfb\u8005\u5c31\u514d\u4e8e\u91cd\u65b0\u914d\u7f6e\u73af\u5883\uff0c\u76f4\u63a5\u53ef\u4ee5\u6253\u5305\uff0c\u4f46\u662f\u6211\u4eec\u5efa\u8bae\u8bfb\u8005\u81ea\u5df1\u642d\u5efa\u73af\u5883\uff0c\u8fd9\u6837\u5bf9\u5b89\u5353\u6253\u5305\u4f1a\u6709\u66f4\u5168\u9762\u7684\u8ba4\u8bc6\u3002 1.\u57fa\u4e8ekivymd\u7684\u6d82\u9e26\u753b\u677f\u7684buildozer\u6253\u5305\u53ca\u5728adb\u4e0b\u8fdb\u884c\u5b89\u5353\u8c03\u8bd5 1.\u57fa\u4e8ekivymd\u7684\u6d82\u9e26\u753b\u677f\u7684buildozer\u6253\u5305\u53ca\u9879\u76ee\u6f14\u793a \u914d\u7f6e\u597d\u73af\u5883\u540e\uff0c\u901a\u8fc7cd\u547d\u4ee4\u8fdb\u5165\u9700\u8981\u6253\u5305\u7684\u9879\u76ee\u7684\u540c\u7ea7\u76ee\u5f55\u4e2d\uff0c\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u751f\u6210buildozer.spec\u914d\u7f6e\u6587\u4ef6\uff1a buildozer init \u7136\u540e\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u7f16\u8f91\u914d\u7f6e\u6587\u4ef6\uff1a [app] # (str) Title of your application title = \u6d82\u9e26\u753b\u677fmd #<----------------\u5e94\u7528\u540d\u79f0 # (str) Package name package.name = paintmd # (str) Package domain (needed for android/ios packaging) package.domain = com.xujing # <---------------\u57df\u540d # (str) Source code where the main.py live source.dir = . # (list) Source files to include (let empty to include all the files) source.include_exts = py,png,jpg,kv,atlas,ico,ttf # <--------------\u9700\u8981\u6253\u5305\u8fdb\u6765\u7684\u6587\u4ef6\u7684\u6269\u5c55\u540d # (list) List of inclusions using pattern matching #source.include_patterns = assets/*,images/*.png # (list) Source files to exclude (let empty to not exclude anything) #source.exclude_exts = spec # (list) List of directory to exclude (let empty to not exclude anything) #source.exclude_dirs = tests, bin, venv # (list) List of exclusions using pattern matching #source.exclude_patterns = license,images/*/*.jpg # (str) Application versioning (method 1) version = 1.0.0 # (str) Application versioning (method 2) # version.regex = __version__ = ['\"](.*)['\"] # version.filename = %(source.dir)s/main.py # (list) Application requirements # comma separated e.g. requirements = sqlite3,kivy requirements = python3==3.7.5,hostpython3==3.7.5,kivy,kivymd #<----------\u5e94\u7528\u4f9d\u8d56\u5305\uff0c\u975e\u5e38\u91cd\u8981\uff0c\u5927\u90e8\u5206\u95ea\u9000\u90fd\u662f\u56e0\u4e3a\u5177\u4f53\u7684\u4f9d\u8d56\u5305\u6ca1\u6709\u6253\u8fdb\u6765 # (str) Custom source folders for requirements # Sets custom source for any requirements with recipes # requirements.source.kivy = ../../kivy # (str) Presplash of the application #presplash.filename = %(source.dir)s/data/presplash.png # (str) Icon of the application #icon.filename = %(source.dir)s/data/icon.png icon.filename = icon.png #<--------------------\u5e94\u7528\u7684\u56fe\u6807 # (str) Supported orientation (one of landscape, sensorLandscape, portrait or all) orientation = portrait # (list) List of service to declare #services = NAME:ENTRYPOINT_TO_PY,NAME2:ENTRYPOINT2_TO_PY # # OSX Specific # # # author = \u00a9 Copyright Info # change the major version of python used by the app osx.python_version = 3 # Kivy version to use osx.kivy_version = 1.9.1 # # Android specific # # (bool) Indicate if the application should be fullscreen or not fullscreen = 0 # <---------------\u5168\u5c4f\u663e\u793a1\uff0c\u975e\u5168\u5c4f0 # (string) Presplash background color (for new android toolchain) # Supported formats are: #RRGGBB #AARRGGBB or one of the following names: # red, blue, green, black, white, gray, cyan, magenta, yellow, lightgray, # darkgray, grey, lightgrey, darkgrey, aqua, fuchsia, lime, maroon, navy, # olive, purple, silver, teal. #android.presplash_color = #FFFFFF # (list) Permissions #android.permissions = INTERNET # <----------- \u5b89\u5353\u7684\u6743\u9650\uff0c\u8fd9\u4e2a\u4e5f\u9700\u8981\u6839\u636e\u81ea\u5df1\u7684\u5e94\u7528\u53bb\u8bbe\u7f6e # (int) Target Android API, should be as high as possible. #android.api = 27 # (int) Minimum API your APK will support. #android.minapi = 21 # (int) Android SDK version to use #android.sdk = 20 # (str) Android NDK version to use #android.ndk = 19b # (int) Android NDK API to use. This is the minimum API your app will support, it should usually match android.minapi. #android.ndk_api = 21 # (bool) Use --private data storage (True) or --dir public storage (False) #android.private_storage = True # (str) Android NDK directory (if empty, it will be automatically downloaded.) #android.ndk_path = # (str) Android SDK directory (if empty, it will be automatically downloaded.) #android.sdk_path = # (str) ANT directory (if empty, it will be automatically downloaded.) #android.ant_path = # (bool) If True, then skip trying to update the Android sdk # This can be useful to avoid excess Internet downloads or save time # when an update is due and you just want to test/build your package # android.skip_update = False # (bool) If True, then automatically accept SDK license # agreements. This is intended for automation only. If set to False, # the default, you will be shown the license when first running # buildozer. # android.accept_sdk_license = False # (str) Android entry point, default is ok for Kivy-based app #android.entrypoint = org.renpy.android.PythonActivity # (str) Android app theme, default is ok for Kivy-based app # android.apptheme = \"@android:style/Theme.NoTitleBar\" # (list) Pattern to whitelist for the whole project #android.whitelist = # (str) Path to a custom whitelist file #android.whitelist_src = # (str) Path to a custom blacklist file #android.blacklist_src = # (list) List of Java .jar files to add to the libs so that pyjnius can access # their classes. Don't add jars that you do not need, since extra jars can slow # down the build process. Allows wildcards matching, for example: # OUYA-ODK/libs/*.jar #android.add_jars = foo.jar,bar.jar,path/to/more/*.jar # (list) List of Java files to add to the android project (can be java or a # directory containing the files) #android.add_src = # (list) Android AAR archives to add (currently works only with sdl2_gradle # bootstrap) #android.add_aars = # (list) Gradle dependencies to add (currently works only with sdl2_gradle # bootstrap) #android.gradle_dependencies = # (list) add java compile options # this can for example be necessary when importing certain java libraries using the 'android.gradle_dependencies' option # see https://developer.android.com/studio/write/java8-support for further information # android.add_compile_options = \"sourceCompatibility = 1.8\", \"targetCompatibility = 1.8\" # (list) Gradle repositories to add {can be necessary for some android.gradle_dependencies} # please enclose in double quotes # e.g. android.gradle_repositories = \"maven { url 'https://kotlin.bintray.com/ktor' }\" #android.add_gradle_repositories = # (list) packaging options to add # see https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.PackagingOptions.html # can be necessary to solve conflicts in gradle_dependencies # please enclose in double quotes # e.g. android.add_packaging_options = \"exclude 'META-INF/common.kotlin_module'\", \"exclude 'META-INF/*.kotlin_module'\" #android.add_gradle_repositories = # (list) Java classes to add as activities to the manifest. #android.add_activities = com.example.ExampleActivity # (str) OUYA Console category. Should be one of GAME or APP # If you leave this blank, OUYA support will not be enabled #android.ouya.category = GAME # (str) Filename of OUYA Console icon. It must be a 732x412 png image. #android.ouya.icon.filename = %(source.dir)s/data/ouya_icon.png # (str) XML file to include as an intent filters in <activity> tag #android.manifest.intent_filters = # (str) launchMode to set for the main activity #android.manifest.launch_mode = standard # (list) Android additional libraries to copy into libs/armeabi #android.add_libs_armeabi = libs/android/*.so #android.add_libs_armeabi_v7a = libs/android-v7/*.so #android.add_libs_arm64_v8a = libs/android-v8/*.so #android.add_libs_x86 = libs/android-x86/*.so #android.add_libs_mips = libs/android-mips/*.so # (bool) Indicate whether the screen should stay on # Don't forget to add the WAKE_LOCK permission if you set this to True #android.wakelock = False # (list) Android application meta-data to set (key=value format) #android.meta_data = # (list) Android library project to add (will be added in the # project.properties automatically.) #android.library_references = # (list) Android shared libraries which will be added to AndroidManifest.xml using <uses-library> tag #android.uses_library = # (str) Android logcat filters to use #android.logcat_filters = *:S python:D # (bool) Copy library instead of making a libpymodules.so #android.copy_libs = 1 # (str) The Android arch to build for, choices: armeabi-v7a, arm64-v8a, x86, x86_64 android.arch = armeabi-v7a # (int) overrides automatic versionCode computation (used in build.gradle) # this is not the same as app version and should only be edited if you know what you're doing # android.numeric_version = 1 # # Python for android (p4a) specific # # (str) python-for-android fork to use, defaults to upstream (kivy) #p4a.fork = kivy # (str) python-for-android branch to use, defaults to master #p4a.branch = master # (str) python-for-android git clone directory (if empty, it will be automatically cloned from github) #p4a.source_dir = # (str) The directory in which python-for-android should look for your own build recipes (if any) #p4a.local_recipes = # (str) Filename to the hook for p4a #p4a.hook = # (str) Bootstrap to use for android builds # p4a.bootstrap = sdl2 # (int) port number to specify an explicit --port= p4a argument (eg for bootstrap flask) #p4a.port = # # iOS specific # # (str) Path to a custom kivy-ios folder #ios.kivy_ios_dir = ../kivy-ios # Alternately, specify the URL and branch of a git checkout: ios.kivy_ios_url = https://github.com/kivy/kivy-ios ios.kivy_ios_branch = master # Another platform dependency: ios-deploy # Uncomment to use a custom checkout #ios.ios_deploy_dir = ../ios_deploy # Or specify URL and branch ios.ios_deploy_url = https://github.com/phonegap/ios-deploy ios.ios_deploy_branch = 1.10.0 # (bool) Whether or not to sign the code ios.codesign.allowed = false # (str) Name of the certificate to use for signing the debug version # Get a list of available identities: buildozer ios list_identities #ios.codesign.debug = \"iPhone Developer: <lastname> <firstname> (<hexstring>)\" # (str) Name of the certificate to use for signing the release version #ios.codesign.release = %(ios.codesign.debug)s [buildozer] # (int) Log level (0 = error only, 1 = info, 2 = debug (with command output)) log_level = 2 # (int) Display warning if buildozer is run as root (0 = False, 1 = True) warn_on_root = 1 # (str) Path to build artifact storage, absolute or relative to spec file # build_dir = ./.buildozer # (str) Path to build output (i.e. .apk, .ipa) storage # bin_dir = ./bin # ----------------------------------------------------------------------------- # List as sections # # You can define all the \"list\" as [section:key]. # Each line will be considered as a option to the list. # Let's take [app] / source.exclude_patterns. # Instead of doing: # #[app] #source.exclude_patterns = license,data/audio/*.wav,data/images/original/* # # This can be translated into: # #[app:source.exclude_patterns] #license #data/audio/*.wav #data/images/original/* # # ----------------------------------------------------------------------------- # Profiles # # You can extend section / key with a profile # For example, you want to deploy a demo version of your application without # HD content. You could first change the title to add \"(demo)\" in the name # and extend the excluded directories to remove the HD content. # #[app@demo] #title = My Application (demo) # #[app:source.exclude_patterns@demo] #images/hd/* # # Then, invoke the command line with the \"demo\" profile: # #buildozer --profile demo android debug \u5728\u9879\u76ee\u4e2d\u6dfb\u52a0\u7684\u4f9d\u8d56\u5305\u4e00\u5b9a\u8981\u5199\u5230requirements\u4e2d\uff0c\u518d\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u751f\u6210\u4e00\u4e2adebug\u7248\u672c\u7684apk\u6587\u4ef6 buildozer -v android debug \u9996\u6b21\u6253\u5305\u8fc7\u7a0b\u4f1a\u5f88\u6162\uff0c\u8bf7\u8010\u5fc3\u7b49\u5f85\u4fdd\u6301\u7f51\u7edc\u7545\u901a\uff0c\u76f4\u5230\u51fa\u73b0\u5982\u4e0b\u7684\u754c\u9762\uff0c\u6253\u5305\u5b8c\u6210\uff1a [INFO]: Detected highest available build tools version to be 30.0.0 [DEBUG]: -> running gradlew assembleDebug [DEBUG]: [DEBUG]: Deprecated Gradle features were used in this build, making it incompatible with Gradle 7.0. [DEBUG]: Use '--warning-mode all' to show the individual deprecation warnings. [DEBUG]: See https://docs.gradle.org/6.4.1/userguide/command_line_interface.html#sec:command_line_warnings [DEBUG]: [DEBUG]: BUILD SUCCESSFUL in 2s [DEBUG]: 27 actionable tasks: 4 executed, 23 up-to-date [INFO]: <- directory context /home/kivymd/Desktop/paintmd/.buildozer/android/platform/python-for-android [INFO]: Of the existing distributions, the following meet the given requirements: [INFO]: paintmd: min API 21, includes recipes (hostpython3, libffi, openssl, sdl2_image, sdl2_mixer, sdl2_ttf, sqlite3, python3, sdl2, setuptools, six, pyjnius, android, kivy, kivymd, certifi), built for archs (armeabi-v7a) [INFO]: paintmd has compatible recipes, using this one [INFO]: # Copying android package to current directory [INFO]: # Android package filename not found in build output. Guessing... [INFO]: # Found android package file: /home/kivymd/Desktop/paintmd/.buildozer/android/platform/build-armeabi-v7a/dists/paintmd__armeabi-v7a/build/outputs/apk/debug/paintmd__armeabi-v7a-debug.apk [INFO]: # Add version number to android package [INFO]: # Android package renamed to paintmd__armeabi-v7a-debug-1.0.0-.apk [DEBUG]: -> running cp /home/kivymd/Desktop/paintmd/.buildozer/android/platform/build-armeabi-v7a/dists/paintmd__armeabi-v7a/build/outputs/apk/debug/paintmd__armeabi-v7a-debug.apk paintmd__armeabi-v7a-debug-1.0.0-.apk WARNING: Received a --sdk argument, but this argument is deprecated and does nothing. No setup.py/pyproject.toml used, copying full private data into .apk. Applying Java source code patches... Applying patch: src/patches/SDLActivity.java.patch Warning: failed to apply patch (exit code 1), assuming it is already applied: src/patches/SDLActivity.java.patch # Android packaging done! # APK paintmd-1.0.0-armeabi-v7a-debug.apk available in the bin directory \u6253\u5305\u5b8c\u6210\u540e\u4f1a\u5728\u9879\u76ee\u7684bin\u76ee\u5f55\u4e0b\u751f\u6210\u4e00\u4e2aapk\u6587\u4ef6\uff0c\u66f4\u591a\u547d\u4ee4\u53ef\u4ee5\u53c2\u8003\u5b98\u65b9\u6587\u6863\u3002 2.adb \u5b89\u5353\u8c03\u8bd5 \u6253\u5305\u5b8c\u6210\u540e\u751f\u6210\u7684apk\u6587\u4ef6\u53ef\u4ee5\u5728\u5b89\u5353\u624b\u673a\u4e2d\u5b89\u88c5\u4f7f\u7528\uff0c\u5e76\u901a\u8fc7adb\u8c03\u8bd5\u3002 \u5728\u5b89\u5353\u6a21\u62df\u5668\u4e2d\u7684\u8fd0\u884c\uff1a \u5728\u5b89\u5353\u624b\u673a\u4e2d\u7684\u8fd0\u884c\uff1a \u5728adb\u4e0b\u7684\u8c03\u8bd5\u529f\u80fd\uff1a adb connect 127.0.0.1:7555 adb shell run-as com.xujing.paintmd cd files/app/.kivy/logs/ cat kivy_20-07-13_0.txt [INFO ] Logger: Record log in /data/user/0/com.xujing.paintmd/files/app/.kivy/logs/kivy_20-07-13_0.txt [WARNING] [Config ] Upgrading configuration in progress. [WARNING] [Config ] Older configuration version detected (0 instead of 21) [INFO ] Kivy: v1.11.1 [INFO ] Kivy: Installed at \"/data/user/0/com.xujing.paintmd/files/app/_python_bundle/site-packages/kivy/__init__.pyc\" [INFO ] Python: v3.7.5 (default, Jul 6 2020, 17:31:36) [Clang 8.0.2 (https://android.googlesource.com/toolchain/clang 40173bab62ec7462 [INFO ] Python: Interpreter at \"android_python\" [INFO ] Factory: 184 symbols loaded [INFO ] Image: Providers: img_tex, img_dds, img_sdl2, img_gif (img_pil, img_ffpyplayer ignored) [INFO ] KivyMD: v0.104.1 [INFO ] Window: Provider: sdl2 [INFO ] GL: Using the \"OpenGL ES 2\" graphics system [INFO ] GL: Backend used <sdl2> [INFO ] GL: OpenGL version <b'OpenGL ES 3.0 (MuMu GL, Powered by ANGLE 2.1.0.axccacxx)'> [INFO ] GL: OpenGL vendor <b'NetEase'> [INFO ] GL: OpenGL renderer <b'MuMu GL (NVIDIA GeForce GTX 1660 SUPER Direct3D11 vs_5_0 ps_5_0)'> [INFO ] GL: OpenGL parsed version: 3, 0 [INFO ] GL: Texture max size <16384> [INFO ] GL: Texture max units <16> [INFO ] Window: auto add sdl2 input provider [INFO ] Window: virtual keyboard not allowed, single mode, not docked [INFO ] Text: Provider: sdl2 [INFO ] GL: NPOT texture support is available [WARNING] Base: Unknown <android> provider [INFO ] Base: Start application main loop \u7a0b\u5e8f\u6ca1\u6709\u95ea\u9000\u9000\u5207\u65e5\u5fd7\u8bb0\u5f55\u57fa\u672c\u6ca1\u6709\u95ee\u9898\u3002 2.\u57fa\u4e8e\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b\u9879\u76ee\u7684buildozer\u5b89\u5353\u6253\u5305\u53caadb\u5b89\u5353\u8c03\u8bd5 1.\u57fa\u4e8e\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b\u9879\u76ee\u7684buildozer\u5b89\u5353\u6253\u5305\u53ca\u9879\u76ee\u6f14\u793a \u667a\u80fd\u8f66\u9053\u7ebf\u9879\u76ee\u7684\u5b89\u5353\u6253\u5305\u4e0e\u4e0a\u4e00\u8282\u4e2d\u4ecb\u7ecd\u7684\u5b8c\u5168\u4e00\u81f4\uff0c\u8fd9\u91cc\u4ec5\u628a buildozer.spec \u6587\u4ef6\u7684\u5185\u5bb9\u505a\u8be6\u7ec6\u7684\u4ecb\u7ecd,\u5176\u5728\u5b89\u5353\u624b\u673a\u4e0a\u7684\u8fd0\u884c\u53ef\u4ee5\u53c2\u8003\u7b2c4\u7ae0\u6216\u6211\u4eec\u7684\u5728\u7ebf\u8bfe\u7a0b\u6f14\u793a [app] # (str) Title of your application title = \u8f66\u9053\u7ebf\u68c0\u6d4b # (str) Package name package.name = myapp # (str) Package domain (needed for android/ios packaging) package.domain = com.xujing # (str) Source code where the main.py live source.dir = . # (list) Source files to include (let empty to include all the files) source.include_exts = py,png,jpg,kv,atlas,ico,ttf # (list) List of inclusions using pattern matching #source.include_patterns = assets/*,images/*.png source.include_patterns = static/* # (list) Source files to exclude (let empty to not exclude anything) #source.exclude_exts = spec # (list) List of directory to exclude (let empty to not exclude anything) #source.exclude_dirs = tests, bin, venv # (list) List of exclusions using pattern matching #source.exclude_patterns = license,images/*/*.jpg # (str) Application versioning (method 1) version = 1.0.0 # (str) Application versioning (method 2) # version.regex = __version__ = ['\"](.*)['\"] # version.filename = %(source.dir)s/main.py # (list) Application requirements # comma separated e.g. requirements = sqlite3,kivy requirements = python3,kivy,numpy,opencv # (str) Custom source folders for requirements # Sets custom source for any requirements with recipes # requirements.source.kivy = ../../kivy # (str) Presplash of the application #presplash.filename = %(source.dir)s/data/presplash.png # (str) Icon of the application icon.filename = %(source.dir)s/static/icon.png # (str) Supported orientation (one of landscape, sensorLandscape, portrait or all) orientation = portrait # (list) List of service to declare #services = NAME:ENTRYPOINT_TO_PY,NAME2:ENTRYPOINT2_TO_PY # # OSX Specific # # # author = \u00a9 Copyright Info # change the major version of python used by the app osx.python_version = 3 # Kivy version to use osx.kivy_version = 1.9.1 # # Android specific # # (bool) Indicate if the application should be fullscreen or not fullscreen = 0 # (string) Presplash background color (for new android toolchain) # Supported formats are: #RRGGBB #AARRGGBB or one of the following names: # red, blue, green, black, white, gray, cyan, magenta, yellow, lightgray, # darkgray, grey, lightgrey, darkgrey, aqua, fuchsia, lime, maroon, navy, # olive, purple, silver, teal. #android.presplash_color = #FFFFFF # (list) Permissions android.permissions = INTERNET,CAMERA,READ_EXTERNAL_STORAGE,WRITE_EXTERNAL_STORAGE # (int) Target Android API, should be as high as possible. #android.api = 27 # (int) Minimum API your APK will support. #android.minapi = 21 # (int) Android SDK version to use #android.sdk = 20 # (str) Android NDK version to use #android.ndk = 19b # (int) Android NDK API to use. This is the minimum API your app will support, it should usually match android.minapi. #android.ndk_api = 21 # (bool) Use --private data storage (True) or --dir public storage (False) #android.private_storage = True # (str) Android NDK directory (if empty, it will be automatically downloaded.) #android.ndk_path = # (str) Android SDK directory (if empty, it will be automatically downloaded.) #android.sdk_path = # (str) ANT directory (if empty, it will be automatically downloaded.) #android.ant_path = # (bool) If True, then skip trying to update the Android sdk # This can be useful to avoid excess Internet downloads or save time # when an update is due and you just want to test/build your package # android.skip_update = False # (bool) If True, then automatically accept SDK license # agreements. This is intended for automation only. If set to False, # the default, you will be shown the license when first running # buildozer. # android.accept_sdk_license = False # (str) Android entry point, default is ok for Kivy-based app #android.entrypoint = org.renpy.android.PythonActivity # (str) Android app theme, default is ok for Kivy-based app # android.apptheme = \"@android:style/Theme.NoTitleBar\" # (list) Pattern to whitelist for the whole project #android.whitelist = # (str) Path to a custom whitelist file #android.whitelist_src = # (str) Path to a custom blacklist file #android.blacklist_src = # (list) List of Java .jar files to add to the libs so that pyjnius can access # their classes. Don't add jars that you do not need, since extra jars can slow # down the build process. Allows wildcards matching, for example: # OUYA-ODK/libs/*.jar #android.add_jars = foo.jar,bar.jar,path/to/more/*.jar # (list) List of Java files to add to the android project (can be java or a # directory containing the files) #android.add_src = # (list) Android AAR archives to add (currently works only with sdl2_gradle # bootstrap) #android.add_aars = # (list) Gradle dependencies to add (currently works only with sdl2_gradle # bootstrap) #android.gradle_dependencies = # (list) add java compile options # this can for example be necessary when importing certain java libraries using the 'android.gradle_dependencies' option # see https://developer.android.com/studio/write/java8-support for further information # android.add_compile_options = \"sourceCompatibility = 1.8\", \"targetCompatibility = 1.8\" # (list) Gradle repositories to add {can be necessary for some android.gradle_dependencies} # please enclose in double quotes # e.g. android.gradle_repositories = \"maven { url 'https://kotlin.bintray.com/ktor' }\" #android.add_gradle_repositories = # (list) packaging options to add # see https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.PackagingOptions.html # can be necessary to solve conflicts in gradle_dependencies # please enclose in double quotes # e.g. android.add_packaging_options = \"exclude 'META-INF/common.kotlin_module'\", \"exclude 'META-INF/*.kotlin_module'\" #android.add_gradle_repositories = # (list) Java classes to add as activities to the manifest. #android.add_activities = com.example.ExampleActivity # (str) OUYA Console category. Should be one of GAME or APP # If you leave this blank, OUYA support will not be enabled #android.ouya.category = GAME # (str) Filename of OUYA Console icon. It must be a 732x412 png image. #android.ouya.icon.filename = %(source.dir)s/data/ouya_icon.png # (str) XML file to include as an intent filters in <activity> tag #android.manifest.intent_filters = # (str) launchMode to set for the main activity #android.manifest.launch_mode = standard # (list) Android additional libraries to copy into libs/armeabi #android.add_libs_armeabi = libs/android/*.so #android.add_libs_armeabi_v7a = libs/android-v7/*.so #android.add_libs_arm64_v8a = libs/android-v8/*.so #android.add_libs_x86 = libs/android-x86/*.so #android.add_libs_mips = libs/android-mips/*.so # (bool) Indicate whether the screen should stay on # Don't forget to add the WAKE_LOCK permission if you set this to True #android.wakelock = False # (list) Android application meta-data to set (key=value format) #android.meta_data = # (list) Android library project to add (will be added in the # project.properties automatically.) #android.library_references = # (list) Android shared libraries which will be added to AndroidManifest.xml using <uses-library> tag #android.uses_library = # (str) Android logcat filters to use #android.logcat_filters = *:S python:D # (bool) Copy library instead of making a libpymodules.so #android.copy_libs = 1 # (str) The Android arch to build for, choices: armeabi-v7a, arm64-v8a, x86, x86_64 android.arch = armeabi-v7a # (int) overrides automatic versionCode computation (used in build.gradle) # this is not the same as app version and should only be edited if you know what you're doing # android.numeric_version = 1 # # Python for android (p4a) specific # # (str) python-for-android fork to use, defaults to upstream (kivy) #p4a.fork = kivy # (str) python-for-android branch to use, defaults to master #p4a.branch = master # (str) python-for-android git clone directory (if empty, it will be automatically cloned from github) #p4a.source_dir = # (str) The directory in which python-for-android should look for your own build recipes (if any) #p4a.local_recipes = # (str) Filename to the hook for p4a #p4a.hook = # (str) Bootstrap to use for android builds # p4a.bootstrap = sdl2 # (int) port number to specify an explicit --port= p4a argument (eg for bootstrap flask) #p4a.port = # # iOS specific # # (str) Path to a custom kivy-ios folder #ios.kivy_ios_dir = ../kivy-ios # Alternately, specify the URL and branch of a git checkout: ios.kivy_ios_url = https://github.com/kivy/kivy-ios ios.kivy_ios_branch = master # Another platform dependency: ios-deploy # Uncomment to use a custom checkout #ios.ios_deploy_dir = ../ios_deploy # Or specify URL and branch ios.ios_deploy_url = https://github.com/phonegap/ios-deploy ios.ios_deploy_branch = 1.10.0 # (bool) Whether or not to sign the code ios.codesign.allowed = false # (str) Name of the certificate to use for signing the debug version # Get a list of available identities: buildozer ios list_identities #ios.codesign.debug = \"iPhone Developer: <lastname> <firstname> (<hexstring>)\" # (str) Name of the certificate to use for signing the release version #ios.codesign.release = %(ios.codesign.debug)s [buildozer] # (int) Log level (0 = error only, 1 = info, 2 = debug (with command output)) log_level = 2 # (int) Display warning if buildozer is run as root (0 = False, 1 = True) warn_on_root = 1 # (str) Path to build artifact storage, absolute or relative to spec file # build_dir = ./.buildozer # (str) Path to build output (i.e. .apk, .ipa) storage # bin_dir = ./bin # ----------------------------------------------------------------------------- # List as sections # # You can define all the \"list\" as [section:key]. # Each line will be considered as a option to the list. # Let's take [app] / source.exclude_patterns. # Instead of doing: # #[app] #source.exclude_patterns = license,data/audio/*.wav,data/images/original/* # # This can be translated into: # #[app:source.exclude_patterns] #license #data/audio/*.wav #data/images/original/* # # ----------------------------------------------------------------------------- # Profiles # # You can extend section / key with a profile # For example, you want to deploy a demo version of your application without # HD content. You could first change the title to add \"(demo)\" in the name # and extend the excluded directories to remove the HD content. # #[app@demo] #title = My Application (demo) # #[app:source.exclude_patterns@demo] #images/hd/* # # Then, invoke the command line with the \"demo\" profile: # #buildozer --profile demo android debug 3.\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\u7684\u4e00\u952e\u73b0\u5b9e\u8f6c\u6362\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fb\u9879\u76ee(\u57fa\u4e8eKivymd)buildozer\u5b89\u5353\u6253\u5305\u53caadb\u5b89\u5353\u8c03\u8bd5 \u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\u7684\u4e00\u952e\u73b0\u5b9e\u8f6c\u6362\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fb\u9879\u76ee\u7684\u5b89\u5353\u6253\u5305\u4e0e\u4e0a\u4e00\u8282\u4e2d\u4ecb\u7ecd\u7684\u5b8c\u5168\u4e00\u81f4\uff0c\u8fd9\u91cc\u4ec5\u628a buildozer.spec \u6587\u4ef6\u7684\u5185\u5bb9\u505a\u8be6\u7ec6\u7684\u4ecb\u7ecd,\u5176\u5728\u5b89\u5353\u624b\u673a\u4e0a\u7684\u8fd0\u884c\u53ef\u4ee5\u53c2\u8003\u7b2c5\u7ae0\u6216\u6211\u4eec\u7684\u5728\u7ebf\u8bfe\u7a0b\u6f14\u793a [app] # (str) Title of your application title = GAN\u4e8c\u6b21\u5143 # (str) Package name package.name = ganapp # (str) Package domain (needed for android/ios packaging) package.domain = com.xujing # (str) Source code where the main.py live source.dir = . # (list) Source files to include (let empty to include all the files) source.include_exts = py,png,jpg,kv,atlas,ttf,ico,gif # (list) List of inclusions using pattern matching #source.include_patterns = assets/*,images/*.png source.include_patterns = static/* # (list) Source files to exclude (let empty to not exclude anything) #source.exclude_exts = spec # (list) List of directory to exclude (let empty to not exclude anything) #source.exclude_dirs = tests, bin, venv # (list) List of exclusions using pattern matching #source.exclude_patterns = license,images/*/*.jpg # (str) Application versioning (method 1) version = 1.0.0 # (str) Application versioning (method 2) # version.regex = __version__ = ['\"](.*)['\"] # version.filename = %(source.dir)s/main.py # (list) Application requirements # comma separated e.g. requirements = sqlite3,kivy requirements = python3==3.7.5,hostpython3==3.7.5,kivy,kivymd,opencv,numpy,requests,Pillow,urllib3,chardet,idna # (str) Custom source folders for requirements # Sets custom source for any requirements with recipes # requirements.source.kivy = ../../kivy # (str) Presplash of the application #presplash.filename = %(source.dir)s/data/presplash.png # (str) Icon of the application icon.filename = %(source.dir)s/static/icon.png # (str) Supported orientation (one of landscape, sensorLandscape, portrait or all) orientation = portrait # (list) List of service to declare #services = NAME:ENTRYPOINT_TO_PY,NAME2:ENTRYPOINT2_TO_PY # # OSX Specific # # # author = \u00a9 Copyright Info # change the major version of python used by the app osx.python_version = 3 # Kivy version to use osx.kivy_version = 1.9.1 # # Android specific # # (bool) Indicate if the application should be fullscreen or not fullscreen = 0 # (string) Presplash background color (for new android toolchain) # Supported formats are: #RRGGBB #AARRGGBB or one of the following names: # red, blue, green, black, white, gray, cyan, magenta, yellow, lightgray, # darkgray, grey, lightgrey, darkgrey, aqua, fuchsia, lime, maroon, navy, # olive, purple, silver, teal. #android.presplash_color = #FFFFFF # (list) Permissions #android.permissions = INTERNET, # (int) Target Android API, should be as high as possible. #android.api = 27 # (int) Minimum API your APK will support. #android.minapi = 21 # (int) Android SDK version to use #android.sdk = 20 # (str) Android NDK version to use #android.ndk = 19b # (int) Android NDK API to use. This is the minimum API your app will support, it should usually match android.minapi. #android.ndk_api = 21 # (bool) Use --private data storage (True) or --dir public storage (False) #android.private_storage = True # (str) Android NDK directory (if empty, it will be automatically downloaded.) #android.ndk_path = # (str) Android SDK directory (if empty, it will be automatically downloaded.) #android.sdk_path = # (str) ANT directory (if empty, it will be automatically downloaded.) #android.ant_path = # (bool) If True, then skip trying to update the Android sdk # This can be useful to avoid excess Internet downloads or save time # when an update is due and you just want to test/build your package # android.skip_update = False # (bool) If True, then automatically accept SDK license # agreements. This is intended for automation only. If set to False, # the default, you will be shown the license when first running # buildozer. # android.accept_sdk_license = False # (str) Android entry point, default is ok for Kivy-based app #android.entrypoint = org.renpy.android.PythonActivity # (str) Android app theme, default is ok for Kivy-based app # android.apptheme = \"@android:style/Theme.NoTitleBar\" # (list) Pattern to whitelist for the whole project #android.whitelist = # (str) Path to a custom whitelist file #android.whitelist_src = # (str) Path to a custom blacklist file #android.blacklist_src = # (list) List of Java .jar files to add to the libs so that pyjnius can access # their classes. Don't add jars that you do not need, since extra jars can slow # down the build process. Allows wildcards matching, for example: # OUYA-ODK/libs/*.jar #android.add_jars = foo.jar,bar.jar,path/to/more/*.jar # (list) List of Java files to add to the android project (can be java or a # directory containing the files) #android.add_src = # (list) Android AAR archives to add (currently works only with sdl2_gradle # bootstrap) #android.add_aars = # (list) Gradle dependencies to add (currently works only with sdl2_gradle # bootstrap) #android.gradle_dependencies = # (list) add java compile options # this can for example be necessary when importing certain java libraries using the 'android.gradle_dependencies' option # see https://developer.android.com/studio/write/java8-support for further information # android.add_compile_options = \"sourceCompatibility = 1.8\", \"targetCompatibility = 1.8\" # (list) Gradle repositories to add {can be necessary for some android.gradle_dependencies} # please enclose in double quotes # e.g. android.gradle_repositories = \"maven { url 'https://kotlin.bintray.com/ktor' }\" #android.add_gradle_repositories = # (list) packaging options to add # see https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.PackagingOptions.html # can be necessary to solve conflicts in gradle_dependencies # please enclose in double quotes # e.g. android.add_packaging_options = \"exclude 'META-INF/common.kotlin_module'\", \"exclude 'META-INF/*.kotlin_module'\" #android.add_gradle_repositories = # (list) Java classes to add as activities to the manifest. #android.add_activities = com.example.ExampleActivity # (str) OUYA Console category. Should be one of GAME or APP # If you leave this blank, OUYA support will not be enabled #android.ouya.category = GAME # (str) Filename of OUYA Console icon. It must be a 732x412 png image. #android.ouya.icon.filename = %(source.dir)s/data/ouya_icon.png # (str) XML file to include as an intent filters in <activity> tag #android.manifest.intent_filters = # (str) launchMode to set for the main activity #android.manifest.launch_mode = standard # (list) Android additional libraries to copy into libs/armeabi #android.add_libs_armeabi = libs/android/*.so #android.add_libs_armeabi_v7a = libs/android-v7/*.so #android.add_libs_arm64_v8a = libs/android-v8/*.so #android.add_libs_x86 = libs/android-x86/*.so #android.add_libs_mips = libs/android-mips/*.so # (bool) Indicate whether the screen should stay on # Don't forget to add the WAKE_LOCK permission if you set this to True #android.wakelock = False # (list) Android application meta-data to set (key=value format) #android.meta_data = # (list) Android library project to add (will be added in the # project.properties automatically.) #android.library_references = # (list) Android shared libraries which will be added to AndroidManifest.xml using <uses-library> tag #android.uses_library = # (str) Android logcat filters to use #android.logcat_filters = *:S python:D # (bool) Copy library instead of making a libpymodules.so #android.copy_libs = 1 # (str) The Android arch to build for, choices: armeabi-v7a, arm64-v8a, x86, x86_64 android.arch = armeabi-v7a # (int) overrides automatic versionCode computation (used in build.gradle) # this is not the same as app version and should only be edited if you know what you're doing # android.numeric_version = 1 # # Python for android (p4a) specific # # (str) python-for-android fork to use, defaults to upstream (kivy) #p4a.fork = kivy # (str) python-for-android branch to use, defaults to master #p4a.branch = master # (str) python-for-android git clone directory (if empty, it will be automatically cloned from github) #p4a.source_dir = # (str) The directory in which python-for-android should look for your own build recipes (if any) #p4a.local_recipes = # (str) Filename to the hook for p4a #p4a.hook = # (str) Bootstrap to use for android builds # p4a.bootstrap = sdl2 # (int) port number to specify an explicit --port= p4a argument (eg for bootstrap flask) #p4a.port = # # iOS specific # # (str) Path to a custom kivy-ios folder #ios.kivy_ios_dir = ../kivy-ios # Alternately, specify the URL and branch of a git checkout: ios.kivy_ios_url = https://github.com/kivy/kivy-ios ios.kivy_ios_branch = master # Another platform dependency: ios-deploy # Uncomment to use a custom checkout #ios.ios_deploy_dir = ../ios_deploy # Or specify URL and branch ios.ios_deploy_url = https://github.com/phonegap/ios-deploy ios.ios_deploy_branch = 1.10.0 # (bool) Whether or not to sign the code ios.codesign.allowed = false # (str) Name of the certificate to use for signing the debug version # Get a list of available identities: buildozer ios list_identities #ios.codesign.debug = \"iPhone Developer: <lastname> <firstname> (<hexstring>)\" # (str) Name of the certificate to use for signing the release version #ios.codesign.release = %(ios.codesign.debug)s [buildozer] # (int) Log level (0 = error only, 1 = info, 2 = debug (with command output)) log_level = 2 # (int) Display warning if buildozer is run as root (0 = False, 1 = True) warn_on_root = 1 # (str) Path to build artifact storage, absolute or relative to spec file # build_dir = ./.buildozer # (str) Path to build output (i.e. .apk, .ipa) storage # bin_dir = ./bin # ----------------------------------------------------------------------------- # List as sections # # You can define all the \"list\" as [section:key]. # Each line will be considered as a option to the list. # Let's take [app] / source.exclude_patterns. # Instead of doing: # #[app] #source.exclude_patterns = license,data/audio/*.wav,data/images/original/* # # This can be translated into: # #[app:source.exclude_patterns] #license #data/audio/*.wav #data/images/original/* # # ----------------------------------------------------------------------------- # Profiles # # You can extend section / key with a profile # For example, you want to deploy a demo version of your application without # HD content. You could first change the title to add \"(demo)\" in the name # and extend the excluded directories to remove the HD content. # #[app@demo] #title = My Application (demo) # #[app:source.exclude_patterns@demo] #images/hd/* # # Then, invoke the command line with the \"demo\" profile: # #buildozer --profile demo android debug \u5173\u4e8e\u6253\u5305release\u7248\u672c\u7684android apk, \u53ef\u4ee5\u53c2\u8003 https://github.com/kivy/kivy/wiki/Creating-a-Release-APK","title":"\u7b2c\u4e5d\u7ae0 buildozer Android\u6253\u5305\u57fa\u4e8ekivymd\u7684\u6d82\u9e26\u753b\u677f\u9879\u76ee"},{"location":"chapter9/#buildozer-android","text":"\u672c\u7ae0\u6211\u4eec\u5c06\u4f1a\u5728Linux\u73af\u5883\u4e0b\u901a\u8fc7buildozer\u628a\u5199\u597d\u7684\u7a0b\u5e8f\u6253\u5305\u4e3a\u5728Android\u73af\u5883\u4e0b\u53ef\u6267\u884c\u7684\u6587\u4ef6\uff0c\u5173\u4e8ebuildozer\u7684\u5b89\u88c5\u53ef\u4ee5\u53c2\u8003\u5b98\u7f51\u7684\u4ecb\u7ecd\uff0c\u5982\u679c\u8bfb\u8005\u9700\u8981\u6211\u4eec\u5c06\u5171\u4eab\u6211\u4eec\u914d\u7f6e\u597d\u7684buildozer\u7684\u865a\u62df\u673a\u73af\u5883\uff0c\u8fd9\u6837\u8bfb\u8005\u5c31\u514d\u4e8e\u91cd\u65b0\u914d\u7f6e\u73af\u5883\uff0c\u76f4\u63a5\u53ef\u4ee5\u6253\u5305\uff0c\u4f46\u662f\u6211\u4eec\u5efa\u8bae\u8bfb\u8005\u81ea\u5df1\u642d\u5efa\u73af\u5883\uff0c\u8fd9\u6837\u5bf9\u5b89\u5353\u6253\u5305\u4f1a\u6709\u66f4\u5168\u9762\u7684\u8ba4\u8bc6\u3002","title":"\u7b2c\u4e5d\u7ae0 buildozer Android\u6253\u5305"},{"location":"chapter9/#1kivymdbuildozeradb","text":"","title":"1.\u57fa\u4e8ekivymd\u7684\u6d82\u9e26\u753b\u677f\u7684buildozer\u6253\u5305\u53ca\u5728adb\u4e0b\u8fdb\u884c\u5b89\u5353\u8c03\u8bd5"},{"location":"chapter9/#1kivymdbuildozer","text":"\u914d\u7f6e\u597d\u73af\u5883\u540e\uff0c\u901a\u8fc7cd\u547d\u4ee4\u8fdb\u5165\u9700\u8981\u6253\u5305\u7684\u9879\u76ee\u7684\u540c\u7ea7\u76ee\u5f55\u4e2d\uff0c\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u751f\u6210buildozer.spec\u914d\u7f6e\u6587\u4ef6\uff1a buildozer init \u7136\u540e\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u7f16\u8f91\u914d\u7f6e\u6587\u4ef6\uff1a [app] # (str) Title of your application title = \u6d82\u9e26\u753b\u677fmd #<----------------\u5e94\u7528\u540d\u79f0 # (str) Package name package.name = paintmd # (str) Package domain (needed for android/ios packaging) package.domain = com.xujing # <---------------\u57df\u540d # (str) Source code where the main.py live source.dir = . # (list) Source files to include (let empty to include all the files) source.include_exts = py,png,jpg,kv,atlas,ico,ttf # <--------------\u9700\u8981\u6253\u5305\u8fdb\u6765\u7684\u6587\u4ef6\u7684\u6269\u5c55\u540d # (list) List of inclusions using pattern matching #source.include_patterns = assets/*,images/*.png # (list) Source files to exclude (let empty to not exclude anything) #source.exclude_exts = spec # (list) List of directory to exclude (let empty to not exclude anything) #source.exclude_dirs = tests, bin, venv # (list) List of exclusions using pattern matching #source.exclude_patterns = license,images/*/*.jpg # (str) Application versioning (method 1) version = 1.0.0 # (str) Application versioning (method 2) # version.regex = __version__ = ['\"](.*)['\"] # version.filename = %(source.dir)s/main.py # (list) Application requirements # comma separated e.g. requirements = sqlite3,kivy requirements = python3==3.7.5,hostpython3==3.7.5,kivy,kivymd #<----------\u5e94\u7528\u4f9d\u8d56\u5305\uff0c\u975e\u5e38\u91cd\u8981\uff0c\u5927\u90e8\u5206\u95ea\u9000\u90fd\u662f\u56e0\u4e3a\u5177\u4f53\u7684\u4f9d\u8d56\u5305\u6ca1\u6709\u6253\u8fdb\u6765 # (str) Custom source folders for requirements # Sets custom source for any requirements with recipes # requirements.source.kivy = ../../kivy # (str) Presplash of the application #presplash.filename = %(source.dir)s/data/presplash.png # (str) Icon of the application #icon.filename = %(source.dir)s/data/icon.png icon.filename = icon.png #<--------------------\u5e94\u7528\u7684\u56fe\u6807 # (str) Supported orientation (one of landscape, sensorLandscape, portrait or all) orientation = portrait # (list) List of service to declare #services = NAME:ENTRYPOINT_TO_PY,NAME2:ENTRYPOINT2_TO_PY # # OSX Specific # # # author = \u00a9 Copyright Info # change the major version of python used by the app osx.python_version = 3 # Kivy version to use osx.kivy_version = 1.9.1 # # Android specific # # (bool) Indicate if the application should be fullscreen or not fullscreen = 0 # <---------------\u5168\u5c4f\u663e\u793a1\uff0c\u975e\u5168\u5c4f0 # (string) Presplash background color (for new android toolchain) # Supported formats are: #RRGGBB #AARRGGBB or one of the following names: # red, blue, green, black, white, gray, cyan, magenta, yellow, lightgray, # darkgray, grey, lightgrey, darkgrey, aqua, fuchsia, lime, maroon, navy, # olive, purple, silver, teal. #android.presplash_color = #FFFFFF # (list) Permissions #android.permissions = INTERNET # <----------- \u5b89\u5353\u7684\u6743\u9650\uff0c\u8fd9\u4e2a\u4e5f\u9700\u8981\u6839\u636e\u81ea\u5df1\u7684\u5e94\u7528\u53bb\u8bbe\u7f6e # (int) Target Android API, should be as high as possible. #android.api = 27 # (int) Minimum API your APK will support. #android.minapi = 21 # (int) Android SDK version to use #android.sdk = 20 # (str) Android NDK version to use #android.ndk = 19b # (int) Android NDK API to use. This is the minimum API your app will support, it should usually match android.minapi. #android.ndk_api = 21 # (bool) Use --private data storage (True) or --dir public storage (False) #android.private_storage = True # (str) Android NDK directory (if empty, it will be automatically downloaded.) #android.ndk_path = # (str) Android SDK directory (if empty, it will be automatically downloaded.) #android.sdk_path = # (str) ANT directory (if empty, it will be automatically downloaded.) #android.ant_path = # (bool) If True, then skip trying to update the Android sdk # This can be useful to avoid excess Internet downloads or save time # when an update is due and you just want to test/build your package # android.skip_update = False # (bool) If True, then automatically accept SDK license # agreements. This is intended for automation only. If set to False, # the default, you will be shown the license when first running # buildozer. # android.accept_sdk_license = False # (str) Android entry point, default is ok for Kivy-based app #android.entrypoint = org.renpy.android.PythonActivity # (str) Android app theme, default is ok for Kivy-based app # android.apptheme = \"@android:style/Theme.NoTitleBar\" # (list) Pattern to whitelist for the whole project #android.whitelist = # (str) Path to a custom whitelist file #android.whitelist_src = # (str) Path to a custom blacklist file #android.blacklist_src = # (list) List of Java .jar files to add to the libs so that pyjnius can access # their classes. Don't add jars that you do not need, since extra jars can slow # down the build process. Allows wildcards matching, for example: # OUYA-ODK/libs/*.jar #android.add_jars = foo.jar,bar.jar,path/to/more/*.jar # (list) List of Java files to add to the android project (can be java or a # directory containing the files) #android.add_src = # (list) Android AAR archives to add (currently works only with sdl2_gradle # bootstrap) #android.add_aars = # (list) Gradle dependencies to add (currently works only with sdl2_gradle # bootstrap) #android.gradle_dependencies = # (list) add java compile options # this can for example be necessary when importing certain java libraries using the 'android.gradle_dependencies' option # see https://developer.android.com/studio/write/java8-support for further information # android.add_compile_options = \"sourceCompatibility = 1.8\", \"targetCompatibility = 1.8\" # (list) Gradle repositories to add {can be necessary for some android.gradle_dependencies} # please enclose in double quotes # e.g. android.gradle_repositories = \"maven { url 'https://kotlin.bintray.com/ktor' }\" #android.add_gradle_repositories = # (list) packaging options to add # see https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.PackagingOptions.html # can be necessary to solve conflicts in gradle_dependencies # please enclose in double quotes # e.g. android.add_packaging_options = \"exclude 'META-INF/common.kotlin_module'\", \"exclude 'META-INF/*.kotlin_module'\" #android.add_gradle_repositories = # (list) Java classes to add as activities to the manifest. #android.add_activities = com.example.ExampleActivity # (str) OUYA Console category. Should be one of GAME or APP # If you leave this blank, OUYA support will not be enabled #android.ouya.category = GAME # (str) Filename of OUYA Console icon. It must be a 732x412 png image. #android.ouya.icon.filename = %(source.dir)s/data/ouya_icon.png # (str) XML file to include as an intent filters in <activity> tag #android.manifest.intent_filters = # (str) launchMode to set for the main activity #android.manifest.launch_mode = standard # (list) Android additional libraries to copy into libs/armeabi #android.add_libs_armeabi = libs/android/*.so #android.add_libs_armeabi_v7a = libs/android-v7/*.so #android.add_libs_arm64_v8a = libs/android-v8/*.so #android.add_libs_x86 = libs/android-x86/*.so #android.add_libs_mips = libs/android-mips/*.so # (bool) Indicate whether the screen should stay on # Don't forget to add the WAKE_LOCK permission if you set this to True #android.wakelock = False # (list) Android application meta-data to set (key=value format) #android.meta_data = # (list) Android library project to add (will be added in the # project.properties automatically.) #android.library_references = # (list) Android shared libraries which will be added to AndroidManifest.xml using <uses-library> tag #android.uses_library = # (str) Android logcat filters to use #android.logcat_filters = *:S python:D # (bool) Copy library instead of making a libpymodules.so #android.copy_libs = 1 # (str) The Android arch to build for, choices: armeabi-v7a, arm64-v8a, x86, x86_64 android.arch = armeabi-v7a # (int) overrides automatic versionCode computation (used in build.gradle) # this is not the same as app version and should only be edited if you know what you're doing # android.numeric_version = 1 # # Python for android (p4a) specific # # (str) python-for-android fork to use, defaults to upstream (kivy) #p4a.fork = kivy # (str) python-for-android branch to use, defaults to master #p4a.branch = master # (str) python-for-android git clone directory (if empty, it will be automatically cloned from github) #p4a.source_dir = # (str) The directory in which python-for-android should look for your own build recipes (if any) #p4a.local_recipes = # (str) Filename to the hook for p4a #p4a.hook = # (str) Bootstrap to use for android builds # p4a.bootstrap = sdl2 # (int) port number to specify an explicit --port= p4a argument (eg for bootstrap flask) #p4a.port = # # iOS specific # # (str) Path to a custom kivy-ios folder #ios.kivy_ios_dir = ../kivy-ios # Alternately, specify the URL and branch of a git checkout: ios.kivy_ios_url = https://github.com/kivy/kivy-ios ios.kivy_ios_branch = master # Another platform dependency: ios-deploy # Uncomment to use a custom checkout #ios.ios_deploy_dir = ../ios_deploy # Or specify URL and branch ios.ios_deploy_url = https://github.com/phonegap/ios-deploy ios.ios_deploy_branch = 1.10.0 # (bool) Whether or not to sign the code ios.codesign.allowed = false # (str) Name of the certificate to use for signing the debug version # Get a list of available identities: buildozer ios list_identities #ios.codesign.debug = \"iPhone Developer: <lastname> <firstname> (<hexstring>)\" # (str) Name of the certificate to use for signing the release version #ios.codesign.release = %(ios.codesign.debug)s [buildozer] # (int) Log level (0 = error only, 1 = info, 2 = debug (with command output)) log_level = 2 # (int) Display warning if buildozer is run as root (0 = False, 1 = True) warn_on_root = 1 # (str) Path to build artifact storage, absolute or relative to spec file # build_dir = ./.buildozer # (str) Path to build output (i.e. .apk, .ipa) storage # bin_dir = ./bin # ----------------------------------------------------------------------------- # List as sections # # You can define all the \"list\" as [section:key]. # Each line will be considered as a option to the list. # Let's take [app] / source.exclude_patterns. # Instead of doing: # #[app] #source.exclude_patterns = license,data/audio/*.wav,data/images/original/* # # This can be translated into: # #[app:source.exclude_patterns] #license #data/audio/*.wav #data/images/original/* # # ----------------------------------------------------------------------------- # Profiles # # You can extend section / key with a profile # For example, you want to deploy a demo version of your application without # HD content. You could first change the title to add \"(demo)\" in the name # and extend the excluded directories to remove the HD content. # #[app@demo] #title = My Application (demo) # #[app:source.exclude_patterns@demo] #images/hd/* # # Then, invoke the command line with the \"demo\" profile: # #buildozer --profile demo android debug \u5728\u9879\u76ee\u4e2d\u6dfb\u52a0\u7684\u4f9d\u8d56\u5305\u4e00\u5b9a\u8981\u5199\u5230requirements\u4e2d\uff0c\u518d\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u751f\u6210\u4e00\u4e2adebug\u7248\u672c\u7684apk\u6587\u4ef6 buildozer -v android debug \u9996\u6b21\u6253\u5305\u8fc7\u7a0b\u4f1a\u5f88\u6162\uff0c\u8bf7\u8010\u5fc3\u7b49\u5f85\u4fdd\u6301\u7f51\u7edc\u7545\u901a\uff0c\u76f4\u5230\u51fa\u73b0\u5982\u4e0b\u7684\u754c\u9762\uff0c\u6253\u5305\u5b8c\u6210\uff1a [INFO]: Detected highest available build tools version to be 30.0.0 [DEBUG]: -> running gradlew assembleDebug [DEBUG]: [DEBUG]: Deprecated Gradle features were used in this build, making it incompatible with Gradle 7.0. [DEBUG]: Use '--warning-mode all' to show the individual deprecation warnings. [DEBUG]: See https://docs.gradle.org/6.4.1/userguide/command_line_interface.html#sec:command_line_warnings [DEBUG]: [DEBUG]: BUILD SUCCESSFUL in 2s [DEBUG]: 27 actionable tasks: 4 executed, 23 up-to-date [INFO]: <- directory context /home/kivymd/Desktop/paintmd/.buildozer/android/platform/python-for-android [INFO]: Of the existing distributions, the following meet the given requirements: [INFO]: paintmd: min API 21, includes recipes (hostpython3, libffi, openssl, sdl2_image, sdl2_mixer, sdl2_ttf, sqlite3, python3, sdl2, setuptools, six, pyjnius, android, kivy, kivymd, certifi), built for archs (armeabi-v7a) [INFO]: paintmd has compatible recipes, using this one [INFO]: # Copying android package to current directory [INFO]: # Android package filename not found in build output. Guessing... [INFO]: # Found android package file: /home/kivymd/Desktop/paintmd/.buildozer/android/platform/build-armeabi-v7a/dists/paintmd__armeabi-v7a/build/outputs/apk/debug/paintmd__armeabi-v7a-debug.apk [INFO]: # Add version number to android package [INFO]: # Android package renamed to paintmd__armeabi-v7a-debug-1.0.0-.apk [DEBUG]: -> running cp /home/kivymd/Desktop/paintmd/.buildozer/android/platform/build-armeabi-v7a/dists/paintmd__armeabi-v7a/build/outputs/apk/debug/paintmd__armeabi-v7a-debug.apk paintmd__armeabi-v7a-debug-1.0.0-.apk WARNING: Received a --sdk argument, but this argument is deprecated and does nothing. No setup.py/pyproject.toml used, copying full private data into .apk. Applying Java source code patches... Applying patch: src/patches/SDLActivity.java.patch Warning: failed to apply patch (exit code 1), assuming it is already applied: src/patches/SDLActivity.java.patch # Android packaging done! # APK paintmd-1.0.0-armeabi-v7a-debug.apk available in the bin directory \u6253\u5305\u5b8c\u6210\u540e\u4f1a\u5728\u9879\u76ee\u7684bin\u76ee\u5f55\u4e0b\u751f\u6210\u4e00\u4e2aapk\u6587\u4ef6\uff0c\u66f4\u591a\u547d\u4ee4\u53ef\u4ee5\u53c2\u8003\u5b98\u65b9\u6587\u6863\u3002","title":"1.\u57fa\u4e8ekivymd\u7684\u6d82\u9e26\u753b\u677f\u7684buildozer\u6253\u5305\u53ca\u9879\u76ee\u6f14\u793a"},{"location":"chapter9/#2adb","text":"\u6253\u5305\u5b8c\u6210\u540e\u751f\u6210\u7684apk\u6587\u4ef6\u53ef\u4ee5\u5728\u5b89\u5353\u624b\u673a\u4e2d\u5b89\u88c5\u4f7f\u7528\uff0c\u5e76\u901a\u8fc7adb\u8c03\u8bd5\u3002 \u5728\u5b89\u5353\u6a21\u62df\u5668\u4e2d\u7684\u8fd0\u884c\uff1a \u5728\u5b89\u5353\u624b\u673a\u4e2d\u7684\u8fd0\u884c\uff1a \u5728adb\u4e0b\u7684\u8c03\u8bd5\u529f\u80fd\uff1a adb connect 127.0.0.1:7555 adb shell run-as com.xujing.paintmd cd files/app/.kivy/logs/ cat kivy_20-07-13_0.txt [INFO ] Logger: Record log in /data/user/0/com.xujing.paintmd/files/app/.kivy/logs/kivy_20-07-13_0.txt [WARNING] [Config ] Upgrading configuration in progress. [WARNING] [Config ] Older configuration version detected (0 instead of 21) [INFO ] Kivy: v1.11.1 [INFO ] Kivy: Installed at \"/data/user/0/com.xujing.paintmd/files/app/_python_bundle/site-packages/kivy/__init__.pyc\" [INFO ] Python: v3.7.5 (default, Jul 6 2020, 17:31:36) [Clang 8.0.2 (https://android.googlesource.com/toolchain/clang 40173bab62ec7462 [INFO ] Python: Interpreter at \"android_python\" [INFO ] Factory: 184 symbols loaded [INFO ] Image: Providers: img_tex, img_dds, img_sdl2, img_gif (img_pil, img_ffpyplayer ignored) [INFO ] KivyMD: v0.104.1 [INFO ] Window: Provider: sdl2 [INFO ] GL: Using the \"OpenGL ES 2\" graphics system [INFO ] GL: Backend used <sdl2> [INFO ] GL: OpenGL version <b'OpenGL ES 3.0 (MuMu GL, Powered by ANGLE 2.1.0.axccacxx)'> [INFO ] GL: OpenGL vendor <b'NetEase'> [INFO ] GL: OpenGL renderer <b'MuMu GL (NVIDIA GeForce GTX 1660 SUPER Direct3D11 vs_5_0 ps_5_0)'> [INFO ] GL: OpenGL parsed version: 3, 0 [INFO ] GL: Texture max size <16384> [INFO ] GL: Texture max units <16> [INFO ] Window: auto add sdl2 input provider [INFO ] Window: virtual keyboard not allowed, single mode, not docked [INFO ] Text: Provider: sdl2 [INFO ] GL: NPOT texture support is available [WARNING] Base: Unknown <android> provider [INFO ] Base: Start application main loop \u7a0b\u5e8f\u6ca1\u6709\u95ea\u9000\u9000\u5207\u65e5\u5fd7\u8bb0\u5f55\u57fa\u672c\u6ca1\u6709\u95ee\u9898\u3002","title":"2.adb \u5b89\u5353\u8c03\u8bd5"},{"location":"chapter9/#2buildozeradb","text":"","title":"2.\u57fa\u4e8e\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b\u9879\u76ee\u7684buildozer\u5b89\u5353\u6253\u5305\u53caadb\u5b89\u5353\u8c03\u8bd5"},{"location":"chapter9/#1buildozer","text":"\u667a\u80fd\u8f66\u9053\u7ebf\u9879\u76ee\u7684\u5b89\u5353\u6253\u5305\u4e0e\u4e0a\u4e00\u8282\u4e2d\u4ecb\u7ecd\u7684\u5b8c\u5168\u4e00\u81f4\uff0c\u8fd9\u91cc\u4ec5\u628a buildozer.spec \u6587\u4ef6\u7684\u5185\u5bb9\u505a\u8be6\u7ec6\u7684\u4ecb\u7ecd,\u5176\u5728\u5b89\u5353\u624b\u673a\u4e0a\u7684\u8fd0\u884c\u53ef\u4ee5\u53c2\u8003\u7b2c4\u7ae0\u6216\u6211\u4eec\u7684\u5728\u7ebf\u8bfe\u7a0b\u6f14\u793a [app] # (str) Title of your application title = \u8f66\u9053\u7ebf\u68c0\u6d4b # (str) Package name package.name = myapp # (str) Package domain (needed for android/ios packaging) package.domain = com.xujing # (str) Source code where the main.py live source.dir = . # (list) Source files to include (let empty to include all the files) source.include_exts = py,png,jpg,kv,atlas,ico,ttf # (list) List of inclusions using pattern matching #source.include_patterns = assets/*,images/*.png source.include_patterns = static/* # (list) Source files to exclude (let empty to not exclude anything) #source.exclude_exts = spec # (list) List of directory to exclude (let empty to not exclude anything) #source.exclude_dirs = tests, bin, venv # (list) List of exclusions using pattern matching #source.exclude_patterns = license,images/*/*.jpg # (str) Application versioning (method 1) version = 1.0.0 # (str) Application versioning (method 2) # version.regex = __version__ = ['\"](.*)['\"] # version.filename = %(source.dir)s/main.py # (list) Application requirements # comma separated e.g. requirements = sqlite3,kivy requirements = python3,kivy,numpy,opencv # (str) Custom source folders for requirements # Sets custom source for any requirements with recipes # requirements.source.kivy = ../../kivy # (str) Presplash of the application #presplash.filename = %(source.dir)s/data/presplash.png # (str) Icon of the application icon.filename = %(source.dir)s/static/icon.png # (str) Supported orientation (one of landscape, sensorLandscape, portrait or all) orientation = portrait # (list) List of service to declare #services = NAME:ENTRYPOINT_TO_PY,NAME2:ENTRYPOINT2_TO_PY # # OSX Specific # # # author = \u00a9 Copyright Info # change the major version of python used by the app osx.python_version = 3 # Kivy version to use osx.kivy_version = 1.9.1 # # Android specific # # (bool) Indicate if the application should be fullscreen or not fullscreen = 0 # (string) Presplash background color (for new android toolchain) # Supported formats are: #RRGGBB #AARRGGBB or one of the following names: # red, blue, green, black, white, gray, cyan, magenta, yellow, lightgray, # darkgray, grey, lightgrey, darkgrey, aqua, fuchsia, lime, maroon, navy, # olive, purple, silver, teal. #android.presplash_color = #FFFFFF # (list) Permissions android.permissions = INTERNET,CAMERA,READ_EXTERNAL_STORAGE,WRITE_EXTERNAL_STORAGE # (int) Target Android API, should be as high as possible. #android.api = 27 # (int) Minimum API your APK will support. #android.minapi = 21 # (int) Android SDK version to use #android.sdk = 20 # (str) Android NDK version to use #android.ndk = 19b # (int) Android NDK API to use. This is the minimum API your app will support, it should usually match android.minapi. #android.ndk_api = 21 # (bool) Use --private data storage (True) or --dir public storage (False) #android.private_storage = True # (str) Android NDK directory (if empty, it will be automatically downloaded.) #android.ndk_path = # (str) Android SDK directory (if empty, it will be automatically downloaded.) #android.sdk_path = # (str) ANT directory (if empty, it will be automatically downloaded.) #android.ant_path = # (bool) If True, then skip trying to update the Android sdk # This can be useful to avoid excess Internet downloads or save time # when an update is due and you just want to test/build your package # android.skip_update = False # (bool) If True, then automatically accept SDK license # agreements. This is intended for automation only. If set to False, # the default, you will be shown the license when first running # buildozer. # android.accept_sdk_license = False # (str) Android entry point, default is ok for Kivy-based app #android.entrypoint = org.renpy.android.PythonActivity # (str) Android app theme, default is ok for Kivy-based app # android.apptheme = \"@android:style/Theme.NoTitleBar\" # (list) Pattern to whitelist for the whole project #android.whitelist = # (str) Path to a custom whitelist file #android.whitelist_src = # (str) Path to a custom blacklist file #android.blacklist_src = # (list) List of Java .jar files to add to the libs so that pyjnius can access # their classes. Don't add jars that you do not need, since extra jars can slow # down the build process. Allows wildcards matching, for example: # OUYA-ODK/libs/*.jar #android.add_jars = foo.jar,bar.jar,path/to/more/*.jar # (list) List of Java files to add to the android project (can be java or a # directory containing the files) #android.add_src = # (list) Android AAR archives to add (currently works only with sdl2_gradle # bootstrap) #android.add_aars = # (list) Gradle dependencies to add (currently works only with sdl2_gradle # bootstrap) #android.gradle_dependencies = # (list) add java compile options # this can for example be necessary when importing certain java libraries using the 'android.gradle_dependencies' option # see https://developer.android.com/studio/write/java8-support for further information # android.add_compile_options = \"sourceCompatibility = 1.8\", \"targetCompatibility = 1.8\" # (list) Gradle repositories to add {can be necessary for some android.gradle_dependencies} # please enclose in double quotes # e.g. android.gradle_repositories = \"maven { url 'https://kotlin.bintray.com/ktor' }\" #android.add_gradle_repositories = # (list) packaging options to add # see https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.PackagingOptions.html # can be necessary to solve conflicts in gradle_dependencies # please enclose in double quotes # e.g. android.add_packaging_options = \"exclude 'META-INF/common.kotlin_module'\", \"exclude 'META-INF/*.kotlin_module'\" #android.add_gradle_repositories = # (list) Java classes to add as activities to the manifest. #android.add_activities = com.example.ExampleActivity # (str) OUYA Console category. Should be one of GAME or APP # If you leave this blank, OUYA support will not be enabled #android.ouya.category = GAME # (str) Filename of OUYA Console icon. It must be a 732x412 png image. #android.ouya.icon.filename = %(source.dir)s/data/ouya_icon.png # (str) XML file to include as an intent filters in <activity> tag #android.manifest.intent_filters = # (str) launchMode to set for the main activity #android.manifest.launch_mode = standard # (list) Android additional libraries to copy into libs/armeabi #android.add_libs_armeabi = libs/android/*.so #android.add_libs_armeabi_v7a = libs/android-v7/*.so #android.add_libs_arm64_v8a = libs/android-v8/*.so #android.add_libs_x86 = libs/android-x86/*.so #android.add_libs_mips = libs/android-mips/*.so # (bool) Indicate whether the screen should stay on # Don't forget to add the WAKE_LOCK permission if you set this to True #android.wakelock = False # (list) Android application meta-data to set (key=value format) #android.meta_data = # (list) Android library project to add (will be added in the # project.properties automatically.) #android.library_references = # (list) Android shared libraries which will be added to AndroidManifest.xml using <uses-library> tag #android.uses_library = # (str) Android logcat filters to use #android.logcat_filters = *:S python:D # (bool) Copy library instead of making a libpymodules.so #android.copy_libs = 1 # (str) The Android arch to build for, choices: armeabi-v7a, arm64-v8a, x86, x86_64 android.arch = armeabi-v7a # (int) overrides automatic versionCode computation (used in build.gradle) # this is not the same as app version and should only be edited if you know what you're doing # android.numeric_version = 1 # # Python for android (p4a) specific # # (str) python-for-android fork to use, defaults to upstream (kivy) #p4a.fork = kivy # (str) python-for-android branch to use, defaults to master #p4a.branch = master # (str) python-for-android git clone directory (if empty, it will be automatically cloned from github) #p4a.source_dir = # (str) The directory in which python-for-android should look for your own build recipes (if any) #p4a.local_recipes = # (str) Filename to the hook for p4a #p4a.hook = # (str) Bootstrap to use for android builds # p4a.bootstrap = sdl2 # (int) port number to specify an explicit --port= p4a argument (eg for bootstrap flask) #p4a.port = # # iOS specific # # (str) Path to a custom kivy-ios folder #ios.kivy_ios_dir = ../kivy-ios # Alternately, specify the URL and branch of a git checkout: ios.kivy_ios_url = https://github.com/kivy/kivy-ios ios.kivy_ios_branch = master # Another platform dependency: ios-deploy # Uncomment to use a custom checkout #ios.ios_deploy_dir = ../ios_deploy # Or specify URL and branch ios.ios_deploy_url = https://github.com/phonegap/ios-deploy ios.ios_deploy_branch = 1.10.0 # (bool) Whether or not to sign the code ios.codesign.allowed = false # (str) Name of the certificate to use for signing the debug version # Get a list of available identities: buildozer ios list_identities #ios.codesign.debug = \"iPhone Developer: <lastname> <firstname> (<hexstring>)\" # (str) Name of the certificate to use for signing the release version #ios.codesign.release = %(ios.codesign.debug)s [buildozer] # (int) Log level (0 = error only, 1 = info, 2 = debug (with command output)) log_level = 2 # (int) Display warning if buildozer is run as root (0 = False, 1 = True) warn_on_root = 1 # (str) Path to build artifact storage, absolute or relative to spec file # build_dir = ./.buildozer # (str) Path to build output (i.e. .apk, .ipa) storage # bin_dir = ./bin # ----------------------------------------------------------------------------- # List as sections # # You can define all the \"list\" as [section:key]. # Each line will be considered as a option to the list. # Let's take [app] / source.exclude_patterns. # Instead of doing: # #[app] #source.exclude_patterns = license,data/audio/*.wav,data/images/original/* # # This can be translated into: # #[app:source.exclude_patterns] #license #data/audio/*.wav #data/images/original/* # # ----------------------------------------------------------------------------- # Profiles # # You can extend section / key with a profile # For example, you want to deploy a demo version of your application without # HD content. You could first change the title to add \"(demo)\" in the name # and extend the excluded directories to remove the HD content. # #[app@demo] #title = My Application (demo) # #[app:source.exclude_patterns@demo] #images/hd/* # # Then, invoke the command line with the \"demo\" profile: # #buildozer --profile demo android debug","title":"1.\u57fa\u4e8e\u667a\u80fd\u8f66\u9053\u7ebf\u68c0\u6d4b\u9879\u76ee\u7684buildozer\u5b89\u5353\u6253\u5305\u53ca\u9879\u76ee\u6f14\u793a"},{"location":"chapter9/#3gankivymdbuildozeradb","text":"\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\u7684\u4e00\u952e\u73b0\u5b9e\u8f6c\u6362\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fb\u9879\u76ee\u7684\u5b89\u5353\u6253\u5305\u4e0e\u4e0a\u4e00\u8282\u4e2d\u4ecb\u7ecd\u7684\u5b8c\u5168\u4e00\u81f4\uff0c\u8fd9\u91cc\u4ec5\u628a buildozer.spec \u6587\u4ef6\u7684\u5185\u5bb9\u505a\u8be6\u7ec6\u7684\u4ecb\u7ecd,\u5176\u5728\u5b89\u5353\u624b\u673a\u4e0a\u7684\u8fd0\u884c\u53ef\u4ee5\u53c2\u8003\u7b2c5\u7ae0\u6216\u6211\u4eec\u7684\u5728\u7ebf\u8bfe\u7a0b\u6f14\u793a [app] # (str) Title of your application title = GAN\u4e8c\u6b21\u5143 # (str) Package name package.name = ganapp # (str) Package domain (needed for android/ios packaging) package.domain = com.xujing # (str) Source code where the main.py live source.dir = . # (list) Source files to include (let empty to include all the files) source.include_exts = py,png,jpg,kv,atlas,ttf,ico,gif # (list) List of inclusions using pattern matching #source.include_patterns = assets/*,images/*.png source.include_patterns = static/* # (list) Source files to exclude (let empty to not exclude anything) #source.exclude_exts = spec # (list) List of directory to exclude (let empty to not exclude anything) #source.exclude_dirs = tests, bin, venv # (list) List of exclusions using pattern matching #source.exclude_patterns = license,images/*/*.jpg # (str) Application versioning (method 1) version = 1.0.0 # (str) Application versioning (method 2) # version.regex = __version__ = ['\"](.*)['\"] # version.filename = %(source.dir)s/main.py # (list) Application requirements # comma separated e.g. requirements = sqlite3,kivy requirements = python3==3.7.5,hostpython3==3.7.5,kivy,kivymd,opencv,numpy,requests,Pillow,urllib3,chardet,idna # (str) Custom source folders for requirements # Sets custom source for any requirements with recipes # requirements.source.kivy = ../../kivy # (str) Presplash of the application #presplash.filename = %(source.dir)s/data/presplash.png # (str) Icon of the application icon.filename = %(source.dir)s/static/icon.png # (str) Supported orientation (one of landscape, sensorLandscape, portrait or all) orientation = portrait # (list) List of service to declare #services = NAME:ENTRYPOINT_TO_PY,NAME2:ENTRYPOINT2_TO_PY # # OSX Specific # # # author = \u00a9 Copyright Info # change the major version of python used by the app osx.python_version = 3 # Kivy version to use osx.kivy_version = 1.9.1 # # Android specific # # (bool) Indicate if the application should be fullscreen or not fullscreen = 0 # (string) Presplash background color (for new android toolchain) # Supported formats are: #RRGGBB #AARRGGBB or one of the following names: # red, blue, green, black, white, gray, cyan, magenta, yellow, lightgray, # darkgray, grey, lightgrey, darkgrey, aqua, fuchsia, lime, maroon, navy, # olive, purple, silver, teal. #android.presplash_color = #FFFFFF # (list) Permissions #android.permissions = INTERNET, # (int) Target Android API, should be as high as possible. #android.api = 27 # (int) Minimum API your APK will support. #android.minapi = 21 # (int) Android SDK version to use #android.sdk = 20 # (str) Android NDK version to use #android.ndk = 19b # (int) Android NDK API to use. This is the minimum API your app will support, it should usually match android.minapi. #android.ndk_api = 21 # (bool) Use --private data storage (True) or --dir public storage (False) #android.private_storage = True # (str) Android NDK directory (if empty, it will be automatically downloaded.) #android.ndk_path = # (str) Android SDK directory (if empty, it will be automatically downloaded.) #android.sdk_path = # (str) ANT directory (if empty, it will be automatically downloaded.) #android.ant_path = # (bool) If True, then skip trying to update the Android sdk # This can be useful to avoid excess Internet downloads or save time # when an update is due and you just want to test/build your package # android.skip_update = False # (bool) If True, then automatically accept SDK license # agreements. This is intended for automation only. If set to False, # the default, you will be shown the license when first running # buildozer. # android.accept_sdk_license = False # (str) Android entry point, default is ok for Kivy-based app #android.entrypoint = org.renpy.android.PythonActivity # (str) Android app theme, default is ok for Kivy-based app # android.apptheme = \"@android:style/Theme.NoTitleBar\" # (list) Pattern to whitelist for the whole project #android.whitelist = # (str) Path to a custom whitelist file #android.whitelist_src = # (str) Path to a custom blacklist file #android.blacklist_src = # (list) List of Java .jar files to add to the libs so that pyjnius can access # their classes. Don't add jars that you do not need, since extra jars can slow # down the build process. Allows wildcards matching, for example: # OUYA-ODK/libs/*.jar #android.add_jars = foo.jar,bar.jar,path/to/more/*.jar # (list) List of Java files to add to the android project (can be java or a # directory containing the files) #android.add_src = # (list) Android AAR archives to add (currently works only with sdl2_gradle # bootstrap) #android.add_aars = # (list) Gradle dependencies to add (currently works only with sdl2_gradle # bootstrap) #android.gradle_dependencies = # (list) add java compile options # this can for example be necessary when importing certain java libraries using the 'android.gradle_dependencies' option # see https://developer.android.com/studio/write/java8-support for further information # android.add_compile_options = \"sourceCompatibility = 1.8\", \"targetCompatibility = 1.8\" # (list) Gradle repositories to add {can be necessary for some android.gradle_dependencies} # please enclose in double quotes # e.g. android.gradle_repositories = \"maven { url 'https://kotlin.bintray.com/ktor' }\" #android.add_gradle_repositories = # (list) packaging options to add # see https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.PackagingOptions.html # can be necessary to solve conflicts in gradle_dependencies # please enclose in double quotes # e.g. android.add_packaging_options = \"exclude 'META-INF/common.kotlin_module'\", \"exclude 'META-INF/*.kotlin_module'\" #android.add_gradle_repositories = # (list) Java classes to add as activities to the manifest. #android.add_activities = com.example.ExampleActivity # (str) OUYA Console category. Should be one of GAME or APP # If you leave this blank, OUYA support will not be enabled #android.ouya.category = GAME # (str) Filename of OUYA Console icon. It must be a 732x412 png image. #android.ouya.icon.filename = %(source.dir)s/data/ouya_icon.png # (str) XML file to include as an intent filters in <activity> tag #android.manifest.intent_filters = # (str) launchMode to set for the main activity #android.manifest.launch_mode = standard # (list) Android additional libraries to copy into libs/armeabi #android.add_libs_armeabi = libs/android/*.so #android.add_libs_armeabi_v7a = libs/android-v7/*.so #android.add_libs_arm64_v8a = libs/android-v8/*.so #android.add_libs_x86 = libs/android-x86/*.so #android.add_libs_mips = libs/android-mips/*.so # (bool) Indicate whether the screen should stay on # Don't forget to add the WAKE_LOCK permission if you set this to True #android.wakelock = False # (list) Android application meta-data to set (key=value format) #android.meta_data = # (list) Android library project to add (will be added in the # project.properties automatically.) #android.library_references = # (list) Android shared libraries which will be added to AndroidManifest.xml using <uses-library> tag #android.uses_library = # (str) Android logcat filters to use #android.logcat_filters = *:S python:D # (bool) Copy library instead of making a libpymodules.so #android.copy_libs = 1 # (str) The Android arch to build for, choices: armeabi-v7a, arm64-v8a, x86, x86_64 android.arch = armeabi-v7a # (int) overrides automatic versionCode computation (used in build.gradle) # this is not the same as app version and should only be edited if you know what you're doing # android.numeric_version = 1 # # Python for android (p4a) specific # # (str) python-for-android fork to use, defaults to upstream (kivy) #p4a.fork = kivy # (str) python-for-android branch to use, defaults to master #p4a.branch = master # (str) python-for-android git clone directory (if empty, it will be automatically cloned from github) #p4a.source_dir = # (str) The directory in which python-for-android should look for your own build recipes (if any) #p4a.local_recipes = # (str) Filename to the hook for p4a #p4a.hook = # (str) Bootstrap to use for android builds # p4a.bootstrap = sdl2 # (int) port number to specify an explicit --port= p4a argument (eg for bootstrap flask) #p4a.port = # # iOS specific # # (str) Path to a custom kivy-ios folder #ios.kivy_ios_dir = ../kivy-ios # Alternately, specify the URL and branch of a git checkout: ios.kivy_ios_url = https://github.com/kivy/kivy-ios ios.kivy_ios_branch = master # Another platform dependency: ios-deploy # Uncomment to use a custom checkout #ios.ios_deploy_dir = ../ios_deploy # Or specify URL and branch ios.ios_deploy_url = https://github.com/phonegap/ios-deploy ios.ios_deploy_branch = 1.10.0 # (bool) Whether or not to sign the code ios.codesign.allowed = false # (str) Name of the certificate to use for signing the debug version # Get a list of available identities: buildozer ios list_identities #ios.codesign.debug = \"iPhone Developer: <lastname> <firstname> (<hexstring>)\" # (str) Name of the certificate to use for signing the release version #ios.codesign.release = %(ios.codesign.debug)s [buildozer] # (int) Log level (0 = error only, 1 = info, 2 = debug (with command output)) log_level = 2 # (int) Display warning if buildozer is run as root (0 = False, 1 = True) warn_on_root = 1 # (str) Path to build artifact storage, absolute or relative to spec file # build_dir = ./.buildozer # (str) Path to build output (i.e. .apk, .ipa) storage # bin_dir = ./bin # ----------------------------------------------------------------------------- # List as sections # # You can define all the \"list\" as [section:key]. # Each line will be considered as a option to the list. # Let's take [app] / source.exclude_patterns. # Instead of doing: # #[app] #source.exclude_patterns = license,data/audio/*.wav,data/images/original/* # # This can be translated into: # #[app:source.exclude_patterns] #license #data/audio/*.wav #data/images/original/* # # ----------------------------------------------------------------------------- # Profiles # # You can extend section / key with a profile # For example, you want to deploy a demo version of your application without # HD content. You could first change the title to add \"(demo)\" in the name # and extend the excluded directories to remove the HD content. # #[app@demo] #title = My Application (demo) # #[app:source.exclude_patterns@demo] #images/hd/* # # Then, invoke the command line with the \"demo\" profile: # #buildozer --profile demo android debug \u5173\u4e8e\u6253\u5305release\u7248\u672c\u7684android apk, \u53ef\u4ee5\u53c2\u8003 https://github.com/kivy/kivy/wiki/Creating-a-Release-APK","title":"3.\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GAN)\u7684\u4e00\u952e\u73b0\u5b9e\u8f6c\u6362\u4e8c\u6b21\u5143\u52a8\u753b\u573a\u666f\u8fc1\u79fb\u9879\u76ee(\u57fa\u4e8eKivymd)buildozer\u5b89\u5353\u6253\u5305\u53caadb\u5b89\u5353\u8c03\u8bd5"}]}